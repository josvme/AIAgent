{
    "\nFor the project `console`:\n\nCodebase Context:\n--- File Index 0: Color.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\n\n/**\n * @author Fabien Potencier <fabien@symfony.com>\n */\nfinal class Color\n{\n    private const COLORS = [\n        'black' => 0,\n        'red' => 1,\n        'green' => 2,\n        'yellow' => 3,\n        'blue' => 4,\n        'magenta' => 5,\n        'cyan' => 6,\n        'white' => 7,\n        'default' => 9,\n    ];\n\n    private const BRIGHT_COLORS = [\n        'gray' => 0,\n        'bright-red' => 1,\n        'bright-green' => 2,\n        'bright-yellow' => 3,\n        'bright-blue' => 4,\n        'bright-magenta' => 5,\n        'bright-cyan' => 6,\n        'bright-white' => 7,\n    ];\n\n    private const AVAILABLE_OPTIONS = [\n        'bold' => ['set' => 1, 'unset' => 22],\n        'underscore' => ['set' => 4, 'unset' => 24],\n        'blink' => ['set' => 5, 'unset' => 25],\n        'reverse' => ['set' => 7, 'unset' => 27],\n        'conceal' => ['set' => 8, 'unset' => 28],\n    ];\n\n    private string $foreground;\n    private string $background;\n    private array $options = [];\n\n    public function __construct(string $foreground = '', string $background = '', array $options = [])\n    {\n        $this->foreground = $this->parseColor($foreground);\n        $this->background = $this->parseColor($background, true);\n\n        foreach ($options as $option) {\n            if (!isset(self::AVAILABLE_OPTIONS[$option])) {\n                throw new InvalidArgumentException(\\sprintf('Invalid option specified: \"%s\". Expected one of (%s).', $option, implode(', ', array_keys(self::AVAILABLE_OPTIONS))));\n            }\n\n            $this->options[$option] = self::AVAILABLE_OPTIONS[$option];\n        }\n    }\n\n    public function apply(string $text): string\n    {\n        return $this->set().$text.$this->unset();\n    }\n\n    public function set(): string\n    {\n        $setCodes = [];\n        if ('' !== $this->foreground) {\n            $setCodes[] = $this->foreground;\n        }\n        if ('' !== $this->background) {\n            $setCodes[] = $this->background;\n        }\n        foreach ($this->options as $option) {\n            $setCodes[] = $option['set'];\n        }\n        if (0 === \\count($setCodes)) {\n            return '';\n        }\n\n        return \\sprintf(\"\\033[%sm\", implode(';', $setCodes));\n    }\n\n    public function unset(): string\n    {\n        $unsetCodes = [];\n        if ('' !== $this->foreground) {\n            $unsetCodes[] = 39;\n        }\n        if ('' !== $this->background) {\n            $unsetCodes[] = 49;\n        }\n        foreach ($this->options as $option) {\n            $unsetCodes[] = $option['unset'];\n        }\n        if (0 === \\count($unsetCodes)) {\n            return '';\n        }\n\n        return \\sprintf(\"\\033[%sm\", implode(';', $unsetCodes));\n    }\n\n    private function parseColor(string $color, bool $background = false): string\n    {\n        if ('' === $color) {\n            return '';\n        }\n\n        if ('#' === $color[0]) {\n            return ($background ? '4' : '3').Terminal::getColorMode()->convertFromHexToAnsiColorCode($color);\n        }\n\n        if (isset(self::COLORS[$color])) {\n            return ($background ? '4' : '3').self::COLORS[$color];\n        }\n\n        if (isset(self::BRIGHT_COLORS[$color])) {\n            return ($background ? '10' : '9').self::BRIGHT_COLORS[$color];\n        }\n\n        throw new InvalidArgumentException(\\sprintf('Invalid \"%s\" color; expected one of (%s).', $color, implode(', ', array_merge(array_keys(self::COLORS), array_keys(self::BRIGHT_COLORS)))));\n    }\n}\n\n\n--- File Index 1: ConsoleEvents.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console;\n\nuse Symfony\\Component\\Console\\Event\\ConsoleCommandEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleErrorEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleSignalEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent;\n\n/**\n * Contains all events dispatched by an Application.\n *\n * @author Francesco Levorato <git@flevour.net>\n */\nfinal class ConsoleEvents\n{\n    /**\n     * The COMMAND event allows you to attach listeners before any command is\n     * executed by the console. It also allows you to modify the command, input and output\n     * before they are handed to the command.\n     *\n     * @Event(\"Symfony\\Component\\Console\\Event\\ConsoleCommandEvent\")\n     */\n    public const COMMAND = 'console.command';\n\n    /**\n     * The SIGNAL event allows you to perform some actions\n     * after the command execution was interrupted.\n     *\n     * @Event(\"Symfony\\Component\\Console\\Event\\ConsoleSignalEvent\")\n     */\n    public const SIGNAL = 'console.signal';\n\n    /**\n     * The TERMINATE event allows you to attach listeners after a command is\n     * executed by the console.\n     *\n     * @Event(\"Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent\")\n     */\n    public const TERMINATE = 'console.terminate';\n\n    /**\n     * The ERROR event occurs when an uncaught exception or error appears.\n     *\n     * This event allows you to deal with the exception/error or\n     * to modify the thrown exception.\n     *\n     * @Event(\"Symfony\\Component\\Console\\Event\\ConsoleErrorEvent\")\n     */\n    public const ERROR = 'console.error';\n\n    /**\n     * Event aliases.\n     *\n     * These aliases can be consumed by RegisterListenersPass.\n     */\n    public const ALIASES = [\n        ConsoleCommandEvent::class => self::COMMAND,\n        ConsoleErrorEvent::class => self::ERROR,\n        ConsoleSignalEvent::class => self::SIGNAL,\n        ConsoleTerminateEvent::class => self::TERMINATE,\n    ];\n}\n\n\n--- File Index 2: Cursor.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console;\n\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * @author Pierre du Plessis <pdples@gmail.com>\n */\nfinal class Cursor\n{\n    /** @var resource */\n    private $input;\n\n    /**\n     * @param resource|null $input\n     */\n    public function __construct(\n        private OutputInterface $output,\n        $input = null,\n    ) {\n        $this->input = $input ?? (\\defined('STDIN') ? \\STDIN : fopen('php://input', 'r+'));\n    }\n\n    /**\n     * @return $this\n     */\n    public function moveUp(int $lines = 1): static\n    {\n        $this->output->write(\\sprintf(\"\\x1b[%dA\", $lines));\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function moveDown(int $lines = 1): static\n    {\n        $this->output->write(\\sprintf(\"\\x1b[%dB\", $lines));\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function moveRight(int $columns = 1): static\n    {\n        $this->output->write(\\sprintf(\"\\x1b[%dC\", $columns));\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function moveLeft(int $columns = 1): static\n    {\n        $this->output->write(\\sprintf(\"\\x1b[%dD\", $columns));\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function moveToColumn(int $column): static\n    {\n        $this->output->write(\\sprintf(\"\\x1b[%dG\", $column));\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function moveToPosition(int $column, int $row): static\n    {\n        $this->output->write(\\sprintf(\"\\x1b[%d;%dH\", $row + 1, $column));\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function savePosition(): static\n    {\n        $this->output->write(\"\\x1b7\");\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function restorePosition(): static\n    {\n        $this->output->write(\"\\x1b8\");\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function hide(): static\n    {\n        $this->output->write(\"\\x1b[?25l\");\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function show(): static\n    {\n        $this->output->write(\"\\x1b[?25h\\x1b[?0c\");\n\n        return $this;\n    }\n\n    /**\n     * Clears all the output from the current line.\n     *\n     * @return $this\n     */\n    public function clearLine(): static\n    {\n        $this->output->write(\"\\x1b[2K\");\n\n        return $this;\n    }\n\n    /**\n     * Clears all the output from the current line after the current position.\n     */\n    public function clearLineAfter(): self\n    {\n        $this->output->write(\"\\x1b[K\");\n\n        return $this;\n    }\n\n    /**\n     * Clears all the output from the cursors' current position to the end of the screen.\n     *\n     * @return $this\n     */\n    public function clearOutput(): static\n    {\n        $this->output->write(\"\\x1b[0J\");\n\n        return $this;\n    }\n\n    /**\n     * Clears the entire screen.\n     *\n     * @return $this\n     */\n    public function clearScreen(): static\n    {\n        $this->output->write(\"\\x1b[2J\");\n\n        return $this;\n    }\n\n    /**\n     * Returns the current cursor position as x,y coordinates.\n     */\n    public function getCurrentPosition(): array\n    {\n        static $isTtySupported;\n\n        if (!$isTtySupported ??= '/' === \\DIRECTORY_SEPARATOR && stream_isatty(\\STDOUT)) {\n            return [1, 1];\n        }\n\n        $sttyMode = shell_exec('stty -g');\n        shell_exec('stty -icanon -echo');\n\n        @fwrite($this->input, \"\\033[6n\");\n\n        $code = trim(fread($this->input, 1024));\n\n        shell_exec(\\sprintf('stty %s', $sttyMode));\n\n        sscanf($code, \"\\033[%d;%dR\", $row, $col);\n\n        return [$col, $row];\n    }\n}\n\n\n--- File Index 3: Application.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Command\\CompleteCommand;\nuse Symfony\\Component\\Console\\Command\\DumpCompletionCommand;\nuse Symfony\\Component\\Console\\Command\\HelpCommand;\nuse Symfony\\Component\\Console\\Command\\LazyCommand;\nuse Symfony\\Component\\Console\\Command\\ListCommand;\nuse Symfony\\Component\\Console\\Command\\SignalableCommandInterface;\nuse Symfony\\Component\\Console\\CommandLoader\\CommandLoaderInterface;\nuse Symfony\\Component\\Console\\Completion\\CompletionInput;\nuse Symfony\\Component\\Console\\Completion\\CompletionSuggestions;\nuse Symfony\\Component\\Console\\Completion\\Suggestion;\nuse Symfony\\Component\\Console\\Event\\ConsoleAlarmEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleCommandEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleErrorEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleSignalEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent;\nuse Symfony\\Component\\Console\\Exception\\CommandNotFoundException;\nuse Symfony\\Component\\Console\\Exception\\ExceptionInterface;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\nuse Symfony\\Component\\Console\\Exception\\NamespaceNotFoundException;\nuse Symfony\\Component\\Console\\Exception\\RuntimeException;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatter;\nuse Symfony\\Component\\Console\\Helper\\DebugFormatterHelper;\nuse Symfony\\Component\\Console\\Helper\\DescriptorHelper;\nuse Symfony\\Component\\Console\\Helper\\FormatterHelper;\nuse Symfony\\Component\\Console\\Helper\\Helper;\nuse Symfony\\Component\\Console\\Helper\\HelperSet;\nuse Symfony\\Component\\Console\\Helper\\ProcessHelper;\nuse Symfony\\Component\\Console\\Helper\\QuestionHelper;\nuse Symfony\\Component\\Console\\Input\\ArgvInput;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputAwareInterface;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutput;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\SignalRegistry\\SignalRegistry;\nuse Symfony\\Component\\Console\\Style\\SymfonyStyle;\nuse Symfony\\Component\\ErrorHandler\\ErrorHandler;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Contracts\\Service\\ResetInterface;\n\n/**\n * An Application is the container for a collection of commands.\n *\n * It is the main entry point of a Console application.\n *\n * This class is optimized for a standard CLI environment.\n *\n * Usage:\n *\n *     $app = new Application('myapp', '1.0 (stable)');\n *     $app->add(new SimpleCommand());\n *     $app->run();\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass Application implements ResetInterface\n{\n    private array $commands = [];\n    private bool $wantHelps = false;\n    private ?Command $runningCommand = null;\n    private ?CommandLoaderInterface $commandLoader = null;\n    private bool $catchExceptions = true;\n    private bool $catchErrors = false;\n    private bool $autoExit = true;\n    private InputDefinition $definition;\n    private HelperSet $helperSet;\n    private ?EventDispatcherInterface $dispatcher = null;\n    private Terminal $terminal;\n    private string $defaultCommand;\n    private bool $singleCommand = false;\n    private bool $initialized = false;\n    private ?SignalRegistry $signalRegistry = null;\n    private array $signalsToDispatchEvent = [];\n    private ?int $alarmInterval = null;\n\n    public function __construct(\n        private string $name = 'UNKNOWN',\n        private string $version = 'UNKNOWN',\n    ) {\n        $this->terminal = new Terminal();\n        $this->defaultCommand = 'list';\n        if (\\defined('SIGINT') && SignalRegistry::isSupported()) {\n            $this->signalRegistry = new SignalRegistry();\n            $this->signalsToDispatchEvent = [\\SIGINT, \\SIGQUIT, \\SIGTERM, \\SIGUSR1, \\SIGUSR2, \\SIGALRM];\n        }\n    }\n\n    /**\n     * @final\n     */\n    public function setDispatcher(EventDispatcherInterface $dispatcher): void\n    {\n        $this->dispatcher = $dispatcher;\n    }\n\n    public function setCommandLoader(CommandLoaderInterface $commandLoader): void\n    {\n        $this->commandLoader = $commandLoader;\n    }\n\n    public function getSignalRegistry(): SignalRegistry\n    {\n        if (!$this->signalRegistry) {\n            throw new RuntimeException('Signals are not supported. Make sure that the \"pcntl\" extension is installed and that \"pcntl_*\" functions are not disabled by your php.ini\\'s \"disable_functions\" directive.');\n        }\n\n        return $this->signalRegistry;\n    }\n\n    public function setSignalsToDispatchEvent(int ...$signalsToDispatchEvent): void\n    {\n        $this->signalsToDispatchEvent = $signalsToDispatchEvent;\n    }\n\n    /**\n     * Sets the interval to schedule a SIGALRM signal in seconds.\n     */\n    public function setAlarmInterval(?int $seconds): void\n    {\n        $this->alarmInterval = $seconds;\n        $this->scheduleAlarm();\n    }\n\n    /**\n     * Gets the interval in seconds on which a SIGALRM signal is dispatched.\n     */\n    public function getAlarmInterval(): ?int\n    {\n        return $this->alarmInterval;\n    }\n\n    private function scheduleAlarm(): void\n    {\n        if (null !== $this->alarmInterval) {\n            $this->getSignalRegistry()->scheduleAlarm($this->alarmInterval);\n        }\n    }\n\n    /**\n     * Runs the current application.\n     *\n     * @return int 0 if everything went fine, or an error code\n     *\n     * @throws \\Exception When running fails. Bypass this when {@link setCatchExceptions()}.\n     */\n    public function run(?InputInterface $input = null, ?OutputInterface $output = null): int\n    {\n        if (\\function_exists('putenv')) {\n            @putenv('LINES='.$this->terminal->getHeight());\n            @putenv('COLUMNS='.$this->terminal->getWidth());\n        }\n\n        $input ??= new ArgvInput();\n        $output ??= new ConsoleOutput();\n\n        $renderException = function (\\Throwable $e) use ($output) {\n            if ($output instanceof ConsoleOutputInterface) {\n                $this->renderThrowable($e, $output->getErrorOutput());\n            } else {\n                $this->renderThrowable($e, $output);\n            }\n        };\n        if ($phpHandler = set_exception_handler($renderException)) {\n            restore_exception_handler();\n            if (!\\is_array($phpHandler) || !$phpHandler[0] instanceof ErrorHandler) {\n                $errorHandler = true;\n            } elseif ($errorHandler = $phpHandler[0]->setExceptionHandler($renderException)) {\n                $phpHandler[0]->setExceptionHandler($errorHandler);\n            }\n        }\n\n        try {\n            $this->configureIO($input, $output);\n\n            $exitCode = $this->doRun($input, $output);\n        } catch (\\Throwable $e) {\n            if ($e instanceof \\Exception && !$this->catchExceptions) {\n                throw $e;\n            }\n            if (!$e instanceof \\Exception && !$this->catchErrors) {\n                throw $e;\n            }\n\n            $renderException($e);\n\n            $exitCode = $e->getCode();\n            if (is_numeric($exitCode)) {\n                $exitCode = (int) $exitCode;\n                if ($exitCode <= 0) {\n                    $exitCode = 1;\n                }\n            } else {\n                $exitCode = 1;\n            }\n        } finally {\n            // if the exception handler changed, keep it\n            // otherwise, unregister $renderException\n            if (!$phpHandler) {\n                if (set_exception_handler($renderException) === $renderException) {\n                    restore_exception_handler();\n                }\n                restore_exception_handler();\n            } elseif (!$errorHandler) {\n                $finalHandler = $phpHandler[0]->setExceptionHandler(null);\n                if ($finalHandler !== $renderException) {\n                    $phpHandler[0]->setExceptionHandler($finalHandler);\n                }\n            }\n        }\n\n        if ($this->autoExit) {\n            if ($exitCode > 255) {\n                $exitCode = 255;\n            }\n\n            exit($exitCode);\n        }\n\n        return $exitCode;\n    }\n\n    /**\n     * Runs the current application.\n     *\n     * @return int 0 if everything went fine, or an error code\n     */\n    public function doRun(InputInterface $input, OutputInterface $output): int\n    {\n        if (true === $input->hasParameterOption(['--version', '-V'], true)) {\n            $output->writeln($this->getLongVersion());\n\n            return 0;\n        }\n\n        try {\n            // Makes ArgvInput::getFirstArgument() able to distinguish an option from an argument.\n            $input->bind($this->getDefinition());\n        } catch (ExceptionInterface) {\n            // Errors must be ignored, full binding/validation happens later when the command is known.\n        }\n\n        $name = $this->getCommandName($input);\n        if (true === $input->hasParameterOption(['--help', '-h'], true)) {\n            if (!$name) {\n                $name = 'help';\n                $input = new ArrayInput(['command_name' => $this->defaultCommand]);\n            } else {\n                $this->wantHelps = true;\n            }\n        }\n\n        if (!$name) {\n            $name = $this->defaultCommand;\n            $definition = $this->getDefinition();\n            $definition->setArguments(array_merge(\n                $definition->getArguments(),\n                [\n                    'command' => new InputArgument('command', InputArgument::OPTIONAL, $definition->getArgument('command')->getDescription(), $name),\n                ]\n            ));\n        }\n\n        try {\n            $this->runningCommand = null;\n            // the command name MUST be the first element of the input\n            $command = $this->find($name);\n        } catch (\\Throwable $e) {\n            if (($e instanceof CommandNotFoundException && !$e instanceof NamespaceNotFoundException) && 1 === \\count($alternatives = $e->getAlternatives()) && $input->isInteractive()) {\n                $alternative = $alternatives[0];\n\n                $style = new SymfonyStyle($input, $output);\n                $output->writeln('');\n                $formattedBlock = (new FormatterHelper())->formatBlock(\\sprintf('Command \"%s\" is not defined.', $name), 'error', true);\n                $output->writeln($formattedBlock);\n                if (!$style->confirm(\\sprintf('Do you want to run \"%s\" instead? ', $alternative), false)) {\n                    if (null !== $this->dispatcher) {\n                        $event = new ConsoleErrorEvent($input, $output, $e);\n                        $this->dispatcher->dispatch($event, ConsoleEvents::ERROR);\n\n                        return $event->getExitCode();\n                    }\n\n                    return 1;\n                }\n\n                $command = $this->find($alternative);\n            } else {\n                if (null !== $this->dispatcher) {\n                    $event = new ConsoleErrorEvent($input, $output, $e);\n                    $this->dispatcher->dispatch($event, ConsoleEvents::ERROR);\n\n                    if (0 === $event->getExitCode()) {\n                        return 0;\n                    }\n\n                    $e = $event->getError();\n                }\n\n                try {\n                    if ($e instanceof CommandNotFoundException && $namespace = $this->findNamespace($name)) {\n                        $helper = new DescriptorHelper();\n                        $helper->describe($output instanceof ConsoleOutputInterface ? $output->getErrorOutput() : $output, $this, [\n                            'format' => 'txt',\n                            'raw_text' => false,\n                            'namespace' => $namespace,\n                            'short' => false,\n                        ]);\n\n                        return isset($event) ? $event->getExitCode() : 1;\n                    }\n\n                    throw $e;\n                } catch (NamespaceNotFoundException) {\n                    throw $e;\n                }\n            }\n        }\n\n        if ($command instanceof LazyCommand) {\n            $command = $command->getCommand();\n        }\n\n        $this->runningCommand = $command;\n        $exitCode = $this->doRunCommand($command, $input, $output);\n        $this->runningCommand = null;\n\n        return $exitCode;\n    }\n\n    public function reset(): void\n    {\n    }\n\n    public function setHelperSet(HelperSet $helperSet): void\n    {\n        $this->helperSet = $helperSet;\n    }\n\n    /**\n     * Get the helper set associated with the command.\n     */\n    public function getHelperSet(): HelperSet\n    {\n        return $this->helperSet ??= $this->getDefaultHelperSet();\n    }\n\n    public function setDefinition(InputDefinition $definition): void\n    {\n        $this->definition = $definition;\n    }\n\n    /**\n     * Gets the InputDefinition related to this Application.\n     */\n    public function getDefinition(): InputDefinition\n    {\n        $this->definition ??= $this->getDefaultInputDefinition();\n\n        if ($this->singleCommand) {\n            $inputDefinition = $this->definition;\n            $inputDefinition->setArguments();\n\n            return $inputDefinition;\n        }\n\n        return $this->definition;\n    }\n\n    /**\n     * Adds suggestions to $suggestions for the current completion input (e.g. option or argument).\n     */\n    public function complete(CompletionInput $input, CompletionSuggestions $suggestions): void\n    {\n        if (\n            CompletionInput::TYPE_ARGUMENT_VALUE === $input->getCompletionType()\n            && 'command' === $input->getCompletionName()\n        ) {\n            foreach ($this->all() as $name => $command) {\n                // skip hidden commands and aliased commands as they already get added below\n                if ($command->isHidden() || $command->getName() !== $name) {\n                    continue;\n                }\n                $suggestions->suggestValue(new Suggestion($command->getName(), $command->getDescription()));\n                foreach ($command->getAliases() as $name) {\n                    $suggestions->suggestValue(new Suggestion($name, $command->getDescription()));\n                }\n            }\n\n            return;\n        }\n\n        if (CompletionInput::TYPE_OPTION_NAME === $input->getCompletionType()) {\n            $suggestions->suggestOptions($this->getDefinition()->getOptions());\n        }\n    }\n\n    /**\n     * Gets the help message.\n     */\n    public function getHelp(): string\n    {\n        return $this->getLongVersion();\n    }\n\n    /**\n     * Gets whether to catch exceptions or not during commands execution.\n     */\n    public function areExceptionsCaught(): bool\n    {\n        return $this->catchExceptions;\n    }\n\n    /**\n     * Sets whether to catch exceptions or not during commands execution.\n     */\n    public function setCatchExceptions(bool $boolean): void\n    {\n        $this->catchExceptions = $boolean;\n    }\n\n    /**\n     * Sets whether to catch errors or not during commands execution.\n     */\n    public function setCatchErrors(bool $catchErrors = true): void\n    {\n        $this->catchErrors = $catchErrors;\n    }\n\n    /**\n     * Gets whether to automatically exit after a command execution or not.\n     */\n    public function isAutoExitEnabled(): bool\n    {\n        return $this->autoExit;\n    }\n\n    /**\n     * Sets whether to automatically exit after a command execution or not.\n     */\n    public function setAutoExit(bool $boolean): void\n    {\n        $this->autoExit = $boolean;\n    }\n\n    /**\n     * Gets the name of the application.\n     */\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    /**\n     * Sets the application name.\n     */\n    public function setName(string $name): void\n    {\n        $this->name = $name;\n    }\n\n    /**\n     * Gets the application version.\n     */\n    public function getVersion(): string\n    {\n        return $this->version;\n    }\n\n    /**\n     * Sets the application version.\n     */\n    public function setVersion(string $version): void\n    {\n        $this->version = $version;\n    }\n\n    /**\n     * Returns the long version of the application.\n     */\n    public function getLongVersion(): string\n    {\n        if ('UNKNOWN' !== $this->getName()) {\n            if ('UNKNOWN' !== $this->getVersion()) {\n                return \\sprintf('%s <info>%s</info>', $this->getName(), $this->getVersion());\n            }\n\n            return $this->getName();\n        }\n\n        return 'Console Tool';\n    }\n\n    /**\n     * Registers a new command.\n     */\n    public function register(string $name): Command\n    {\n        return $this->add(new Command($name));\n    }\n\n    /**\n     * Adds an array of command objects.\n     *\n     * If a Command is not enabled it will not be added.\n     *\n     * @param Command[] $commands An array of commands\n     */\n    public function addCommands(array $commands): void\n    {\n        foreach ($commands as $command) {\n            $this->add($command);\n        }\n    }\n\n    /**\n     * Adds a command object.\n     *\n     * If a command with the same name already exists, it will be overridden.\n     * If the command is not enabled it will not be added.\n     */\n    public function add(Command $command): ?Command\n    {\n        $this->init();\n\n        $command->setApplication($this);\n\n        if (!$command->isEnabled()) {\n            $command->setApplication(null);\n\n            return null;\n        }\n\n        if (!$command instanceof LazyCommand) {\n            // Will throw if the command is not correctly initialized.\n            $command->getDefinition();\n        }\n\n        if (!$command->getName()) {\n            throw new LogicException(\\sprintf('The command defined in \"%s\" cannot have an empty name.', get_debug_type($command)));\n        }\n\n        $this->commands[$command->getName()] = $command;\n\n        foreach ($command->getAliases() as $alias) {\n            $this->commands[$alias] = $command;\n        }\n\n        return $command;\n    }\n\n    /**\n     * Returns a registered command by name or alias.\n     *\n     * @throws CommandNotFoundException When given command name does not exist\n     */\n    public function get(string $name): Command\n    {\n        $this->init();\n\n        if (!$this->has($name)) {\n            throw new CommandNotFoundException(\\sprintf('The command \"%s\" does not exist.', $name));\n        }\n\n        // When the command has a different name than the one used at the command loader level\n        if (!isset($this->commands[$name])) {\n            throw new CommandNotFoundException(\\sprintf('The \"%s\" command cannot be found because it is registered under multiple names. Make sure you don\\'t set a different name via constructor or \"setName()\".', $name));\n        }\n\n        $command = $this->commands[$name];\n\n        if ($this->wantHelps) {\n            $this->wantHelps = false;\n\n            $helpCommand = $this->get('help');\n            $helpCommand->setCommand($command);\n\n            return $helpCommand;\n        }\n\n        return $command;\n    }\n\n    /**\n     * Returns true if the command exists, false otherwise.\n     */\n    public function has(string $name): bool\n    {\n        $this->init();\n\n        return isset($this->commands[$name]) || ($this->commandLoader?->has($name) && $this->add($this->commandLoader->get($name)));\n    }\n\n    /**\n     * Returns an array of all unique namespaces used by currently registered commands.\n     *\n     * It does not return the global namespace which always exists.\n     *\n     * @return string[]\n     */\n    public function getNamespaces(): array\n    {\n        $namespaces = [];\n        foreach ($this->all() as $command) {\n            if ($command->isHidden()) {\n                continue;\n            }\n\n            $namespaces[] = $this->extractAllNamespaces($command->getName());\n\n            foreach ($command->getAliases() as $alias) {\n                $namespaces[] = $this->extractAllNamespaces($alias);\n            }\n        }\n\n        return array_values(array_unique(array_filter(array_merge([], ...$namespaces))));\n    }\n\n    /**\n     * Finds a registered namespace by a name or an abbreviation.\n     *\n     * @throws NamespaceNotFoundException When namespace is incorrect or ambiguous\n     */\n    public function findNamespace(string $namespace): string\n    {\n        $allNamespaces = $this->getNamespaces();\n        $expr = implode('[^:]*:', array_map('preg_quote', explode(':', $namespace))).'[^:]*';\n        $namespaces = preg_grep('{^'.$expr.'}', $allNamespaces);\n\n        if (!$namespaces) {\n            $message = \\sprintf('There are no commands defined in the \"%s\" namespace.', $namespace);\n\n            if ($alternatives = $this->findAlternatives($namespace, $allNamespaces)) {\n                if (1 == \\count($alternatives)) {\n                    $message .= \"\\n\\nDid you mean this?\\n    \";\n                } else {\n                    $message .= \"\\n\\nDid you mean one of these?\\n    \";\n                }\n\n                $message .= implode(\"\\n    \", $alternatives);\n            }\n\n            throw new NamespaceNotFoundException($message, $alternatives);\n        }\n\n        $exact = \\in_array($namespace, $namespaces, true);\n        if (\\count($namespaces) > 1 && !$exact) {\n            throw new NamespaceNotFoundException(\\sprintf(\"The namespace \\\"%s\\\" is ambiguous.\\nDid you mean one of these?\\n%s.\", $namespace, $this->getAbbreviationSuggestions(array_values($namespaces))), array_values($namespaces));\n        }\n\n        return $exact ? $namespace : reset($namespaces);\n    }\n\n    /**\n     * Finds a command by name or alias.\n     *\n     * Contrary to get, this command tries to find the best\n     * match if you give it an abbreviation of a name or alias.\n     *\n     * @throws CommandNotFoundException When command name is incorrect or ambiguous\n     */\n    public function find(string $name): Command\n    {\n        $this->init();\n\n        $aliases = [];\n\n        foreach ($this->commands as $command) {\n            foreach ($command->getAliases() as $alias) {\n                if (!$this->has($alias)) {\n                    $this->commands[$alias] = $command;\n                }\n            }\n        }\n\n        if ($this->has($name)) {\n            return $this->get($name);\n        }\n\n        $allCommands = $this->commandLoader ? array_merge($this->commandLoader->getNames(), array_keys($this->commands)) : array_keys($this->commands);\n        $expr = implode('[^:]*:', array_map('preg_quote', explode(':', $name))).'[^:]*';\n        $commands = preg_grep('{^'.$expr.'}', $allCommands);\n\n        if (!$commands) {\n            $commands = preg_grep('{^'.$expr.'}i', $allCommands);\n        }\n\n        // if no commands matched or we just matched namespaces\n        if (!$commands || \\count(preg_grep('{^'.$expr.'$}i', $commands)) < 1) {\n            if (false !== $pos = strrpos($name, ':')) {\n                // check if a namespace exists and contains commands\n                $this->findNamespace(substr($name, 0, $pos));\n            }\n\n            $message = \\sprintf('Command \"%s\" is not defined.', $name);\n\n            if ($alternatives = $this->findAlternatives($name, $allCommands)) {\n                // remove hidden commands\n                $alternatives = array_filter($alternatives, fn ($name) => !$this->get($name)->isHidden());\n\n                if (1 == \\count($alternatives)) {\n                    $message .= \"\\n\\nDid you mean this?\\n    \";\n                } else {\n                    $message .= \"\\n\\nDid you mean one of these?\\n    \";\n                }\n                $message .= implode(\"\\n    \", $alternatives);\n            }\n\n            throw new CommandNotFoundException($message, array_values($alternatives));\n        }\n\n        // filter out aliases for commands which are already on the list\n        if (\\count($commands) > 1) {\n            $commandList = $this->commandLoader ? array_merge(array_flip($this->commandLoader->getNames()), $this->commands) : $this->commands;\n            $commands = array_unique(array_filter($commands, function ($nameOrAlias) use (&$commandList, $commands, &$aliases) {\n                if (!$commandList[$nameOrAlias] instanceof Command) {\n                    $commandList[$nameOrAlias] = $this->commandLoader->get($nameOrAlias);\n                }\n\n                $commandName = $commandList[$nameOrAlias]->getName();\n\n                $aliases[$nameOrAlias] = $commandName;\n\n                return $commandName === $nameOrAlias || !\\in_array($commandName, $commands, true);\n            }));\n        }\n\n        if (\\count($commands) > 1) {\n            $usableWidth = $this->terminal->getWidth() - 10;\n            $abbrevs = array_values($commands);\n            $maxLen = 0;\n            foreach ($abbrevs as $abbrev) {\n                $maxLen = max(Helper::width($abbrev), $maxLen);\n            }\n            $abbrevs = array_map(function ($cmd) use ($commandList, $usableWidth, $maxLen, &$commands) {\n                if ($commandList[$cmd]->isHidden()) {\n                    unset($commands[array_search($cmd, $commands)]);\n\n                    return false;\n                }\n\n                $abbrev = str_pad($cmd, $maxLen, ' ').' '.$commandList[$cmd]->getDescription();\n\n                return Helper::width($abbrev) > $usableWidth ? Helper::substr($abbrev, 0, $usableWidth - 3).'...' : $abbrev;\n            }, array_values($commands));\n\n            if (\\count($commands) > 1) {\n                $suggestions = $this->getAbbreviationSuggestions(array_filter($abbrevs));\n\n                throw new CommandNotFoundException(\\sprintf(\"Command \\\"%s\\\" is ambiguous.\\nDid you mean one of these?\\n%s.\", $name, $suggestions), array_values($commands));\n            }\n        }\n\n        $command = $this->get(reset($commands));\n\n        if ($command->isHidden()) {\n            throw new CommandNotFoundException(\\sprintf('The command \"%s\" does not exist.', $name));\n        }\n\n        return $command;\n    }\n\n    /**\n     * Gets the commands (registered in the given namespace if provided).\n     *\n     * The array keys are the full names and the values the command instances.\n     *\n     * @return Command[]\n     */\n    public function all(?string $namespace = null): array\n    {\n        $this->init();\n\n        if (null === $namespace) {\n            if (!$this->commandLoader) {\n                return $this->commands;\n            }\n\n            $commands = $this->commands;\n            foreach ($this->commandLoader->getNames() as $name) {\n                if (!isset($commands[$name]) && $this->has($name)) {\n                    $commands[$name] = $this->get($name);\n                }\n            }\n\n            return $commands;\n        }\n\n        $commands = [];\n        foreach ($this->commands as $name => $command) {\n            if ($namespace === $this->extractNamespace($name, substr_count($namespace, ':') + 1)) {\n                $commands[$name] = $command;\n            }\n        }\n\n        if ($this->commandLoader) {\n            foreach ($this->commandLoader->getNames() as $name) {\n                if (!isset($commands[$name]) && $namespace === $this->extractNamespace($name, substr_count($namespace, ':') + 1) && $this->has($name)) {\n                    $commands[$name] = $this->get($name);\n                }\n            }\n        }\n\n        return $commands;\n    }\n\n    /**\n     * Returns an array of possible abbreviations given a set of names.\n     *\n     * @return string[][]\n     */\n    public static function getAbbreviations(array $names): array\n    {\n        $abbrevs = [];\n        foreach ($names as $name) {\n            for ($len = \\strlen($name); $len > 0; --$len) {\n                $abbrev = substr($name, 0, $len);\n                $abbrevs[$abbrev][] = $name;\n            }\n        }\n\n        return $abbrevs;\n    }\n\n    public function renderThrowable(\\Throwable $e, OutputInterface $output): void\n    {\n        $output->writeln('', OutputInterface::VERBOSITY_QUIET);\n\n        $this->doRenderThrowable($e, $output);\n\n        if (null !== $this->runningCommand) {\n            $output->writeln(\\sprintf('<info>%s</info>', OutputFormatter::escape(\\sprintf($this->runningCommand->getSynopsis(), $this->getName()))), OutputInterface::VERBOSITY_QUIET);\n            $output->writeln('', OutputInterface::VERBOSITY_QUIET);\n        }\n    }\n\n    protected function doRenderThrowable(\\Throwable $e, OutputInterface $output): void\n    {\n        do {\n            $message = trim($e->getMessage());\n            if ('' === $message || OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {\n                $class = get_debug_type($e);\n                $title = \\sprintf('  [%s%s]  ', $class, 0 !== ($code = $e->getCode()) ? ' ('.$code.')' : '');\n                $len = Helper::width($title);\n            } else {\n                $len = 0;\n            }\n\n            if (str_contains($message, \"@anonymous\\0\")) {\n                $message = preg_replace_callback('/[a-zA-Z_\\x7f-\\xff][\\\\\\\\a-zA-Z0-9_\\x7f-\\xff]*+@anonymous\\x00.*?\\.php(?:0x?|:[0-9]++\\$)?[0-9a-fA-F]++/', fn ($m) => class_exists($m[0], false) ? (get_parent_class($m[0]) ?: key(class_implements($m[0])) ?: 'class').'@anonymous' : $m[0], $message);\n            }\n\n            $width = $this->terminal->getWidth() ? $this->terminal->getWidth() - 1 : \\PHP_INT_MAX;\n            $lines = [];\n            foreach ('' !== $message ? preg_split('/\\r?\\n/', $message) : [] as $line) {\n                foreach ($this->splitStringByWidth($line, $width - 4) as $line) {\n                    // pre-format lines to get the right string length\n                    $lineLength = Helper::width($line) + 4;\n                    $lines[] = [$line, $lineLength];\n\n                    $len = max($lineLength, $len);\n                }\n            }\n\n            $messages = [];\n            if (!$e instanceof ExceptionInterface || OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {\n                $messages[] = \\sprintf('<comment>%s</comment>', OutputFormatter::escape(\\sprintf('In %s line %s:', basename($e->getFile()) ?: 'n/a', $e->getLine() ?: 'n/a')));\n            }\n            $messages[] = $emptyLine = \\sprintf('<error>%s</error>', str_repeat(' ', $len));\n            if ('' === $message || OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {\n                $messages[] = \\sprintf('<error>%s%s</error>', $title, str_repeat(' ', max(0, $len - Helper::width($title))));\n            }\n            foreach ($lines as $line) {\n                $messages[] = \\sprintf('<error>  %s  %s</error>', OutputFormatter::escape($line[0]), str_repeat(' ', $len - $line[1]));\n            }\n            $messages[] = $emptyLine;\n            $messages[] = '';\n\n            $output->writeln($messages, OutputInterface::VERBOSITY_QUIET);\n\n            if (OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {\n                $output->writeln('<comment>Exception trace:</comment>', OutputInterface::VERBOSITY_QUIET);\n\n                // exception related properties\n                $trace = $e->getTrace();\n\n                array_unshift($trace, [\n                    'function' => '',\n                    'file' => $e->getFile() ?: 'n/a',\n                    'line' => $e->getLine() ?: 'n/a',\n                    'args' => [],\n                ]);\n\n                for ($i = 0, $count = \\count($trace); $i < $count; ++$i) {\n                    $class = $trace[$i]['class'] ?? '';\n                    $type = $trace[$i]['type'] ?? '';\n                    $function = $trace[$i]['function'] ?? '';\n                    $file = $trace[$i]['file'] ?? 'n/a';\n                    $line = $trace[$i]['line'] ?? 'n/a';\n\n                    $output->writeln(\\sprintf(' %s%s at <info>%s:%s</info>', $class, $function ? $type.$function.'()' : '', $file, $line), OutputInterface::VERBOSITY_QUIET);\n                }\n\n                $output->writeln('', OutputInterface::VERBOSITY_QUIET);\n            }\n        } while ($e = $e->getPrevious());\n    }\n\n    /**\n     * Configures the input and output instances based on the user arguments and options.\n     */\n    protected function configureIO(InputInterface $input, OutputInterface $output): void\n    {\n        if (true === $input->hasParameterOption(['--ansi'], true)) {\n            $output->setDecorated(true);\n        } elseif (true === $input->hasParameterOption(['--no-ansi'], true)) {\n            $output->setDecorated(false);\n        }\n\n        if (true === $input->hasParameterOption(['--no-interaction', '-n'], true)) {\n            $input->setInteractive(false);\n        }\n\n        switch ($shellVerbosity = (int) getenv('SHELL_VERBOSITY')) {\n            case -2:\n                $output->setVerbosity(OutputInterface::VERBOSITY_SILENT);\n                break;\n            case -1:\n                $output->setVerbosity(OutputInterface::VERBOSITY_QUIET);\n                break;\n            case 1:\n                $output->setVerbosity(OutputInterface::VERBOSITY_VERBOSE);\n                break;\n            case 2:\n                $output->setVerbosity(OutputInterface::VERBOSITY_VERY_VERBOSE);\n                break;\n            case 3:\n                $output->setVerbosity(OutputInterface::VERBOSITY_DEBUG);\n                break;\n            default:\n                $shellVerbosity = 0;\n                break;\n        }\n\n        if (true === $input->hasParameterOption(['--silent'], true)) {\n            $output->setVerbosity(OutputInterface::VERBOSITY_SILENT);\n            $shellVerbosity = -2;\n        } elseif (true === $input->hasParameterOption(['--quiet', '-q'], true)) {\n            $output->setVerbosity(OutputInterface::VERBOSITY_QUIET);\n            $shellVerbosity = -1;\n        } else {\n            if ($input->hasParameterOption('-vvv', true) || $input->hasParameterOption('--verbose=3', true) || 3 === $input->getParameterOption('--verbose', false, true)) {\n                $output->setVerbosity(OutputInterface::VERBOSITY_DEBUG);\n                $shellVerbosity = 3;\n            } elseif ($input->hasParameterOption('-vv', true) || $input->hasParameterOption('--verbose=2', true) || 2 === $input->getParameterOption('--verbose', false, true)) {\n                $output->setVerbosity(OutputInterface::VERBOSITY_VERY_VERBOSE);\n                $shellVerbosity = 2;\n            } elseif ($input->hasParameterOption('-v', true) || $input->hasParameterOption('--verbose=1', true) || $input->hasParameterOption('--verbose', true) || $input->getParameterOption('--verbose', false, true)) {\n                $output->setVerbosity(OutputInterface::VERBOSITY_VERBOSE);\n                $shellVerbosity = 1;\n            }\n        }\n\n        if (0 > $shellVerbosity) {\n            $input->setInteractive(false);\n        }\n\n        if (\\function_exists('putenv')) {\n            @putenv('SHELL_VERBOSITY='.$shellVerbosity);\n        }\n        $_ENV['SHELL_VERBOSITY'] = $shellVerbosity;\n        $_SERVER['SHELL_VERBOSITY'] = $shellVerbosity;\n    }\n\n    /**\n     * Runs the current command.\n     *\n     * If an event dispatcher has been attached to the application,\n     * events are also dispatched during the life-cycle of the command.\n     *\n     * @return int 0 if everything went fine, or an error code\n     */\n    protected function doRunCommand(Command $command, InputInterface $input, OutputInterface $output): int\n    {\n        foreach ($command->getHelperSet() as $helper) {\n            if ($helper instanceof InputAwareInterface) {\n                $helper->setInput($input);\n            }\n        }\n\n        $commandSignals = $command instanceof SignalableCommandInterface ? $command->getSubscribedSignals() : [];\n        if ($commandSignals || $this->dispatcher && $this->signalsToDispatchEvent) {\n            $signalRegistry = $this->getSignalRegistry();\n\n            if (Terminal::hasSttyAvailable()) {\n                $sttyMode = shell_exec('stty -g');\n\n                foreach ([\\SIGINT, \\SIGQUIT, \\SIGTERM] as $signal) {\n                    $signalRegistry->register($signal, static fn () => shell_exec('stty '.$sttyMode));\n                }\n            }\n\n            if ($this->dispatcher) {\n                // We register application signals, so that we can dispatch the event\n                foreach ($this->signalsToDispatchEvent as $signal) {\n                    $signalEvent = new ConsoleSignalEvent($command, $input, $output, $signal);\n                    $alarmEvent = \\SIGALRM === $signal ? new ConsoleAlarmEvent($command, $input, $output) : null;\n\n                    $signalRegistry->register($signal, function ($signal) use ($signalEvent, $alarmEvent, $command, $commandSignals, $input, $output) {\n                        $this->dispatcher->dispatch($signalEvent, ConsoleEvents::SIGNAL);\n                        $exitCode = $signalEvent->getExitCode();\n\n                        if (null !== $alarmEvent) {\n                            if (false !== $exitCode) {\n                                $alarmEvent->setExitCode($exitCode);\n                            } else {\n                                $alarmEvent->abortExit();\n                            }\n                            $this->dispatcher->dispatch($alarmEvent);\n                            $exitCode = $alarmEvent->getExitCode();\n                        }\n\n                        // If the command is signalable, we call the handleSignal() method\n                        if (\\in_array($signal, $commandSignals, true)) {\n                            $exitCode = $command->handleSignal($signal, $exitCode);\n                        }\n\n                        if (\\SIGALRM === $signal) {\n                            $this->scheduleAlarm();\n                        }\n\n                        if (false !== $exitCode) {\n                            $event = new ConsoleTerminateEvent($command, $input, $output, $exitCode, $signal);\n                            $this->dispatcher->dispatch($event, ConsoleEvents::TERMINATE);\n\n                            exit($event->getExitCode());\n                        }\n                    });\n                }\n\n                // then we register command signals, but not if already handled after the dispatcher\n                $commandSignals = array_diff($commandSignals, $this->signalsToDispatchEvent);\n            }\n\n            foreach ($commandSignals as $signal) {\n                $signalRegistry->register($signal, function (int $signal) use ($command): void {\n                    if (\\SIGALRM === $signal) {\n                        $this->scheduleAlarm();\n                    }\n\n                    if (false !== $exitCode = $command->handleSignal($signal)) {\n                        exit($exitCode);\n                    }\n                });\n            }\n        }\n\n        if (null === $this->dispatcher) {\n            return $command->run($input, $output);\n        }\n\n        // bind before the console.command event, so the listeners have access to input options/arguments\n        try {\n            $command->mergeApplicationDefinition();\n            $input->bind($command->getDefinition());\n        } catch (ExceptionInterface) {\n            // ignore invalid options/arguments for now, to allow the event listeners to customize the InputDefinition\n        }\n\n        $event = new ConsoleCommandEvent($command, $input, $output);\n        $e = null;\n\n        try {\n            $this->dispatcher->dispatch($event, ConsoleEvents::COMMAND);\n\n            if ($event->commandShouldRun()) {\n                $exitCode = $command->run($input, $output);\n            } else {\n                $exitCode = ConsoleCommandEvent::RETURN_CODE_DISABLED;\n            }\n        } catch (\\Throwable $e) {\n            $event = new ConsoleErrorEvent($input, $output, $e, $command);\n            $this->dispatcher->dispatch($event, ConsoleEvents::ERROR);\n            $e = $event->getError();\n\n            if (0 === $exitCode = $event->getExitCode()) {\n                $e = null;\n            }\n        }\n\n        $event = new ConsoleTerminateEvent($command, $input, $output, $exitCode);\n        $this->dispatcher->dispatch($event, ConsoleEvents::TERMINATE);\n\n        if (null !== $e) {\n            throw $e;\n        }\n\n        return $event->getExitCode();\n    }\n\n    /**\n     * Gets the name of the command based on input.\n     */\n    protected function getCommandName(InputInterface $input): ?string\n    {\n        return $this->singleCommand ? $this->defaultCommand : $input->getFirstArgument();\n    }\n\n    /**\n     * Gets the default input definition.\n     */\n    protected function getDefaultInputDefinition(): InputDefinition\n    {\n        return new InputDefinition([\n            new InputArgument('command', InputArgument::REQUIRED, 'The command to execute'),\n            new InputOption('--help', '-h', InputOption::VALUE_NONE, 'Display help for the given command. When no command is given display help for the <info>'.$this->defaultCommand.'</info> command'),\n            new InputOption('--silent', null, InputOption::VALUE_NONE, 'Do not output any message'),\n            new InputOption('--quiet', '-q', InputOption::VALUE_NONE, 'Only errors are displayed. All other output is suppressed'),\n            new InputOption('--verbose', '-v|vv|vvv', InputOption::VALUE_NONE, 'Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug'),\n            new InputOption('--version', '-V', InputOption::VALUE_NONE, 'Display this application version'),\n            new InputOption('--ansi', '', InputOption::VALUE_NEGATABLE, 'Force (or disable --no-ansi) ANSI output', null),\n            new InputOption('--no-interaction', '-n', InputOption::VALUE_NONE, 'Do not ask any interactive question'),\n        ]);\n    }\n\n    /**\n     * Gets the default commands that should always be available.\n     *\n     * @return Command[]\n     */\n    protected function getDefaultCommands(): array\n    {\n        return [new HelpCommand(), new ListCommand(), new CompleteCommand(), new DumpCompletionCommand()];\n    }\n\n    /**\n     * Gets the default helper set with the helpers that should always be available.\n     */\n    protected function getDefaultHelperSet(): HelperSet\n    {\n        return new HelperSet([\n            new FormatterHelper(),\n            new DebugFormatterHelper(),\n            new ProcessHelper(),\n            new QuestionHelper(),\n        ]);\n    }\n\n    /**\n     * Returns abbreviated suggestions in string format.\n     */\n    private function getAbbreviationSuggestions(array $abbrevs): string\n    {\n        return '    '.implode(\"\\n    \", $abbrevs);\n    }\n\n    /**\n     * Returns the namespace part of the command name.\n     *\n     * This method is not part of public API and should not be used directly.\n     */\n    public function extractNamespace(string $name, ?int $limit = null): string\n    {\n        $parts = explode(':', $name, -1);\n\n        return implode(':', null === $limit ? $parts : \\array_slice($parts, 0, $limit));\n    }\n\n    /**\n     * Finds alternative of $name among $collection,\n     * if nothing is found in $collection, try in $abbrevs.\n     *\n     * @return string[]\n     */\n    private function findAlternatives(string $name, iterable $collection): array\n    {\n        $threshold = 1e3;\n        $alternatives = [];\n\n        $collectionParts = [];\n        foreach ($collection as $item) {\n            $collectionParts[$item] = explode(':', $item);\n        }\n\n        foreach (explode(':', $name) as $i => $subname) {\n            foreach ($collectionParts as $collectionName => $parts) {\n                $exists = isset($alternatives[$collectionName]);\n                if (!isset($parts[$i]) && $exists) {\n                    $alternatives[$collectionName] += $threshold;\n                    continue;\n                } elseif (!isset($parts[$i])) {\n                    continue;\n                }\n\n                $lev = levenshtein($subname, $parts[$i]);\n                if ($lev <= \\strlen($subname) / 3 || '' !== $subname && str_contains($parts[$i], $subname)) {\n                    $alternatives[$collectionName] = $exists ? $alternatives[$collectionName] + $lev : $lev;\n                } elseif ($exists) {\n                    $alternatives[$collectionName] += $threshold;\n                }\n            }\n        }\n\n        foreach ($collection as $item) {\n            $lev = levenshtein($name, $item);\n            if ($lev <= \\strlen($name) / 3 || str_contains($item, $name)) {\n                $alternatives[$item] = isset($alternatives[$item]) ? $alternatives[$item] - $lev : $lev;\n            }\n        }\n\n        $alternatives = array_filter($alternatives, fn ($lev) => $lev < 2 * $threshold);\n        ksort($alternatives, \\SORT_NATURAL | \\SORT_FLAG_CASE);\n\n        return array_keys($alternatives);\n    }\n\n    /**\n     * Sets the default Command name.\n     *\n     * @return $this\n     */\n    public function setDefaultCommand(string $commandName, bool $isSingleCommand = false): static\n    {\n        $this->defaultCommand = explode('|', ltrim($commandName, '|'))[0];\n\n        if ($isSingleCommand) {\n            // Ensure the command exist\n            $this->find($commandName);\n\n            $this->singleCommand = true;\n        }\n\n        return $this;\n    }\n\n    /**\n     * @internal\n     */\n    public function isSingleCommand(): bool\n    {\n        return $this->singleCommand;\n    }\n\n    private function splitStringByWidth(string $string, int $width): array\n    {\n        // str_split is not suitable for multi-byte characters, we should use preg_split to get char array properly.\n        // additionally, array_slice() is not enough as some character has doubled width.\n        // we need a function to split string not by character count but by string width\n        if (false === $encoding = mb_detect_encoding($string, null, true)) {\n            return str_split($string, $width);\n        }\n\n        $utf8String = mb_convert_encoding($string, 'utf8', $encoding);\n        $lines = [];\n        $line = '';\n\n        $offset = 0;\n        while (preg_match('/.{1,10000}/u', $utf8String, $m, 0, $offset)) {\n            $offset += \\strlen($m[0]);\n\n            foreach (preg_split('//u', $m[0]) as $char) {\n                // test if $char could be appended to current line\n                if (mb_strwidth($line.$char, 'utf8') <= $width) {\n                    $line .= $char;\n                    continue;\n                }\n                // if not, push current line to array and make new line\n                $lines[] = str_pad($line, $width);\n                $line = $char;\n            }\n        }\n\n        $lines[] = \\count($lines) ? str_pad($line, $width) : $line;\n\n        mb_convert_variables($encoding, 'utf8', $lines);\n\n        return $lines;\n    }\n\n    /**\n     * Returns all namespaces of the command name.\n     *\n     * @return string[]\n     */\n    private function extractAllNamespaces(string $name): array\n    {\n        // -1 as third argument is needed to skip the command short name when exploding\n        $parts = explode(':', $name, -1);\n        $namespaces = [];\n\n        foreach ($parts as $part) {\n            if (\\count($namespaces)) {\n                $namespaces[] = end($namespaces).':'.$part;\n            } else {\n                $namespaces[] = $part;\n            }\n        }\n\n        return $namespaces;\n    }\n\n    private function init(): void\n    {\n        if ($this->initialized) {\n            return;\n        }\n        $this->initialized = true;\n\n        foreach ($this->getDefaultCommands() as $command) {\n            $this->add($command);\n        }\n    }\n}\n\n\n--- File Index 4: SingleCommandApplication.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * @author Gr\u00e9goire Pineau <lyrixx@lyrixx.info>\n */\nclass SingleCommandApplication extends Command\n{\n    private string $version = 'UNKNOWN';\n    private bool $autoExit = true;\n    private bool $running = false;\n\n    /**\n     * @return $this\n     */\n    public function setVersion(string $version): static\n    {\n        $this->version = $version;\n\n        return $this;\n    }\n\n    /**\n     * @final\n     *\n     * @return $this\n     */\n    public function setAutoExit(bool $autoExit): static\n    {\n        $this->autoExit = $autoExit;\n\n        return $this;\n    }\n\n    public function run(?InputInterface $input = null, ?OutputInterface $output = null): int\n    {\n        if ($this->running) {\n            return parent::run($input, $output);\n        }\n\n        // We use the command name as the application name\n        $application = new Application($this->getName() ?: 'UNKNOWN', $this->version);\n        $application->setAutoExit($this->autoExit);\n        // Fix the usage of the command displayed with \"--help\"\n        $this->setName($_SERVER['argv'][0]);\n        $application->add($this);\n        $application->setDefaultCommand($this->getName(), true);\n\n        $this->running = true;\n        try {\n            $ret = $application->run($input, $output);\n        } finally {\n            $this->running = false;\n        }\n\n        return $ret;\n    }\n}\n\n\n--- File Index 5: Terminal.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console;\n\nuse Symfony\\Component\\Console\\Output\\AnsiColorMode;\n\nclass Terminal\n{\n    public const DEFAULT_COLOR_MODE = AnsiColorMode::Ansi4;\n\n    private static ?AnsiColorMode $colorMode = null;\n    private static ?int $width = null;\n    private static ?int $height = null;\n    private static ?bool $stty = null;\n\n    /**\n     * About Ansi color types: https://en.wikipedia.org/wiki/ANSI_escape_code#Colors\n     * For more information about true color support with terminals https://github.com/termstandard/colors/.\n     */\n    public static function getColorMode(): AnsiColorMode\n    {\n        // Use Cache from previous run (or user forced mode)\n        if (null !== self::$colorMode) {\n            return self::$colorMode;\n        }\n\n        // Try with $COLORTERM first\n        if (\\is_string($colorterm = getenv('COLORTERM'))) {\n            $colorterm = strtolower($colorterm);\n\n            if (str_contains($colorterm, 'truecolor')) {\n                self::setColorMode(AnsiColorMode::Ansi24);\n\n                return self::$colorMode;\n            }\n\n            if (str_contains($colorterm, '256color')) {\n                self::setColorMode(AnsiColorMode::Ansi8);\n\n                return self::$colorMode;\n            }\n        }\n\n        // Try with $TERM\n        if (\\is_string($term = getenv('TERM'))) {\n            $term = strtolower($term);\n\n            if (str_contains($term, 'truecolor')) {\n                self::setColorMode(AnsiColorMode::Ansi24);\n\n                return self::$colorMode;\n            }\n\n            if (str_contains($term, '256color')) {\n                self::setColorMode(AnsiColorMode::Ansi8);\n\n                return self::$colorMode;\n            }\n        }\n\n        self::setColorMode(self::DEFAULT_COLOR_MODE);\n\n        return self::$colorMode;\n    }\n\n    /**\n     * Force a terminal color mode rendering.\n     */\n    public static function setColorMode(?AnsiColorMode $colorMode): void\n    {\n        self::$colorMode = $colorMode;\n    }\n\n    /**\n     * Gets the terminal width.\n     */\n    public function getWidth(): int\n    {\n        $width = getenv('COLUMNS');\n        if (false !== $width) {\n            return (int) trim($width);\n        }\n\n        if (null === self::$width) {\n            self::initDimensions();\n        }\n\n        return self::$width ?: 80;\n    }\n\n    /**\n     * Gets the terminal height.\n     */\n    public function getHeight(): int\n    {\n        $height = getenv('LINES');\n        if (false !== $height) {\n            return (int) trim($height);\n        }\n\n        if (null === self::$height) {\n            self::initDimensions();\n        }\n\n        return self::$height ?: 50;\n    }\n\n    /**\n     * @internal\n     */\n    public static function hasSttyAvailable(): bool\n    {\n        if (null !== self::$stty) {\n            return self::$stty;\n        }\n\n        // skip check if shell_exec function is disabled\n        if (!\\function_exists('shell_exec')) {\n            return false;\n        }\n\n        return self::$stty = (bool) shell_exec('stty 2> '.('\\\\' === \\DIRECTORY_SEPARATOR ? 'NUL' : '/dev/null'));\n    }\n\n    private static function initDimensions(): void\n    {\n        if ('\\\\' === \\DIRECTORY_SEPARATOR) {\n            $ansicon = getenv('ANSICON');\n            if (false !== $ansicon && preg_match('/^(\\d+)x(\\d+)(?: \\((\\d+)x(\\d+)\\))?$/', trim($ansicon), $matches)) {\n                // extract [w, H] from \"wxh (WxH)\"\n                // or [w, h] from \"wxh\"\n                self::$width = (int) $matches[1];\n                self::$height = isset($matches[4]) ? (int) $matches[4] : (int) $matches[2];\n            } elseif (!sapi_windows_vt100_support(fopen('php://stdout', 'w')) && self::hasSttyAvailable()) {\n                // only use stty on Windows if the terminal does not support vt100 (e.g. Windows 7 + git-bash)\n                // testing for stty in a Windows 10 vt100-enabled console will implicitly disable vt100 support on STDOUT\n                self::initDimensionsUsingStty();\n            } elseif (null !== $dimensions = self::getConsoleMode()) {\n                // extract [w, h] from \"wxh\"\n                self::$width = (int) $dimensions[0];\n                self::$height = (int) $dimensions[1];\n            }\n        } else {\n            self::initDimensionsUsingStty();\n        }\n    }\n\n    /**\n     * Initializes dimensions using the output of an stty columns line.\n     */\n    private static function initDimensionsUsingStty(): void\n    {\n        if ($sttyString = self::getSttyColumns()) {\n            if (preg_match('/rows.(\\d+);.columns.(\\d+);/is', $sttyString, $matches)) {\n                // extract [w, h] from \"rows h; columns w;\"\n                self::$width = (int) $matches[2];\n                self::$height = (int) $matches[1];\n            } elseif (preg_match('/;.(\\d+).rows;.(\\d+).columns/is', $sttyString, $matches)) {\n                // extract [w, h] from \"; h rows; w columns\"\n                self::$width = (int) $matches[2];\n                self::$height = (int) $matches[1];\n            }\n        }\n    }\n\n    /**\n     * Runs and parses mode CON if it's available, suppressing any error output.\n     *\n     * @return int[]|null An array composed of the width and the height or null if it could not be parsed\n     */\n    private static function getConsoleMode(): ?array\n    {\n        $info = self::readFromProcess('mode CON');\n\n        if (null === $info || !preg_match('/--------+\\r?\\n.+?(\\d+)\\r?\\n.+?(\\d+)\\r?\\n/', $info, $matches)) {\n            return null;\n        }\n\n        return [(int) $matches[2], (int) $matches[1]];\n    }\n\n    /**\n     * Runs and parses stty -a if it's available, suppressing any error output.\n     */\n    private static function getSttyColumns(): ?string\n    {\n        return self::readFromProcess(['stty', '-a']);\n    }\n\n    private static function readFromProcess(string|array $command): ?string\n    {\n        if (!\\function_exists('proc_open')) {\n            return null;\n        }\n\n        $descriptorspec = [\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w'],\n        ];\n\n        $cp = \\function_exists('sapi_windows_cp_set') ? sapi_windows_cp_get() : 0;\n\n        if (!$process = @proc_open($command, $descriptorspec, $pipes, null, null, ['suppress_errors' => true])) {\n            return null;\n        }\n\n        $info = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n        fclose($pipes[2]);\n        proc_close($process);\n\n        if ($cp) {\n            sapi_windows_cp_set($cp);\n        }\n\n        return $info;\n    }\n}\n\n\n--- File Index 6: Question/ChoiceQuestion.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Question;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\n\n/**\n * Represents a choice question.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass ChoiceQuestion extends Question\n{\n    private bool $multiselect = false;\n    private string $prompt = ' > ';\n    private string $errorMessage = 'Value \"%s\" is invalid';\n\n    /**\n     * @param string                     $question The question to ask to the user\n     * @param array                      $choices  The list of available choices\n     * @param string|bool|int|float|null $default  The default answer to return\n     */\n    public function __construct(\n        string $question,\n        private array $choices,\n        string|bool|int|float|null $default = null,\n    ) {\n        if (!$choices) {\n            throw new \\LogicException('Choice question must have at least 1 choice available.');\n        }\n\n        parent::__construct($question, $default);\n\n        $this->setValidator($this->getDefaultValidator());\n        $this->setAutocompleterValues($choices);\n    }\n\n    /**\n     * Returns available choices.\n     */\n    public function getChoices(): array\n    {\n        return $this->choices;\n    }\n\n    /**\n     * Sets multiselect option.\n     *\n     * When multiselect is set to true, multiple choices can be answered.\n     *\n     * @return $this\n     */\n    public function setMultiselect(bool $multiselect): static\n    {\n        $this->multiselect = $multiselect;\n        $this->setValidator($this->getDefaultValidator());\n\n        return $this;\n    }\n\n    /**\n     * Returns whether the choices are multiselect.\n     */\n    public function isMultiselect(): bool\n    {\n        return $this->multiselect;\n    }\n\n    /**\n     * Gets the prompt for choices.\n     */\n    public function getPrompt(): string\n    {\n        return $this->prompt;\n    }\n\n    /**\n     * Sets the prompt for choices.\n     *\n     * @return $this\n     */\n    public function setPrompt(string $prompt): static\n    {\n        $this->prompt = $prompt;\n\n        return $this;\n    }\n\n    /**\n     * Sets the error message for invalid values.\n     *\n     * The error message has a string placeholder (%s) for the invalid value.\n     *\n     * @return $this\n     */\n    public function setErrorMessage(string $errorMessage): static\n    {\n        $this->errorMessage = $errorMessage;\n        $this->setValidator($this->getDefaultValidator());\n\n        return $this;\n    }\n\n    private function getDefaultValidator(): callable\n    {\n        $choices = $this->choices;\n        $errorMessage = $this->errorMessage;\n        $multiselect = $this->multiselect;\n        $isAssoc = $this->isAssoc($choices);\n\n        return function ($selected) use ($choices, $errorMessage, $multiselect, $isAssoc) {\n            if ($multiselect) {\n                // Check for a separated comma values\n                if (!preg_match('/^[^,]+(?:,[^,]+)*$/', (string) $selected, $matches)) {\n                    throw new InvalidArgumentException(\\sprintf($errorMessage, $selected));\n                }\n\n                $selectedChoices = explode(',', (string) $selected);\n            } else {\n                $selectedChoices = [$selected];\n            }\n\n            if ($this->isTrimmable()) {\n                foreach ($selectedChoices as $k => $v) {\n                    $selectedChoices[$k] = trim((string) $v);\n                }\n            }\n\n            $multiselectChoices = [];\n            foreach ($selectedChoices as $value) {\n                $results = [];\n                foreach ($choices as $key => $choice) {\n                    if ($choice === $value) {\n                        $results[] = $key;\n                    }\n                }\n\n                if (\\count($results) > 1) {\n                    throw new InvalidArgumentException(\\sprintf('The provided answer is ambiguous. Value should be one of \"%s\".', implode('\" or \"', $results)));\n                }\n\n                $result = array_search($value, $choices);\n\n                if (!$isAssoc) {\n                    if (false !== $result) {\n                        $result = $choices[$result];\n                    } elseif (isset($choices[$value])) {\n                        $result = $choices[$value];\n                    }\n                } elseif (false === $result && isset($choices[$value])) {\n                    $result = $value;\n                }\n\n                if (false === $result) {\n                    throw new InvalidArgumentException(\\sprintf($errorMessage, $value));\n                }\n\n                // For associative choices, consistently return the key as string:\n                $multiselectChoices[] = $isAssoc ? (string) $result : $result;\n            }\n\n            if ($multiselect) {\n                return $multiselectChoices;\n            }\n\n            return current($multiselectChoices);\n        };\n    }\n}\n\n\n--- File Index 7: Question/ConfirmationQuestion.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Question;\n\n/**\n * Represents a yes/no question.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass ConfirmationQuestion extends Question\n{\n    /**\n     * @param string $question        The question to ask to the user\n     * @param bool   $default         The default answer to return, true or false\n     * @param string $trueAnswerRegex A regex to match the \"yes\" answer\n     */\n    public function __construct(\n        string $question,\n        bool $default = true,\n        private string $trueAnswerRegex = '/^y/i',\n    ) {\n        parent::__construct($question, $default);\n\n        $this->setNormalizer($this->getDefaultNormalizer());\n    }\n\n    /**\n     * Returns the default answer normalizer.\n     */\n    private function getDefaultNormalizer(): callable\n    {\n        $default = $this->getDefault();\n        $regex = $this->trueAnswerRegex;\n\n        return function ($answer) use ($default, $regex) {\n            if (\\is_bool($answer)) {\n                return $answer;\n            }\n\n            $answerIsTrue = (bool) preg_match($regex, $answer);\n            if (false === $default) {\n                return $answer && $answerIsTrue;\n            }\n\n            return '' === $answer || $answerIsTrue;\n        };\n    }\n}\n\n\n--- File Index 8: Question/Question.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Question;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\n\n/**\n * Represents a Question.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass Question\n{\n    private ?int $attempts = null;\n    private bool $hidden = false;\n    private bool $hiddenFallback = true;\n    private ?\\Closure $autocompleterCallback = null;\n    private ?\\Closure $validator = null;\n    private ?\\Closure $normalizer = null;\n    private bool $trimmable = true;\n    private bool $multiline = false;\n\n    /**\n     * @param string                     $question The question to ask to the user\n     * @param string|bool|int|float|null $default  The default answer to return if the user enters nothing\n     */\n    public function __construct(\n        private string $question,\n        private string|bool|int|float|null $default = null,\n    ) {\n    }\n\n    /**\n     * Returns the question.\n     */\n    public function getQuestion(): string\n    {\n        return $this->question;\n    }\n\n    /**\n     * Returns the default answer.\n     */\n    public function getDefault(): string|bool|int|float|null\n    {\n        return $this->default;\n    }\n\n    /**\n     * Returns whether the user response accepts newline characters.\n     */\n    public function isMultiline(): bool\n    {\n        return $this->multiline;\n    }\n\n    /**\n     * Sets whether the user response should accept newline characters.\n     *\n     * @return $this\n     */\n    public function setMultiline(bool $multiline): static\n    {\n        $this->multiline = $multiline;\n\n        return $this;\n    }\n\n    /**\n     * Returns whether the user response must be hidden.\n     */\n    public function isHidden(): bool\n    {\n        return $this->hidden;\n    }\n\n    /**\n     * Sets whether the user response must be hidden or not.\n     *\n     * @return $this\n     *\n     * @throws LogicException In case the autocompleter is also used\n     */\n    public function setHidden(bool $hidden): static\n    {\n        if ($this->autocompleterCallback) {\n            throw new LogicException('A hidden question cannot use the autocompleter.');\n        }\n\n        $this->hidden = $hidden;\n\n        return $this;\n    }\n\n    /**\n     * In case the response cannot be hidden, whether to fallback on non-hidden question or not.\n     */\n    public function isHiddenFallback(): bool\n    {\n        return $this->hiddenFallback;\n    }\n\n    /**\n     * Sets whether to fallback on non-hidden question if the response cannot be hidden.\n     *\n     * @return $this\n     */\n    public function setHiddenFallback(bool $fallback): static\n    {\n        $this->hiddenFallback = $fallback;\n\n        return $this;\n    }\n\n    /**\n     * Gets values for the autocompleter.\n     */\n    public function getAutocompleterValues(): ?iterable\n    {\n        $callback = $this->getAutocompleterCallback();\n\n        return $callback ? $callback('') : null;\n    }\n\n    /**\n     * Sets values for the autocompleter.\n     *\n     * @return $this\n     *\n     * @throws LogicException\n     */\n    public function setAutocompleterValues(?iterable $values): static\n    {\n        if (\\is_array($values)) {\n            $values = $this->isAssoc($values) ? array_merge(array_keys($values), array_values($values)) : array_values($values);\n\n            $callback = static fn () => $values;\n        } elseif ($values instanceof \\Traversable) {\n            $callback = static function () use ($values) {\n                static $valueCache;\n\n                return $valueCache ??= iterator_to_array($values, false);\n            };\n        } else {\n            $callback = null;\n        }\n\n        return $this->setAutocompleterCallback($callback);\n    }\n\n    /**\n     * Gets the callback function used for the autocompleter.\n     */\n    public function getAutocompleterCallback(): ?callable\n    {\n        return $this->autocompleterCallback;\n    }\n\n    /**\n     * Sets the callback function used for the autocompleter.\n     *\n     * The callback is passed the user input as argument and should return an iterable of corresponding suggestions.\n     *\n     * @return $this\n     */\n    public function setAutocompleterCallback(?callable $callback): static\n    {\n        if ($this->hidden && null !== $callback) {\n            throw new LogicException('A hidden question cannot use the autocompleter.');\n        }\n\n        $this->autocompleterCallback = null === $callback ? null : $callback(...);\n\n        return $this;\n    }\n\n    /**\n     * Sets a validator for the question.\n     *\n     * @return $this\n     */\n    public function setValidator(?callable $validator): static\n    {\n        $this->validator = null === $validator ? null : $validator(...);\n\n        return $this;\n    }\n\n    /**\n     * Gets the validator for the question.\n     */\n    public function getValidator(): ?callable\n    {\n        return $this->validator;\n    }\n\n    /**\n     * Sets the maximum number of attempts.\n     *\n     * Null means an unlimited number of attempts.\n     *\n     * @return $this\n     *\n     * @throws InvalidArgumentException in case the number of attempts is invalid\n     */\n    public function setMaxAttempts(?int $attempts): static\n    {\n        if (null !== $attempts && $attempts < 1) {\n            throw new InvalidArgumentException('Maximum number of attempts must be a positive value.');\n        }\n\n        $this->attempts = $attempts;\n\n        return $this;\n    }\n\n    /**\n     * Gets the maximum number of attempts.\n     *\n     * Null means an unlimited number of attempts.\n     */\n    public function getMaxAttempts(): ?int\n    {\n        return $this->attempts;\n    }\n\n    /**\n     * Sets a normalizer for the response.\n     *\n     * The normalizer can be a callable (a string), a closure or a class implementing __invoke.\n     *\n     * @return $this\n     */\n    public function setNormalizer(callable $normalizer): static\n    {\n        $this->normalizer = $normalizer(...);\n\n        return $this;\n    }\n\n    /**\n     * Gets the normalizer for the response.\n     *\n     * The normalizer can ba a callable (a string), a closure or a class implementing __invoke.\n     */\n    public function getNormalizer(): ?callable\n    {\n        return $this->normalizer;\n    }\n\n    protected function isAssoc(array $array): bool\n    {\n        return (bool) \\count(array_filter(array_keys($array), 'is_string'));\n    }\n\n    public function isTrimmable(): bool\n    {\n        return $this->trimmable;\n    }\n\n    /**\n     * @return $this\n     */\n    public function setTrimmable(bool $trimmable): static\n    {\n        $this->trimmable = $trimmable;\n\n        return $this;\n    }\n}\n\n\n--- File Index 9: Exception/RuntimeException.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Exception;\n\n/**\n * @author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>\n */\nclass RuntimeException extends \\RuntimeException implements ExceptionInterface\n{\n}\n\n\n--- File Index 10: Exception/RunCommandFailedException.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Exception;\n\nuse Symfony\\Component\\Console\\Messenger\\RunCommandContext;\n\n/**\n * @author Kevin Bond <kevinbond@gmail.com>\n */\nfinal class RunCommandFailedException extends RuntimeException\n{\n    public function __construct(\\Throwable|string $exception, public readonly RunCommandContext $context)\n    {\n        parent::__construct(\n            $exception instanceof \\Throwable ? $exception->getMessage() : $exception,\n            $exception instanceof \\Throwable ? $exception->getCode() : 0,\n            $exception instanceof \\Throwable ? $exception : null,\n        );\n    }\n}\n\n\n--- File Index 11: Exception/CommandNotFoundException.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Exception;\n\n/**\n * Represents an incorrect command name typed in the console.\n *\n * @author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>\n */\nclass CommandNotFoundException extends \\InvalidArgumentException implements ExceptionInterface\n{\n    /**\n     * @param string          $message      Exception message to throw\n     * @param string[]        $alternatives List of similar defined names\n     * @param int             $code         Exception code\n     * @param \\Throwable|null $previous     Previous exception used for the exception chaining\n     */\n    public function __construct(\n        string $message,\n        private array $alternatives = [],\n        int $code = 0,\n        ?\\Throwable $previous = null,\n    ) {\n        parent::__construct($message, $code, $previous);\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getAlternatives(): array\n    {\n        return $this->alternatives;\n    }\n}\n\n\n--- File Index 12: Exception/InvalidArgumentException.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Exception;\n\n/**\n * @author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>\n */\nclass InvalidArgumentException extends \\InvalidArgumentException implements ExceptionInterface\n{\n}\n\n\n--- File Index 13: Exception/InvalidOptionException.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Exception;\n\n/**\n * Represents an incorrect option name or value typed in the console.\n *\n * @author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>\n */\nclass InvalidOptionException extends \\InvalidArgumentException implements ExceptionInterface\n{\n}\n\n\n--- File Index 14: Exception/LogicException.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Exception;\n\n/**\n * @author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>\n */\nclass LogicException extends \\LogicException implements ExceptionInterface\n{\n}\n\n\n--- File Index 15: Exception/NamespaceNotFoundException.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Exception;\n\n/**\n * Represents an incorrect namespace typed in the console.\n *\n * @author Pierre du Plessis <pdples@gmail.com>\n */\nclass NamespaceNotFoundException extends CommandNotFoundException\n{\n}\n\n\n--- File Index 16: Exception/ExceptionInterface.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Exception;\n\n/**\n * ExceptionInterface.\n *\n * @author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>\n */\ninterface ExceptionInterface extends \\Throwable\n{\n}\n\n\n--- File Index 17: Exception/MissingInputException.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Exception;\n\n/**\n * Represents failure to read input from stdin.\n *\n * @author Gabriel Ostroluck\u00fd <gabriel.ostrolucky@gmail.com>\n */\nclass MissingInputException extends RuntimeException implements ExceptionInterface\n{\n}\n\n\n--- File Index 18: Logger/ConsoleLogger.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Logger;\n\nuse Psr\\Log\\AbstractLogger;\nuse Psr\\Log\\InvalidArgumentException;\nuse Psr\\Log\\LogLevel;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * PSR-3 compliant console logger.\n *\n * @author K\u00e9vin Dunglas <dunglas@gmail.com>\n *\n * @see https://www.php-fig.org/psr/psr-3/\n */\nclass ConsoleLogger extends AbstractLogger\n{\n    public const INFO = 'info';\n    public const ERROR = 'error';\n\n    private array $verbosityLevelMap = [\n        LogLevel::EMERGENCY => OutputInterface::VERBOSITY_NORMAL,\n        LogLevel::ALERT => OutputInterface::VERBOSITY_NORMAL,\n        LogLevel::CRITICAL => OutputInterface::VERBOSITY_NORMAL,\n        LogLevel::ERROR => OutputInterface::VERBOSITY_NORMAL,\n        LogLevel::WARNING => OutputInterface::VERBOSITY_NORMAL,\n        LogLevel::NOTICE => OutputInterface::VERBOSITY_VERBOSE,\n        LogLevel::INFO => OutputInterface::VERBOSITY_VERY_VERBOSE,\n        LogLevel::DEBUG => OutputInterface::VERBOSITY_DEBUG,\n    ];\n    private array $formatLevelMap = [\n        LogLevel::EMERGENCY => self::ERROR,\n        LogLevel::ALERT => self::ERROR,\n        LogLevel::CRITICAL => self::ERROR,\n        LogLevel::ERROR => self::ERROR,\n        LogLevel::WARNING => self::INFO,\n        LogLevel::NOTICE => self::INFO,\n        LogLevel::INFO => self::INFO,\n        LogLevel::DEBUG => self::INFO,\n    ];\n    private bool $errored = false;\n\n    public function __construct(\n        private OutputInterface $output,\n        array $verbosityLevelMap = [],\n        array $formatLevelMap = [],\n    ) {\n        $this->verbosityLevelMap = $verbosityLevelMap + $this->verbosityLevelMap;\n        $this->formatLevelMap = $formatLevelMap + $this->formatLevelMap;\n    }\n\n    public function log($level, $message, array $context = []): void\n    {\n        if (!isset($this->verbosityLevelMap[$level])) {\n            throw new InvalidArgumentException(\\sprintf('The log level \"%s\" does not exist.', $level));\n        }\n\n        $output = $this->output;\n\n        // Write to the error output if necessary and available\n        if (self::ERROR === $this->formatLevelMap[$level]) {\n            if ($this->output instanceof ConsoleOutputInterface) {\n                $output = $output->getErrorOutput();\n            }\n            $this->errored = true;\n        }\n\n        // the if condition check isn't necessary -- it's the same one that $output will do internally anyway.\n        // We only do it for efficiency here as the message formatting is relatively expensive.\n        if ($output->getVerbosity() >= $this->verbosityLevelMap[$level]) {\n            $output->writeln(\\sprintf('<%1$s>[%2$s] %3$s</%1$s>', $this->formatLevelMap[$level], $level, $this->interpolate($message, $context)), $this->verbosityLevelMap[$level]);\n        }\n    }\n\n    /**\n     * Returns true when any messages have been logged at error levels.\n     */\n    public function hasErrored(): bool\n    {\n        return $this->errored;\n    }\n\n    /**\n     * Interpolates context values into the message placeholders.\n     *\n     * @author PHP Framework Interoperability Group\n     */\n    private function interpolate(string $message, array $context): string\n    {\n        if (!str_contains($message, '{')) {\n            return $message;\n        }\n\n        $replacements = [];\n        foreach ($context as $key => $val) {\n            if (null === $val || \\is_scalar($val) || $val instanceof \\Stringable) {\n                $replacements[\"{{$key}}\"] = $val;\n            } elseif ($val instanceof \\DateTimeInterface) {\n                $replacements[\"{{$key}}\"] = $val->format(\\DateTimeInterface::RFC3339);\n            } elseif (\\is_object($val)) {\n                $replacements[\"{{$key}}\"] = '[object '.$val::class.']';\n            } else {\n                $replacements[\"{{$key}}\"] = '['.\\gettype($val).']';\n            }\n        }\n\n        return strtr($message, $replacements);\n    }\n}\n\n\n--- File Index 19: Descriptor/TextDescriptor.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Descriptor;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatter;\nuse Symfony\\Component\\Console\\Helper\\Helper;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputOption;\n\n/**\n * Text descriptor.\n *\n * @author Jean-Fran\u00e7ois Simon <contact@jfsimon.fr>\n *\n * @internal\n */\nclass TextDescriptor extends Descriptor\n{\n    protected function describeInputArgument(InputArgument $argument, array $options = []): void\n    {\n        if (null !== $argument->getDefault() && (!\\is_array($argument->getDefault()) || \\count($argument->getDefault()))) {\n            $default = \\sprintf('<comment> [default: %s]</comment>', $this->formatDefaultValue($argument->getDefault()));\n        } else {\n            $default = '';\n        }\n\n        $totalWidth = $options['total_width'] ?? Helper::width($argument->getName());\n        $spacingWidth = $totalWidth - \\strlen($argument->getName());\n\n        $this->writeText(\\sprintf('  <info>%s</info>  %s%s%s',\n            $argument->getName(),\n            str_repeat(' ', $spacingWidth),\n            // + 4 = 2 spaces before <info>, 2 spaces after </info>\n            preg_replace('/\\s*[\\r\\n]\\s*/', \"\\n\".str_repeat(' ', $totalWidth + 4), $argument->getDescription()),\n            $default\n        ), $options);\n    }\n\n    protected function describeInputOption(InputOption $option, array $options = []): void\n    {\n        if ($option->acceptValue() && null !== $option->getDefault() && (!\\is_array($option->getDefault()) || \\count($option->getDefault()))) {\n            $default = \\sprintf('<comment> [default: %s]</comment>', $this->formatDefaultValue($option->getDefault()));\n        } else {\n            $default = '';\n        }\n\n        $value = '';\n        if ($option->acceptValue()) {\n            $value = '='.strtoupper($option->getName());\n\n            if ($option->isValueOptional()) {\n                $value = '['.$value.']';\n            }\n        }\n\n        $totalWidth = $options['total_width'] ?? $this->calculateTotalWidthForOptions([$option]);\n        $synopsis = \\sprintf('%s%s',\n            $option->getShortcut() ? \\sprintf('-%s, ', $option->getShortcut()) : '    ',\n            \\sprintf($option->isNegatable() ? '--%1$s|--no-%1$s' : '--%1$s%2$s', $option->getName(), $value)\n        );\n\n        $spacingWidth = $totalWidth - Helper::width($synopsis);\n\n        $this->writeText(\\sprintf('  <info>%s</info>  %s%s%s%s',\n            $synopsis,\n            str_repeat(' ', $spacingWidth),\n            // + 4 = 2 spaces before <info>, 2 spaces after </info>\n            preg_replace('/\\s*[\\r\\n]\\s*/', \"\\n\".str_repeat(' ', $totalWidth + 4), $option->getDescription()),\n            $default,\n            $option->isArray() ? '<comment> (multiple values allowed)</comment>' : ''\n        ), $options);\n    }\n\n    protected function describeInputDefinition(InputDefinition $definition, array $options = []): void\n    {\n        $totalWidth = $this->calculateTotalWidthForOptions($definition->getOptions());\n        foreach ($definition->getArguments() as $argument) {\n            $totalWidth = max($totalWidth, Helper::width($argument->getName()));\n        }\n\n        if ($definition->getArguments()) {\n            $this->writeText('<comment>Arguments:</comment>', $options);\n            $this->writeText(\"\\n\");\n            foreach ($definition->getArguments() as $argument) {\n                $this->describeInputArgument($argument, array_merge($options, ['total_width' => $totalWidth]));\n                $this->writeText(\"\\n\");\n            }\n        }\n\n        if ($definition->getArguments() && $definition->getOptions()) {\n            $this->writeText(\"\\n\");\n        }\n\n        if ($definition->getOptions()) {\n            $laterOptions = [];\n\n            $this->writeText('<comment>Options:</comment>', $options);\n            foreach ($definition->getOptions() as $option) {\n                if (\\strlen($option->getShortcut() ?? '') > 1) {\n                    $laterOptions[] = $option;\n                    continue;\n                }\n                $this->writeText(\"\\n\");\n                $this->describeInputOption($option, array_merge($options, ['total_width' => $totalWidth]));\n            }\n            foreach ($laterOptions as $option) {\n                $this->writeText(\"\\n\");\n                $this->describeInputOption($option, array_merge($options, ['total_width' => $totalWidth]));\n            }\n        }\n    }\n\n    protected function describeCommand(Command $command, array $options = []): void\n    {\n        $command->mergeApplicationDefinition(false);\n\n        if ($description = $command->getDescription()) {\n            $this->writeText('<comment>Description:</comment>', $options);\n            $this->writeText(\"\\n\");\n            $this->writeText('  '.$description);\n            $this->writeText(\"\\n\\n\");\n        }\n\n        $this->writeText('<comment>Usage:</comment>', $options);\n        foreach (array_merge([$command->getSynopsis(true)], $command->getAliases(), $command->getUsages()) as $usage) {\n            $this->writeText(\"\\n\");\n            $this->writeText('  '.OutputFormatter::escape($usage), $options);\n        }\n        $this->writeText(\"\\n\");\n\n        $definition = $command->getDefinition();\n        if ($definition->getOptions() || $definition->getArguments()) {\n            $this->writeText(\"\\n\");\n            $this->describeInputDefinition($definition, $options);\n            $this->writeText(\"\\n\");\n        }\n\n        $help = $command->getProcessedHelp();\n        if ($help && $help !== $description) {\n            $this->writeText(\"\\n\");\n            $this->writeText('<comment>Help:</comment>', $options);\n            $this->writeText(\"\\n\");\n            $this->writeText('  '.str_replace(\"\\n\", \"\\n  \", $help), $options);\n            $this->writeText(\"\\n\");\n        }\n    }\n\n    protected function describeApplication(Application $application, array $options = []): void\n    {\n        $describedNamespace = $options['namespace'] ?? null;\n        $description = new ApplicationDescription($application, $describedNamespace);\n\n        if (isset($options['raw_text']) && $options['raw_text']) {\n            $width = $this->getColumnWidth($description->getCommands());\n\n            foreach ($description->getCommands() as $command) {\n                $this->writeText(\\sprintf(\"%-{$width}s %s\", $command->getName(), $command->getDescription()), $options);\n                $this->writeText(\"\\n\");\n            }\n        } else {\n            if ('' != $help = $application->getHelp()) {\n                $this->writeText(\"$help\\n\\n\", $options);\n            }\n\n            $this->writeText(\"<comment>Usage:</comment>\\n\", $options);\n            $this->writeText(\"  command [options] [arguments]\\n\\n\", $options);\n\n            $this->describeInputDefinition(new InputDefinition($application->getDefinition()->getOptions()), $options);\n\n            $this->writeText(\"\\n\");\n            $this->writeText(\"\\n\");\n\n            $commands = $description->getCommands();\n            $namespaces = $description->getNamespaces();\n            if ($describedNamespace && $namespaces) {\n                // make sure all alias commands are included when describing a specific namespace\n                $describedNamespaceInfo = reset($namespaces);\n                foreach ($describedNamespaceInfo['commands'] as $name) {\n                    $commands[$name] = $description->getCommand($name);\n                }\n            }\n\n            // calculate max. width based on available commands per namespace\n            $width = $this->getColumnWidth(array_merge(...array_values(array_map(fn ($namespace) => array_intersect($namespace['commands'], array_keys($commands)), array_values($namespaces)))));\n\n            if ($describedNamespace) {\n                $this->writeText(\\sprintf('<comment>Available commands for the \"%s\" namespace:</comment>', $describedNamespace), $options);\n            } else {\n                $this->writeText('<comment>Available commands:</comment>', $options);\n            }\n\n            foreach ($namespaces as $namespace) {\n                $namespace['commands'] = array_filter($namespace['commands'], fn ($name) => isset($commands[$name]));\n\n                if (!$namespace['commands']) {\n                    continue;\n                }\n\n                if (!$describedNamespace && ApplicationDescription::GLOBAL_NAMESPACE !== $namespace['id']) {\n                    $this->writeText(\"\\n\");\n                    $this->writeText(' <comment>'.$namespace['id'].'</comment>', $options);\n                }\n\n                foreach ($namespace['commands'] as $name) {\n                    $this->writeText(\"\\n\");\n                    $spacingWidth = $width - Helper::width($name);\n                    $command = $commands[$name];\n                    $commandAliases = $name === $command->getName() ? $this->getCommandAliasesText($command) : '';\n                    $this->writeText(\\sprintf('  <info>%s</info>%s%s', $name, str_repeat(' ', $spacingWidth), $commandAliases.$command->getDescription()), $options);\n                }\n            }\n\n            $this->writeText(\"\\n\");\n        }\n    }\n\n    private function writeText(string $content, array $options = []): void\n    {\n        $this->write(\n            isset($options['raw_text']) && $options['raw_text'] ? strip_tags($content) : $content,\n            isset($options['raw_output']) ? !$options['raw_output'] : true\n        );\n    }\n\n    /**\n     * Formats command aliases to show them in the command description.\n     */\n    private function getCommandAliasesText(Command $command): string\n    {\n        $text = '';\n        $aliases = $command->getAliases();\n\n        if ($aliases) {\n            $text = '['.implode('|', $aliases).'] ';\n        }\n\n        return $text;\n    }\n\n    /**\n     * Formats input option/argument default value.\n     */\n    private function formatDefaultValue(mixed $default): string\n    {\n        if (\\INF === $default) {\n            return 'INF';\n        }\n\n        if (\\is_string($default)) {\n            $default = OutputFormatter::escape($default);\n        } elseif (\\is_array($default)) {\n            foreach ($default as $key => $value) {\n                if (\\is_string($value)) {\n                    $default[$key] = OutputFormatter::escape($value);\n                }\n            }\n        }\n\n        return str_replace('\\\\\\\\', '\\\\', json_encode($default, \\JSON_UNESCAPED_SLASHES | \\JSON_UNESCAPED_UNICODE));\n    }\n\n    /**\n     * @param array<Command|string> $commands\n     */\n    private function getColumnWidth(array $commands): int\n    {\n        $widths = [];\n\n        foreach ($commands as $command) {\n            if ($command instanceof Command) {\n                $widths[] = Helper::width($command->getName());\n                foreach ($command->getAliases() as $alias) {\n                    $widths[] = Helper::width($alias);\n                }\n            } else {\n                $widths[] = Helper::width($command);\n            }\n        }\n\n        return $widths ? max($widths) + 2 : 0;\n    }\n\n    /**\n     * @param InputOption[] $options\n     */\n    private function calculateTotalWidthForOptions(array $options): int\n    {\n        $totalWidth = 0;\n        foreach ($options as $option) {\n            // \"-\" + shortcut + \", --\" + name\n            $nameLength = 1 + max(Helper::width($option->getShortcut()), 1) + 4 + Helper::width($option->getName());\n            if ($option->isNegatable()) {\n                $nameLength += 6 + Helper::width($option->getName()); // |--no- + name\n            } elseif ($option->acceptValue()) {\n                $valueLength = 1 + Helper::width($option->getName()); // = + value\n                $valueLength += $option->isValueOptional() ? 2 : 0; // [ + ]\n\n                $nameLength += $valueLength;\n            }\n            $totalWidth = max($totalWidth, $nameLength);\n        }\n\n        return $totalWidth;\n    }\n}\n\n\n--- File Index 20: Descriptor/ApplicationDescription.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Descriptor;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Exception\\CommandNotFoundException;\n\n/**\n * @author Jean-Fran\u00e7ois Simon <jeanfrancois.simon@sensiolabs.com>\n *\n * @internal\n */\nclass ApplicationDescription\n{\n    public const GLOBAL_NAMESPACE = '_global';\n\n    private array $namespaces;\n\n    /**\n     * @var array<string, Command>\n     */\n    private array $commands;\n\n    /**\n     * @var array<string, Command>\n     */\n    private array $aliases = [];\n\n    public function __construct(\n        private Application $application,\n        private ?string $namespace = null,\n        private bool $showHidden = false,\n    ) {\n    }\n\n    public function getNamespaces(): array\n    {\n        if (!isset($this->namespaces)) {\n            $this->inspectApplication();\n        }\n\n        return $this->namespaces;\n    }\n\n    /**\n     * @return Command[]\n     */\n    public function getCommands(): array\n    {\n        if (!isset($this->commands)) {\n            $this->inspectApplication();\n        }\n\n        return $this->commands;\n    }\n\n    /**\n     * @throws CommandNotFoundException\n     */\n    public function getCommand(string $name): Command\n    {\n        if (!isset($this->commands[$name]) && !isset($this->aliases[$name])) {\n            throw new CommandNotFoundException(\\sprintf('Command \"%s\" does not exist.', $name));\n        }\n\n        return $this->commands[$name] ?? $this->aliases[$name];\n    }\n\n    private function inspectApplication(): void\n    {\n        $this->commands = [];\n        $this->namespaces = [];\n\n        $all = $this->application->all($this->namespace ? $this->application->findNamespace($this->namespace) : null);\n        foreach ($this->sortCommands($all) as $namespace => $commands) {\n            $names = [];\n\n            /** @var Command $command */\n            foreach ($commands as $name => $command) {\n                if (!$command->getName() || (!$this->showHidden && $command->isHidden())) {\n                    continue;\n                }\n\n                if ($command->getName() === $name) {\n                    $this->commands[$name] = $command;\n                } else {\n                    $this->aliases[$name] = $command;\n                }\n\n                $names[] = $name;\n            }\n\n            $this->namespaces[$namespace] = ['id' => $namespace, 'commands' => $names];\n        }\n    }\n\n    private function sortCommands(array $commands): array\n    {\n        $namespacedCommands = [];\n        $globalCommands = [];\n        $sortedCommands = [];\n        foreach ($commands as $name => $command) {\n            $key = $this->application->extractNamespace($name, 1);\n            if (\\in_array($key, ['', self::GLOBAL_NAMESPACE], true)) {\n                $globalCommands[$name] = $command;\n            } else {\n                $namespacedCommands[$key][$name] = $command;\n            }\n        }\n\n        if ($globalCommands) {\n            ksort($globalCommands);\n            $sortedCommands[self::GLOBAL_NAMESPACE] = $globalCommands;\n        }\n\n        if ($namespacedCommands) {\n            ksort($namespacedCommands, \\SORT_STRING);\n            foreach ($namespacedCommands as $key => $commandsSet) {\n                ksort($commandsSet);\n                $sortedCommands[$key] = $commandsSet;\n            }\n        }\n\n        return $sortedCommands;\n    }\n}\n\n\n--- File Index 21: Descriptor/MarkdownDescriptor.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Descriptor;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Helper\\Helper;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Markdown descriptor.\n *\n * @author Jean-Fran\u00e7ois Simon <contact@jfsimon.fr>\n *\n * @internal\n */\nclass MarkdownDescriptor extends Descriptor\n{\n    public function describe(OutputInterface $output, object $object, array $options = []): void\n    {\n        $decorated = $output->isDecorated();\n        $output->setDecorated(false);\n\n        parent::describe($output, $object, $options);\n\n        $output->setDecorated($decorated);\n    }\n\n    protected function write(string $content, bool $decorated = true): void\n    {\n        parent::write($content, $decorated);\n    }\n\n    protected function describeInputArgument(InputArgument $argument, array $options = []): void\n    {\n        $this->write(\n            '#### `'.($argument->getName() ?: '<none>').\"`\\n\\n\"\n            .($argument->getDescription() ? preg_replace('/\\s*[\\r\\n]\\s*/', \"\\n\", $argument->getDescription()).\"\\n\\n\" : '')\n            .'* Is required: '.($argument->isRequired() ? 'yes' : 'no').\"\\n\"\n            .'* Is array: '.($argument->isArray() ? 'yes' : 'no').\"\\n\"\n            .'* Default: `'.str_replace(\"\\n\", '', var_export($argument->getDefault(), true)).'`'\n        );\n    }\n\n    protected function describeInputOption(InputOption $option, array $options = []): void\n    {\n        $name = '--'.$option->getName();\n        if ($option->isNegatable()) {\n            $name .= '|--no-'.$option->getName();\n        }\n        if ($option->getShortcut()) {\n            $name .= '|-'.str_replace('|', '|-', $option->getShortcut()).'';\n        }\n\n        $this->write(\n            '#### `'.$name.'`'.\"\\n\\n\"\n            .($option->getDescription() ? preg_replace('/\\s*[\\r\\n]\\s*/', \"\\n\", $option->getDescription()).\"\\n\\n\" : '')\n            .'* Accept value: '.($option->acceptValue() ? 'yes' : 'no').\"\\n\"\n            .'* Is value required: '.($option->isValueRequired() ? 'yes' : 'no').\"\\n\"\n            .'* Is multiple: '.($option->isArray() ? 'yes' : 'no').\"\\n\"\n            .'* Is negatable: '.($option->isNegatable() ? 'yes' : 'no').\"\\n\"\n            .'* Default: `'.str_replace(\"\\n\", '', var_export($option->getDefault(), true)).'`'\n        );\n    }\n\n    protected function describeInputDefinition(InputDefinition $definition, array $options = []): void\n    {\n        if ($showArguments = \\count($definition->getArguments()) > 0) {\n            $this->write('### Arguments');\n            foreach ($definition->getArguments() as $argument) {\n                $this->write(\"\\n\\n\");\n                $this->describeInputArgument($argument);\n            }\n        }\n\n        if (\\count($definition->getOptions()) > 0) {\n            if ($showArguments) {\n                $this->write(\"\\n\\n\");\n            }\n\n            $this->write('### Options');\n            foreach ($definition->getOptions() as $option) {\n                $this->write(\"\\n\\n\");\n                $this->describeInputOption($option);\n            }\n        }\n    }\n\n    protected function describeCommand(Command $command, array $options = []): void\n    {\n        if ($options['short'] ?? false) {\n            $this->write(\n                '`'.$command->getName().\"`\\n\"\n                .str_repeat('-', Helper::width($command->getName()) + 2).\"\\n\\n\"\n                .($command->getDescription() ? $command->getDescription().\"\\n\\n\" : '')\n                .'### Usage'.\"\\n\\n\"\n                .array_reduce($command->getAliases(), fn ($carry, $usage) => $carry.'* `'.$usage.'`'.\"\\n\")\n            );\n\n            return;\n        }\n\n        $command->mergeApplicationDefinition(false);\n\n        $this->write(\n            '`'.$command->getName().\"`\\n\"\n            .str_repeat('-', Helper::width($command->getName()) + 2).\"\\n\\n\"\n            .($command->getDescription() ? $command->getDescription().\"\\n\\n\" : '')\n            .'### Usage'.\"\\n\\n\"\n            .array_reduce(array_merge([$command->getSynopsis()], $command->getAliases(), $command->getUsages()), fn ($carry, $usage) => $carry.'* `'.$usage.'`'.\"\\n\")\n        );\n\n        if ($help = $command->getProcessedHelp()) {\n            $this->write(\"\\n\");\n            $this->write($help);\n        }\n\n        $definition = $command->getDefinition();\n        if ($definition->getOptions() || $definition->getArguments()) {\n            $this->write(\"\\n\\n\");\n            $this->describeInputDefinition($definition);\n        }\n    }\n\n    protected function describeApplication(Application $application, array $options = []): void\n    {\n        $describedNamespace = $options['namespace'] ?? null;\n        $description = new ApplicationDescription($application, $describedNamespace);\n        $title = $this->getApplicationTitle($application);\n\n        $this->write($title.\"\\n\".str_repeat('=', Helper::width($title)));\n\n        foreach ($description->getNamespaces() as $namespace) {\n            if (ApplicationDescription::GLOBAL_NAMESPACE !== $namespace['id']) {\n                $this->write(\"\\n\\n\");\n                $this->write('**'.$namespace['id'].':**');\n            }\n\n            $this->write(\"\\n\\n\");\n            $this->write(implode(\"\\n\", array_map(fn ($commandName) => \\sprintf('* [`%s`](#%s)', $commandName, str_replace(':', '', $description->getCommand($commandName)->getName())), $namespace['commands'])));\n        }\n\n        foreach ($description->getCommands() as $command) {\n            $this->write(\"\\n\\n\");\n            $this->describeCommand($command, $options);\n        }\n    }\n\n    private function getApplicationTitle(Application $application): string\n    {\n        if ('UNKNOWN' !== $application->getName()) {\n            if ('UNKNOWN' !== $application->getVersion()) {\n                return \\sprintf('%s %s', $application->getName(), $application->getVersion());\n            }\n\n            return $application->getName();\n        }\n\n        return 'Console Tool';\n    }\n}\n\n\n--- File Index 22: Descriptor/ReStructuredTextDescriptor.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Descriptor;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Helper\\Helper;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\String\\UnicodeString;\n\nclass ReStructuredTextDescriptor extends Descriptor\n{\n    // <h1>\n    private string $partChar = '=';\n    // <h2>\n    private string $chapterChar = '-';\n    // <h3>\n    private string $sectionChar = '~';\n    // <h4>\n    private string $subsectionChar = '.';\n    // <h5>\n    private string $subsubsectionChar = '^';\n    // <h6>\n    private string $paragraphsChar = '\"';\n\n    private array $visibleNamespaces = [];\n\n    public function describe(OutputInterface $output, object $object, array $options = []): void\n    {\n        $decorated = $output->isDecorated();\n        $output->setDecorated(false);\n\n        parent::describe($output, $object, $options);\n\n        $output->setDecorated($decorated);\n    }\n\n    /**\n     * Override parent method to set $decorated = true.\n     */\n    protected function write(string $content, bool $decorated = true): void\n    {\n        parent::write($content, $decorated);\n    }\n\n    protected function describeInputArgument(InputArgument $argument, array $options = []): void\n    {\n        $this->write(\n            $argument->getName() ?: '<none>'.\"\\n\".str_repeat($this->paragraphsChar, Helper::width($argument->getName())).\"\\n\\n\"\n                .($argument->getDescription() ? preg_replace('/\\s*[\\r\\n]\\s*/', \"\\n\", $argument->getDescription()).\"\\n\\n\" : '')\n                .'- **Is required**: '.($argument->isRequired() ? 'yes' : 'no').\"\\n\"\n                .'- **Is array**: '.($argument->isArray() ? 'yes' : 'no').\"\\n\"\n                .'- **Default**: ``'.str_replace(\"\\n\", '', var_export($argument->getDefault(), true)).'``'\n        );\n    }\n\n    protected function describeInputOption(InputOption $option, array $options = []): void\n    {\n        $name = '\\-\\-'.$option->getName();\n        if ($option->isNegatable()) {\n            $name .= '|\\-\\-no-'.$option->getName();\n        }\n        if ($option->getShortcut()) {\n            $name .= '|-'.str_replace('|', '|-', $option->getShortcut());\n        }\n\n        $optionDescription = $option->getDescription() ? preg_replace('/\\s*[\\r\\n]\\s*/', \"\\n\\n\", $option->getDescription()).\"\\n\\n\" : '';\n        $optionDescription = (new UnicodeString($optionDescription))->ascii();\n        $this->write(\n            $name.\"\\n\".str_repeat($this->paragraphsChar, Helper::width($name)).\"\\n\\n\"\n            .$optionDescription\n            .'- **Accept value**: '.($option->acceptValue() ? 'yes' : 'no').\"\\n\"\n            .'- **Is value required**: '.($option->isValueRequired() ? 'yes' : 'no').\"\\n\"\n            .'- **Is multiple**: '.($option->isArray() ? 'yes' : 'no').\"\\n\"\n            .'- **Is negatable**: '.($option->isNegatable() ? 'yes' : 'no').\"\\n\"\n            .'- **Default**: ``'.str_replace(\"\\n\", '', var_export($option->getDefault(), true)).'``'.\"\\n\"\n        );\n    }\n\n    protected function describeInputDefinition(InputDefinition $definition, array $options = []): void\n    {\n        if ($showArguments = ((bool) $definition->getArguments())) {\n            $this->write(\"Arguments\\n\".str_repeat($this->subsubsectionChar, 9));\n            foreach ($definition->getArguments() as $argument) {\n                $this->write(\"\\n\\n\");\n                $this->describeInputArgument($argument);\n            }\n        }\n\n        if ($nonDefaultOptions = $this->getNonDefaultOptions($definition)) {\n            if ($showArguments) {\n                $this->write(\"\\n\\n\");\n            }\n\n            $this->write(\"Options\\n\".str_repeat($this->subsubsectionChar, 7).\"\\n\\n\");\n            foreach ($nonDefaultOptions as $option) {\n                $this->describeInputOption($option);\n                $this->write(\"\\n\");\n            }\n        }\n    }\n\n    protected function describeCommand(Command $command, array $options = []): void\n    {\n        if ($options['short'] ?? false) {\n            $this->write(\n                '``'.$command->getName().\"``\\n\"\n                .str_repeat($this->subsectionChar, Helper::width($command->getName())).\"\\n\\n\"\n                .($command->getDescription() ? $command->getDescription().\"\\n\\n\" : '')\n                .\"Usage\\n\".str_repeat($this->paragraphsChar, 5).\"\\n\\n\"\n                .array_reduce($command->getAliases(), static fn ($carry, $usage) => $carry.'- ``'.$usage.'``'.\"\\n\")\n            );\n\n            return;\n        }\n\n        $command->mergeApplicationDefinition(false);\n\n        foreach ($command->getAliases() as $alias) {\n            $this->write('.. _'.$alias.\":\\n\\n\");\n        }\n        $this->write(\n            $command->getName().\"\\n\"\n            .str_repeat($this->subsectionChar, Helper::width($command->getName())).\"\\n\\n\"\n            .($command->getDescription() ? $command->getDescription().\"\\n\\n\" : '')\n            .\"Usage\\n\".str_repeat($this->subsubsectionChar, 5).\"\\n\\n\"\n            .array_reduce(array_merge([$command->getSynopsis()], $command->getAliases(), $command->getUsages()), static fn ($carry, $usage) => $carry.'- ``'.$usage.'``'.\"\\n\")\n        );\n\n        if ($help = $command->getProcessedHelp()) {\n            $this->write(\"\\n\");\n            $this->write($help);\n        }\n\n        $definition = $command->getDefinition();\n        if ($definition->getOptions() || $definition->getArguments()) {\n            $this->write(\"\\n\\n\");\n            $this->describeInputDefinition($definition);\n        }\n    }\n\n    protected function describeApplication(Application $application, array $options = []): void\n    {\n        $description = new ApplicationDescription($application, $options['namespace'] ?? null);\n        $title = $this->getApplicationTitle($application);\n\n        $this->write($title.\"\\n\".str_repeat($this->partChar, Helper::width($title)));\n        $this->createTableOfContents($description, $application);\n        $this->describeCommands($application, $options);\n    }\n\n    private function getApplicationTitle(Application $application): string\n    {\n        if ('UNKNOWN' === $application->getName()) {\n            return 'Console Tool';\n        }\n        if ('UNKNOWN' !== $application->getVersion()) {\n            return \\sprintf('%s %s', $application->getName(), $application->getVersion());\n        }\n\n        return $application->getName();\n    }\n\n    private function describeCommands($application, array $options): void\n    {\n        $title = 'Commands';\n        $this->write(\"\\n\\n$title\\n\".str_repeat($this->chapterChar, Helper::width($title)).\"\\n\\n\");\n        foreach ($this->visibleNamespaces as $namespace) {\n            if ('_global' === $namespace) {\n                $commands = $application->all('');\n                $this->write('Global'.\"\\n\".str_repeat($this->sectionChar, Helper::width('Global')).\"\\n\\n\");\n            } else {\n                $commands = $application->all($namespace);\n                $this->write($namespace.\"\\n\".str_repeat($this->sectionChar, Helper::width($namespace)).\"\\n\\n\");\n            }\n\n            foreach ($this->removeAliasesAndHiddenCommands($commands) as $command) {\n                $this->describeCommand($command, $options);\n                $this->write(\"\\n\\n\");\n            }\n        }\n    }\n\n    private function createTableOfContents(ApplicationDescription $description, Application $application): void\n    {\n        $this->setVisibleNamespaces($description);\n        $chapterTitle = 'Table of Contents';\n        $this->write(\"\\n\\n$chapterTitle\\n\".str_repeat($this->chapterChar, Helper::width($chapterTitle)).\"\\n\\n\");\n        foreach ($this->visibleNamespaces as $namespace) {\n            if ('_global' === $namespace) {\n                $commands = $application->all('');\n            } else {\n                $commands = $application->all($namespace);\n                $this->write(\"\\n\\n\");\n                $this->write($namespace.\"\\n\".str_repeat($this->sectionChar, Helper::width($namespace)).\"\\n\\n\");\n            }\n            $commands = $this->removeAliasesAndHiddenCommands($commands);\n\n            $this->write(\"\\n\\n\");\n            $this->write(implode(\"\\n\", array_map(static fn ($commandName) => \\sprintf('- `%s`_', $commandName), array_keys($commands))));\n        }\n    }\n\n    private function getNonDefaultOptions(InputDefinition $definition): array\n    {\n        $globalOptions = [\n            'help',\n            'silent',\n            'quiet',\n            'verbose',\n            'version',\n            'ansi',\n            'no-interaction',\n        ];\n        $nonDefaultOptions = [];\n        foreach ($definition->getOptions() as $option) {\n            // Skip global options.\n            if (!\\in_array($option->getName(), $globalOptions, true)) {\n                $nonDefaultOptions[] = $option;\n            }\n        }\n\n        return $nonDefaultOptions;\n    }\n\n    private function setVisibleNamespaces(ApplicationDescription $description): void\n    {\n        $commands = $description->getCommands();\n        foreach ($description->getNamespaces() as $namespace) {\n            try {\n                $namespaceCommands = $namespace['commands'];\n                foreach ($namespaceCommands as $key => $commandName) {\n                    if (!\\array_key_exists($commandName, $commands)) {\n                        // If the array key does not exist, then this is an alias.\n                        unset($namespaceCommands[$key]);\n                    } elseif ($commands[$commandName]->isHidden()) {\n                        unset($namespaceCommands[$key]);\n                    }\n                }\n                if (!$namespaceCommands) {\n                    // If the namespace contained only aliases or hidden commands, skip the namespace.\n                    continue;\n                }\n            } catch (\\Exception) {\n            }\n            $this->visibleNamespaces[] = $namespace['id'];\n        }\n    }\n\n    private function removeAliasesAndHiddenCommands(array $commands): array\n    {\n        foreach ($commands as $key => $command) {\n            if ($command->isHidden() || \\in_array($key, $command->getAliases(), true)) {\n                unset($commands[$key]);\n            }\n        }\n        unset($commands['completion']);\n\n        return $commands;\n    }\n}\n\n\n--- File Index 23: Descriptor/XmlDescriptor.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Descriptor;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputOption;\n\n/**\n * XML descriptor.\n *\n * @author Jean-Fran\u00e7ois Simon <contact@jfsimon.fr>\n *\n * @internal\n */\nclass XmlDescriptor extends Descriptor\n{\n    public function getInputDefinitionDocument(InputDefinition $definition): \\DOMDocument\n    {\n        $dom = new \\DOMDocument('1.0', 'UTF-8');\n        $dom->appendChild($definitionXML = $dom->createElement('definition'));\n\n        $definitionXML->appendChild($argumentsXML = $dom->createElement('arguments'));\n        foreach ($definition->getArguments() as $argument) {\n            $this->appendDocument($argumentsXML, $this->getInputArgumentDocument($argument));\n        }\n\n        $definitionXML->appendChild($optionsXML = $dom->createElement('options'));\n        foreach ($definition->getOptions() as $option) {\n            $this->appendDocument($optionsXML, $this->getInputOptionDocument($option));\n        }\n\n        return $dom;\n    }\n\n    public function getCommandDocument(Command $command, bool $short = false): \\DOMDocument\n    {\n        $dom = new \\DOMDocument('1.0', 'UTF-8');\n        $dom->appendChild($commandXML = $dom->createElement('command'));\n\n        $commandXML->setAttribute('id', $command->getName());\n        $commandXML->setAttribute('name', $command->getName());\n        $commandXML->setAttribute('hidden', $command->isHidden() ? 1 : 0);\n\n        $commandXML->appendChild($usagesXML = $dom->createElement('usages'));\n\n        $commandXML->appendChild($descriptionXML = $dom->createElement('description'));\n        $descriptionXML->appendChild($dom->createTextNode(str_replace(\"\\n\", \"\\n \", $command->getDescription())));\n\n        if ($short) {\n            foreach ($command->getAliases() as $usage) {\n                $usagesXML->appendChild($dom->createElement('usage', $usage));\n            }\n        } else {\n            $command->mergeApplicationDefinition(false);\n\n            foreach (array_merge([$command->getSynopsis()], $command->getAliases(), $command->getUsages()) as $usage) {\n                $usagesXML->appendChild($dom->createElement('usage', $usage));\n            }\n\n            $commandXML->appendChild($helpXML = $dom->createElement('help'));\n            $helpXML->appendChild($dom->createTextNode(str_replace(\"\\n\", \"\\n \", $command->getProcessedHelp())));\n\n            $definitionXML = $this->getInputDefinitionDocument($command->getDefinition());\n            $this->appendDocument($commandXML, $definitionXML->getElementsByTagName('definition')->item(0));\n        }\n\n        return $dom;\n    }\n\n    public function getApplicationDocument(Application $application, ?string $namespace = null, bool $short = false): \\DOMDocument\n    {\n        $dom = new \\DOMDocument('1.0', 'UTF-8');\n        $dom->appendChild($rootXml = $dom->createElement('symfony'));\n\n        if ('UNKNOWN' !== $application->getName()) {\n            $rootXml->setAttribute('name', $application->getName());\n            if ('UNKNOWN' !== $application->getVersion()) {\n                $rootXml->setAttribute('version', $application->getVersion());\n            }\n        }\n\n        $rootXml->appendChild($commandsXML = $dom->createElement('commands'));\n\n        $description = new ApplicationDescription($application, $namespace, true);\n\n        if ($namespace) {\n            $commandsXML->setAttribute('namespace', $namespace);\n        }\n\n        foreach ($description->getCommands() as $command) {\n            $this->appendDocument($commandsXML, $this->getCommandDocument($command, $short));\n        }\n\n        if (!$namespace) {\n            $rootXml->appendChild($namespacesXML = $dom->createElement('namespaces'));\n\n            foreach ($description->getNamespaces() as $namespaceDescription) {\n                $namespacesXML->appendChild($namespaceArrayXML = $dom->createElement('namespace'));\n                $namespaceArrayXML->setAttribute('id', $namespaceDescription['id']);\n\n                foreach ($namespaceDescription['commands'] as $name) {\n                    $namespaceArrayXML->appendChild($commandXML = $dom->createElement('command'));\n                    $commandXML->appendChild($dom->createTextNode($name));\n                }\n            }\n        }\n\n        return $dom;\n    }\n\n    protected function describeInputArgument(InputArgument $argument, array $options = []): void\n    {\n        $this->writeDocument($this->getInputArgumentDocument($argument));\n    }\n\n    protected function describeInputOption(InputOption $option, array $options = []): void\n    {\n        $this->writeDocument($this->getInputOptionDocument($option));\n    }\n\n    protected function describeInputDefinition(InputDefinition $definition, array $options = []): void\n    {\n        $this->writeDocument($this->getInputDefinitionDocument($definition));\n    }\n\n    protected function describeCommand(Command $command, array $options = []): void\n    {\n        $this->writeDocument($this->getCommandDocument($command, $options['short'] ?? false));\n    }\n\n    protected function describeApplication(Application $application, array $options = []): void\n    {\n        $this->writeDocument($this->getApplicationDocument($application, $options['namespace'] ?? null, $options['short'] ?? false));\n    }\n\n    /**\n     * Appends document children to parent node.\n     */\n    private function appendDocument(\\DOMNode $parentNode, \\DOMNode $importedParent): void\n    {\n        foreach ($importedParent->childNodes as $childNode) {\n            $parentNode->appendChild($parentNode->ownerDocument->importNode($childNode, true));\n        }\n    }\n\n    /**\n     * Writes DOM document.\n     */\n    private function writeDocument(\\DOMDocument $dom): void\n    {\n        $dom->formatOutput = true;\n        $this->write($dom->saveXML());\n    }\n\n    private function getInputArgumentDocument(InputArgument $argument): \\DOMDocument\n    {\n        $dom = new \\DOMDocument('1.0', 'UTF-8');\n\n        $dom->appendChild($objectXML = $dom->createElement('argument'));\n        $objectXML->setAttribute('name', $argument->getName());\n        $objectXML->setAttribute('is_required', $argument->isRequired() ? 1 : 0);\n        $objectXML->setAttribute('is_array', $argument->isArray() ? 1 : 0);\n        $objectXML->appendChild($descriptionXML = $dom->createElement('description'));\n        $descriptionXML->appendChild($dom->createTextNode($argument->getDescription()));\n\n        $objectXML->appendChild($defaultsXML = $dom->createElement('defaults'));\n        $defaults = \\is_array($argument->getDefault()) ? $argument->getDefault() : (\\is_bool($argument->getDefault()) ? [var_export($argument->getDefault(), true)] : ($argument->getDefault() ? [$argument->getDefault()] : []));\n        foreach ($defaults as $default) {\n            $defaultsXML->appendChild($defaultXML = $dom->createElement('default'));\n            $defaultXML->appendChild($dom->createTextNode($default));\n        }\n\n        return $dom;\n    }\n\n    private function getInputOptionDocument(InputOption $option): \\DOMDocument\n    {\n        $dom = new \\DOMDocument('1.0', 'UTF-8');\n\n        $dom->appendChild($objectXML = $dom->createElement('option'));\n        $objectXML->setAttribute('name', '--'.$option->getName());\n        $pos = strpos($option->getShortcut() ?? '', '|');\n        if (false !== $pos) {\n            $objectXML->setAttribute('shortcut', '-'.substr($option->getShortcut(), 0, $pos));\n            $objectXML->setAttribute('shortcuts', '-'.str_replace('|', '|-', $option->getShortcut()));\n        } else {\n            $objectXML->setAttribute('shortcut', $option->getShortcut() ? '-'.$option->getShortcut() : '');\n        }\n        $objectXML->setAttribute('accept_value', $option->acceptValue() ? 1 : 0);\n        $objectXML->setAttribute('is_value_required', $option->isValueRequired() ? 1 : 0);\n        $objectXML->setAttribute('is_multiple', $option->isArray() ? 1 : 0);\n        $objectXML->appendChild($descriptionXML = $dom->createElement('description'));\n        $descriptionXML->appendChild($dom->createTextNode($option->getDescription()));\n\n        if ($option->acceptValue()) {\n            $defaults = \\is_array($option->getDefault()) ? $option->getDefault() : (\\is_bool($option->getDefault()) ? [var_export($option->getDefault(), true)] : ($option->getDefault() ? [$option->getDefault()] : []));\n            $objectXML->appendChild($defaultsXML = $dom->createElement('defaults'));\n\n            foreach ($defaults as $default) {\n                $defaultsXML->appendChild($defaultXML = $dom->createElement('default'));\n                $defaultXML->appendChild($dom->createTextNode($default));\n            }\n        }\n\n        if ($option->isNegatable()) {\n            $dom->appendChild($objectXML = $dom->createElement('option'));\n            $objectXML->setAttribute('name', '--no-'.$option->getName());\n            $objectXML->setAttribute('shortcut', '');\n            $objectXML->setAttribute('accept_value', 0);\n            $objectXML->setAttribute('is_value_required', 0);\n            $objectXML->setAttribute('is_multiple', 0);\n            $objectXML->appendChild($descriptionXML = $dom->createElement('description'));\n            $descriptionXML->appendChild($dom->createTextNode('Negate the \"--'.$option->getName().'\" option'));\n        }\n\n        return $dom;\n    }\n}\n\n\n--- File Index 24: Descriptor/Descriptor.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Descriptor;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * @author Jean-Fran\u00e7ois Simon <jeanfrancois.simon@sensiolabs.com>\n *\n * @internal\n */\nabstract class Descriptor implements DescriptorInterface\n{\n    protected OutputInterface $output;\n\n    public function describe(OutputInterface $output, object $object, array $options = []): void\n    {\n        $this->output = $output;\n\n        match (true) {\n            $object instanceof InputArgument => $this->describeInputArgument($object, $options),\n            $object instanceof InputOption => $this->describeInputOption($object, $options),\n            $object instanceof InputDefinition => $this->describeInputDefinition($object, $options),\n            $object instanceof Command => $this->describeCommand($object, $options),\n            $object instanceof Application => $this->describeApplication($object, $options),\n            default => throw new InvalidArgumentException(\\sprintf('Object of type \"%s\" is not describable.', get_debug_type($object))),\n        };\n    }\n\n    protected function write(string $content, bool $decorated = false): void\n    {\n        $this->output->write($content, false, $decorated ? OutputInterface::OUTPUT_NORMAL : OutputInterface::OUTPUT_RAW);\n    }\n\n    /**\n     * Describes an InputArgument instance.\n     */\n    abstract protected function describeInputArgument(InputArgument $argument, array $options = []): void;\n\n    /**\n     * Describes an InputOption instance.\n     */\n    abstract protected function describeInputOption(InputOption $option, array $options = []): void;\n\n    /**\n     * Describes an InputDefinition instance.\n     */\n    abstract protected function describeInputDefinition(InputDefinition $definition, array $options = []): void;\n\n    /**\n     * Describes a Command instance.\n     */\n    abstract protected function describeCommand(Command $command, array $options = []): void;\n\n    /**\n     * Describes an Application instance.\n     */\n    abstract protected function describeApplication(Application $application, array $options = []): void;\n}\n\n\n--- File Index 25: Descriptor/JsonDescriptor.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Descriptor;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputOption;\n\n/**\n * JSON descriptor.\n *\n * @author Jean-Fran\u00e7ois Simon <contact@jfsimon.fr>\n *\n * @internal\n */\nclass JsonDescriptor extends Descriptor\n{\n    protected function describeInputArgument(InputArgument $argument, array $options = []): void\n    {\n        $this->writeData($this->getInputArgumentData($argument), $options);\n    }\n\n    protected function describeInputOption(InputOption $option, array $options = []): void\n    {\n        $this->writeData($this->getInputOptionData($option), $options);\n        if ($option->isNegatable()) {\n            $this->writeData($this->getInputOptionData($option, true), $options);\n        }\n    }\n\n    protected function describeInputDefinition(InputDefinition $definition, array $options = []): void\n    {\n        $this->writeData($this->getInputDefinitionData($definition), $options);\n    }\n\n    protected function describeCommand(Command $command, array $options = []): void\n    {\n        $this->writeData($this->getCommandData($command, $options['short'] ?? false), $options);\n    }\n\n    protected function describeApplication(Application $application, array $options = []): void\n    {\n        $describedNamespace = $options['namespace'] ?? null;\n        $description = new ApplicationDescription($application, $describedNamespace, true);\n        $commands = [];\n\n        foreach ($description->getCommands() as $command) {\n            $commands[] = $this->getCommandData($command, $options['short'] ?? false);\n        }\n\n        $data = [];\n        if ('UNKNOWN' !== $application->getName()) {\n            $data['application']['name'] = $application->getName();\n            if ('UNKNOWN' !== $application->getVersion()) {\n                $data['application']['version'] = $application->getVersion();\n            }\n        }\n\n        $data['commands'] = $commands;\n\n        if ($describedNamespace) {\n            $data['namespace'] = $describedNamespace;\n        } else {\n            $data['namespaces'] = array_values($description->getNamespaces());\n        }\n\n        $this->writeData($data, $options);\n    }\n\n    /**\n     * Writes data as json.\n     */\n    private function writeData(array $data, array $options): void\n    {\n        $flags = $options['json_encoding'] ?? 0;\n\n        $this->write(json_encode($data, $flags));\n    }\n\n    private function getInputArgumentData(InputArgument $argument): array\n    {\n        return [\n            'name' => $argument->getName(),\n            'is_required' => $argument->isRequired(),\n            'is_array' => $argument->isArray(),\n            'description' => preg_replace('/\\s*[\\r\\n]\\s*/', ' ', $argument->getDescription()),\n            'default' => \\INF === $argument->getDefault() ? 'INF' : $argument->getDefault(),\n        ];\n    }\n\n    private function getInputOptionData(InputOption $option, bool $negated = false): array\n    {\n        return $negated ? [\n            'name' => '--no-'.$option->getName(),\n            'shortcut' => '',\n            'accept_value' => false,\n            'is_value_required' => false,\n            'is_multiple' => false,\n            'description' => 'Negate the \"--'.$option->getName().'\" option',\n            'default' => false,\n        ] : [\n            'name' => '--'.$option->getName(),\n            'shortcut' => $option->getShortcut() ? '-'.str_replace('|', '|-', $option->getShortcut()) : '',\n            'accept_value' => $option->acceptValue(),\n            'is_value_required' => $option->isValueRequired(),\n            'is_multiple' => $option->isArray(),\n            'description' => preg_replace('/\\s*[\\r\\n]\\s*/', ' ', $option->getDescription()),\n            'default' => \\INF === $option->getDefault() ? 'INF' : $option->getDefault(),\n        ];\n    }\n\n    private function getInputDefinitionData(InputDefinition $definition): array\n    {\n        $inputArguments = [];\n        foreach ($definition->getArguments() as $name => $argument) {\n            $inputArguments[$name] = $this->getInputArgumentData($argument);\n        }\n\n        $inputOptions = [];\n        foreach ($definition->getOptions() as $name => $option) {\n            $inputOptions[$name] = $this->getInputOptionData($option);\n            if ($option->isNegatable()) {\n                $inputOptions['no-'.$name] = $this->getInputOptionData($option, true);\n            }\n        }\n\n        return ['arguments' => $inputArguments, 'options' => $inputOptions];\n    }\n\n    private function getCommandData(Command $command, bool $short = false): array\n    {\n        $data = [\n            'name' => $command->getName(),\n            'description' => $command->getDescription(),\n        ];\n\n        if ($short) {\n            $data += [\n                'usage' => $command->getAliases(),\n            ];\n        } else {\n            $command->mergeApplicationDefinition(false);\n\n            $data += [\n                'usage' => array_merge([$command->getSynopsis()], $command->getUsages(), $command->getAliases()),\n                'help' => $command->getProcessedHelp(),\n                'definition' => $this->getInputDefinitionData($command->getDefinition()),\n            ];\n        }\n\n        $data['hidden'] = $command->isHidden();\n\n        return $data;\n    }\n}\n\n\n--- File Index 26: Descriptor/DescriptorInterface.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Descriptor;\n\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Descriptor interface.\n *\n * @author Jean-Fran\u00e7ois Simon <contact@jfsimon.fr>\n */\ninterface DescriptorInterface\n{\n    public function describe(OutputInterface $output, object $object, array $options = []): void;\n}\n\n\n--- File Index 27: CommandLoader/ContainerCommandLoader.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\CommandLoader;\n\nuse Psr\\Container\\ContainerInterface;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Exception\\CommandNotFoundException;\n\n/**\n * Loads commands from a PSR-11 container.\n *\n * @author Robin Chalas <robin.chalas@gmail.com>\n */\nclass ContainerCommandLoader implements CommandLoaderInterface\n{\n    /**\n     * @param array $commandMap An array with command names as keys and service ids as values\n     */\n    public function __construct(\n        private ContainerInterface $container,\n        private array $commandMap,\n    ) {\n    }\n\n    public function get(string $name): Command\n    {\n        if (!$this->has($name)) {\n            throw new CommandNotFoundException(\\sprintf('Command \"%s\" does not exist.', $name));\n        }\n\n        return $this->container->get($this->commandMap[$name]);\n    }\n\n    public function has(string $name): bool\n    {\n        return isset($this->commandMap[$name]) && $this->container->has($this->commandMap[$name]);\n    }\n\n    public function getNames(): array\n    {\n        return array_keys($this->commandMap);\n    }\n}\n\n\n--- File Index 28: CommandLoader/CommandLoaderInterface.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\CommandLoader;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Exception\\CommandNotFoundException;\n\n/**\n * @author Robin Chalas <robin.chalas@gmail.com>\n */\ninterface CommandLoaderInterface\n{\n    /**\n     * Loads a command.\n     *\n     * @throws CommandNotFoundException\n     */\n    public function get(string $name): Command;\n\n    /**\n     * Checks if a command exists.\n     */\n    public function has(string $name): bool;\n\n    /**\n     * @return string[]\n     */\n    public function getNames(): array;\n}\n\n\n--- File Index 29: CommandLoader/FactoryCommandLoader.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\CommandLoader;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Exception\\CommandNotFoundException;\n\n/**\n * A simple command loader using factories to instantiate commands lazily.\n *\n * @author Maxime Steinhausser <maxime.steinhausser@gmail.com>\n */\nclass FactoryCommandLoader implements CommandLoaderInterface\n{\n    /**\n     * @param callable[] $factories Indexed by command names\n     */\n    public function __construct(\n        private array $factories,\n    ) {\n    }\n\n    public function has(string $name): bool\n    {\n        return isset($this->factories[$name]);\n    }\n\n    public function get(string $name): Command\n    {\n        if (!isset($this->factories[$name])) {\n            throw new CommandNotFoundException(\\sprintf('Command \"%s\" does not exist.', $name));\n        }\n\n        $factory = $this->factories[$name];\n\n        return $factory();\n    }\n\n    public function getNames(): array\n    {\n        return array_keys($this->factories);\n    }\n}\n\n\n--- File Index 30: Completion/CompletionInput.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Completion;\n\nuse Symfony\\Component\\Console\\Exception\\RuntimeException;\nuse Symfony\\Component\\Console\\Input\\ArgvInput;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputOption;\n\n/**\n * An input specialized for shell completion.\n *\n * This input allows unfinished option names or values and exposes what kind of\n * completion is expected.\n *\n * @author Wouter de Jong <wouter@wouterj.nl>\n */\nfinal class CompletionInput extends ArgvInput\n{\n    public const TYPE_ARGUMENT_VALUE = 'argument_value';\n    public const TYPE_OPTION_VALUE = 'option_value';\n    public const TYPE_OPTION_NAME = 'option_name';\n    public const TYPE_NONE = 'none';\n\n    private array $tokens;\n    private int $currentIndex;\n    private string $completionType;\n    private ?string $completionName = null;\n    private string $completionValue = '';\n\n    /**\n     * Converts a terminal string into tokens.\n     *\n     * This is required for shell completions without COMP_WORDS support.\n     */\n    public static function fromString(string $inputStr, int $currentIndex): self\n    {\n        preg_match_all('/(?<=^|\\s)([\\'\"]?)(.+?)(?<!\\\\\\\\)\\1(?=$|\\s)/', $inputStr, $tokens);\n\n        return self::fromTokens($tokens[0], $currentIndex);\n    }\n\n    /**\n     * Create an input based on an COMP_WORDS token list.\n     *\n     * @param string[] $tokens       the set of split tokens (e.g. COMP_WORDS or argv)\n     * @param int      $currentIndex the index of the cursor (e.g. COMP_CWORD)\n     */\n    public static function fromTokens(array $tokens, int $currentIndex): self\n    {\n        $input = new self($tokens);\n        $input->tokens = $tokens;\n        $input->currentIndex = $currentIndex;\n\n        return $input;\n    }\n\n    public function bind(InputDefinition $definition): void\n    {\n        parent::bind($definition);\n\n        $relevantToken = $this->getRelevantToken();\n        if ('-' === $relevantToken[0]) {\n            // the current token is an input option: complete either option name or option value\n            [$optionToken, $optionValue] = explode('=', $relevantToken, 2) + ['', ''];\n\n            $option = $this->getOptionFromToken($optionToken);\n            if (null === $option && !$this->isCursorFree()) {\n                $this->completionType = self::TYPE_OPTION_NAME;\n                $this->completionValue = $relevantToken;\n\n                return;\n            }\n\n            if ($option?->acceptValue()) {\n                $this->completionType = self::TYPE_OPTION_VALUE;\n                $this->completionName = $option->getName();\n                $this->completionValue = $optionValue ?: (!str_starts_with($optionToken, '--') ? substr($optionToken, 2) : '');\n\n                return;\n            }\n        }\n\n        $previousToken = $this->tokens[$this->currentIndex - 1];\n        if ('-' === $previousToken[0] && '' !== trim($previousToken, '-')) {\n            // check if previous option accepted a value\n            $previousOption = $this->getOptionFromToken($previousToken);\n            if ($previousOption?->acceptValue()) {\n                $this->completionType = self::TYPE_OPTION_VALUE;\n                $this->completionName = $previousOption->getName();\n                $this->completionValue = $relevantToken;\n\n                return;\n            }\n        }\n\n        // complete argument value\n        $this->completionType = self::TYPE_ARGUMENT_VALUE;\n\n        foreach ($this->definition->getArguments() as $argumentName => $argument) {\n            if (!isset($this->arguments[$argumentName])) {\n                break;\n            }\n\n            $argumentValue = $this->arguments[$argumentName];\n            $this->completionName = $argumentName;\n            if (\\is_array($argumentValue)) {\n                $this->completionValue = $argumentValue ? $argumentValue[array_key_last($argumentValue)] : null;\n            } else {\n                $this->completionValue = $argumentValue;\n            }\n        }\n\n        if ($this->currentIndex >= \\count($this->tokens)) {\n            if (!isset($this->arguments[$argumentName]) || $this->definition->getArgument($argumentName)->isArray()) {\n                $this->completionName = $argumentName;\n            } else {\n                // we've reached the end\n                $this->completionType = self::TYPE_NONE;\n                $this->completionName = null;\n            }\n\n            $this->completionValue = '';\n        }\n    }\n\n    /**\n     * Returns the type of completion required.\n     *\n     * TYPE_ARGUMENT_VALUE when completing the value of an input argument\n     * TYPE_OPTION_VALUE   when completing the value of an input option\n     * TYPE_OPTION_NAME    when completing the name of an input option\n     * TYPE_NONE           when nothing should be completed\n     *\n     * TYPE_OPTION_NAME and TYPE_NONE are already implemented by the Console component.\n     *\n     * @return self::TYPE_*\n     */\n    public function getCompletionType(): string\n    {\n        return $this->completionType;\n    }\n\n    /**\n     * The name of the input option or argument when completing a value.\n     *\n     * @return string|null returns null when completing an option name\n     */\n    public function getCompletionName(): ?string\n    {\n        return $this->completionName;\n    }\n\n    /**\n     * The value already typed by the user (or empty string).\n     */\n    public function getCompletionValue(): string\n    {\n        return $this->completionValue;\n    }\n\n    public function mustSuggestOptionValuesFor(string $optionName): bool\n    {\n        return self::TYPE_OPTION_VALUE === $this->getCompletionType() && $optionName === $this->getCompletionName();\n    }\n\n    public function mustSuggestArgumentValuesFor(string $argumentName): bool\n    {\n        return self::TYPE_ARGUMENT_VALUE === $this->getCompletionType() && $argumentName === $this->getCompletionName();\n    }\n\n    protected function parseToken(string $token, bool $parseOptions): bool\n    {\n        try {\n            return parent::parseToken($token, $parseOptions);\n        } catch (RuntimeException) {\n            // suppress errors, completed input is almost never valid\n        }\n\n        return $parseOptions;\n    }\n\n    private function getOptionFromToken(string $optionToken): ?InputOption\n    {\n        $optionName = ltrim($optionToken, '-');\n        if (!$optionName) {\n            return null;\n        }\n\n        if ('-' === ($optionToken[1] ?? ' ')) {\n            // long option name\n            return $this->definition->hasOption($optionName) ? $this->definition->getOption($optionName) : null;\n        }\n\n        // short option name\n        return $this->definition->hasShortcut($optionName[0]) ? $this->definition->getOptionForShortcut($optionName[0]) : null;\n    }\n\n    /**\n     * The token of the cursor, or the last token if the cursor is at the end of the input.\n     */\n    private function getRelevantToken(): string\n    {\n        return $this->tokens[$this->isCursorFree() ? $this->currentIndex - 1 : $this->currentIndex];\n    }\n\n    /**\n     * Whether the cursor is \"free\" (i.e. at the end of the input preceded by a space).\n     */\n    private function isCursorFree(): bool\n    {\n        $nrOfTokens = \\count($this->tokens);\n        if ($this->currentIndex > $nrOfTokens) {\n            throw new \\LogicException('Current index is invalid, it must be the number of input tokens or one more.');\n        }\n\n        return $this->currentIndex >= $nrOfTokens;\n    }\n\n    public function __toString(): string\n    {\n        $str = '';\n        foreach ($this->tokens as $i => $token) {\n            $str .= $token;\n\n            if ($this->currentIndex === $i) {\n                $str .= '|';\n            }\n\n            $str .= ' ';\n        }\n\n        if ($this->currentIndex > $i) {\n            $str .= '|';\n        }\n\n        return rtrim($str);\n    }\n}\n\n\n--- File Index 31: Completion/CompletionSuggestions.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Completion;\n\nuse Symfony\\Component\\Console\\Input\\InputOption;\n\n/**\n * Stores all completion suggestions for the current input.\n *\n * @author Wouter de Jong <wouter@wouterj.nl>\n */\nfinal class CompletionSuggestions\n{\n    private array $valueSuggestions = [];\n    private array $optionSuggestions = [];\n\n    /**\n     * Add a suggested value for an input option or argument.\n     *\n     * @return $this\n     */\n    public function suggestValue(string|Suggestion $value): static\n    {\n        $this->valueSuggestions[] = !$value instanceof Suggestion ? new Suggestion($value) : $value;\n\n        return $this;\n    }\n\n    /**\n     * Add multiple suggested values at once for an input option or argument.\n     *\n     * @param list<string|Suggestion> $values\n     *\n     * @return $this\n     */\n    public function suggestValues(array $values): static\n    {\n        foreach ($values as $value) {\n            $this->suggestValue($value);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Add a suggestion for an input option name.\n     *\n     * @return $this\n     */\n    public function suggestOption(InputOption $option): static\n    {\n        $this->optionSuggestions[] = $option;\n\n        return $this;\n    }\n\n    /**\n     * Add multiple suggestions for input option names at once.\n     *\n     * @param InputOption[] $options\n     *\n     * @return $this\n     */\n    public function suggestOptions(array $options): static\n    {\n        foreach ($options as $option) {\n            $this->suggestOption($option);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @return InputOption[]\n     */\n    public function getOptionSuggestions(): array\n    {\n        return $this->optionSuggestions;\n    }\n\n    /**\n     * @return Suggestion[]\n     */\n    public function getValueSuggestions(): array\n    {\n        return $this->valueSuggestions;\n    }\n}\n\n\n--- File Index 32: Completion/Suggestion.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Completion;\n\n/**\n * Represents a single suggested value.\n *\n * @author Wouter de Jong <wouter@wouterj.nl>\n */\nclass Suggestion implements \\Stringable\n{\n    public function __construct(\n        private readonly string $value,\n        private readonly string $description = '',\n    ) {\n    }\n\n    public function getValue(): string\n    {\n        return $this->value;\n    }\n\n    public function getDescription(): string\n    {\n        return $this->description;\n    }\n\n    public function __toString(): string\n    {\n        return $this->getValue();\n    }\n}\n\n\n--- File Index 33: Completion/Output/FishCompletionOutput.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Completion\\Output;\n\nuse Symfony\\Component\\Console\\Completion\\CompletionSuggestions;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * @author Guillaume Aveline <guillaume.aveline@pm.me>\n */\nclass FishCompletionOutput implements CompletionOutputInterface\n{\n    public function write(CompletionSuggestions $suggestions, OutputInterface $output): void\n    {\n        $values = [];\n        foreach ($suggestions->getValueSuggestions() as $value) {\n            $values[] = $value->getValue().($value->getDescription() ? \"\\t\".$value->getDescription() : '');\n        }\n        foreach ($suggestions->getOptionSuggestions() as $option) {\n            $values[] = '--'.$option->getName().($option->getDescription() ? \"\\t\".$option->getDescription() : '');\n            if ($option->isNegatable()) {\n                $values[] = '--no-'.$option->getName().($option->getDescription() ? \"\\t\".$option->getDescription() : '');\n            }\n        }\n        $output->write(implode(\"\\n\", $values));\n    }\n}\n\n\n--- File Index 34: Completion/Output/CompletionOutputInterface.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Completion\\Output;\n\nuse Symfony\\Component\\Console\\Completion\\CompletionSuggestions;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Transforms the {@see CompletionSuggestions} object into output readable by the shell completion.\n *\n * @author Wouter de Jong <wouter@wouterj.nl>\n */\ninterface CompletionOutputInterface\n{\n    public function write(CompletionSuggestions $suggestions, OutputInterface $output): void;\n}\n\n\n--- File Index 35: Completion/Output/BashCompletionOutput.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Completion\\Output;\n\nuse Symfony\\Component\\Console\\Completion\\CompletionSuggestions;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * @author Wouter de Jong <wouter@wouterj.nl>\n */\nclass BashCompletionOutput implements CompletionOutputInterface\n{\n    public function write(CompletionSuggestions $suggestions, OutputInterface $output): void\n    {\n        $values = $suggestions->getValueSuggestions();\n        foreach ($suggestions->getOptionSuggestions() as $option) {\n            $values[] = '--'.$option->getName();\n            if ($option->isNegatable()) {\n                $values[] = '--no-'.$option->getName();\n            }\n        }\n        $output->writeln(implode(\"\\n\", $values));\n    }\n}\n\n\n--- File Index 36: Completion/Output/ZshCompletionOutput.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Completion\\Output;\n\nuse Symfony\\Component\\Console\\Completion\\CompletionSuggestions;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * @author Jitendra A <adhocore@gmail.com>\n */\nclass ZshCompletionOutput implements CompletionOutputInterface\n{\n    public function write(CompletionSuggestions $suggestions, OutputInterface $output): void\n    {\n        $values = [];\n        foreach ($suggestions->getValueSuggestions() as $value) {\n            $values[] = $value->getValue().($value->getDescription() ? \"\\t\".$value->getDescription() : '');\n        }\n        foreach ($suggestions->getOptionSuggestions() as $option) {\n            $values[] = '--'.$option->getName().($option->getDescription() ? \"\\t\".$option->getDescription() : '');\n            if ($option->isNegatable()) {\n                $values[] = '--no-'.$option->getName().($option->getDescription() ? \"\\t\".$option->getDescription() : '');\n            }\n        }\n        $output->write(implode(\"\\n\", $values).\"\\n\");\n    }\n}\n\n\n--- File Index 37: CI/GithubActionReporter.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\CI;\n\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Utility class for Github actions.\n *\n * @author Maxime Steinhausser <maxime.steinhausser@gmail.com>\n */\nclass GithubActionReporter\n{\n    /**\n     * @see https://github.com/actions/toolkit/blob/5e5e1b7aacba68a53836a34db4a288c3c1c1585b/packages/core/src/command.ts#L80-L85\n     */\n    private const ESCAPED_DATA = [\n        '%' => '%25',\n        \"\\r\" => '%0D',\n        \"\\n\" => '%0A',\n    ];\n\n    /**\n     * @see https://github.com/actions/toolkit/blob/5e5e1b7aacba68a53836a34db4a288c3c1c1585b/packages/core/src/command.ts#L87-L94\n     */\n    private const ESCAPED_PROPERTIES = [\n        '%' => '%25',\n        \"\\r\" => '%0D',\n        \"\\n\" => '%0A',\n        ':' => '%3A',\n        ',' => '%2C',\n    ];\n\n    public function __construct(\n        private OutputInterface $output,\n    ) {\n    }\n\n    public static function isGithubActionEnvironment(): bool\n    {\n        return false !== getenv('GITHUB_ACTIONS');\n    }\n\n    /**\n     * Output an error using the Github annotations format.\n     *\n     * @see https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#setting-an-error-message\n     */\n    public function error(string $message, ?string $file = null, ?int $line = null, ?int $col = null): void\n    {\n        $this->log('error', $message, $file, $line, $col);\n    }\n\n    /**\n     * Output a warning using the Github annotations format.\n     *\n     * @see https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#setting-a-warning-message\n     */\n    public function warning(string $message, ?string $file = null, ?int $line = null, ?int $col = null): void\n    {\n        $this->log('warning', $message, $file, $line, $col);\n    }\n\n    /**\n     * Output a debug log using the Github annotations format.\n     *\n     * @see https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#setting-a-debug-message\n     */\n    public function debug(string $message, ?string $file = null, ?int $line = null, ?int $col = null): void\n    {\n        $this->log('debug', $message, $file, $line, $col);\n    }\n\n    private function log(string $type, string $message, ?string $file = null, ?int $line = null, ?int $col = null): void\n    {\n        // Some values must be encoded.\n        $message = strtr($message, self::ESCAPED_DATA);\n\n        if (!$file) {\n            // No file provided, output the message solely:\n            $this->output->writeln(\\sprintf('::%s::%s', $type, $message));\n\n            return;\n        }\n\n        $this->output->writeln(\\sprintf('::%s file=%s,line=%s,col=%s::%s', $type, strtr($file, self::ESCAPED_PROPERTIES), strtr($line ?? 1, self::ESCAPED_PROPERTIES), strtr($col ?? 0, self::ESCAPED_PROPERTIES), $message));\n    }\n}\n\n\n--- File Index 38: EventListener/ErrorListener.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\EventListener;\n\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\Console\\ConsoleEvents;\nuse Symfony\\Component\\Console\\Event\\ConsoleErrorEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\n/**\n * @author James Halsall <james.t.halsall@googlemail.com>\n * @author Robin Chalas <robin.chalas@gmail.com>\n */\nclass ErrorListener implements EventSubscriberInterface\n{\n    public function __construct(\n        private ?LoggerInterface $logger = null,\n    ) {\n    }\n\n    public function onConsoleError(ConsoleErrorEvent $event): void\n    {\n        if (null === $this->logger) {\n            return;\n        }\n\n        $error = $event->getError();\n\n        if (!$inputString = self::getInputString($event)) {\n            $this->logger->critical('An error occurred while using the console. Message: \"{message}\"', ['exception' => $error, 'message' => $error->getMessage()]);\n\n            return;\n        }\n\n        $this->logger->critical('Error thrown while running command \"{command}\". Message: \"{message}\"', ['exception' => $error, 'command' => $inputString, 'message' => $error->getMessage()]);\n    }\n\n    public function onConsoleTerminate(ConsoleTerminateEvent $event): void\n    {\n        if (null === $this->logger) {\n            return;\n        }\n\n        $exitCode = $event->getExitCode();\n\n        if (0 === $exitCode) {\n            return;\n        }\n\n        if (!$inputString = self::getInputString($event)) {\n            $this->logger->debug('The console exited with code \"{code}\"', ['code' => $exitCode]);\n\n            return;\n        }\n\n        $this->logger->debug('Command \"{command}\" exited with code \"{code}\"', ['command' => $inputString, 'code' => $exitCode]);\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            ConsoleEvents::ERROR => ['onConsoleError', -128],\n            ConsoleEvents::TERMINATE => ['onConsoleTerminate', -128],\n        ];\n    }\n\n    private static function getInputString(ConsoleEvent $event): string\n    {\n        $commandName = $event->getCommand()?->getName();\n        $inputString = (string) $event->getInput();\n\n        if ($commandName) {\n            return str_replace([\"'$commandName'\", \"\\\"$commandName\\\"\"], $commandName, $inputString);\n        }\n\n        return $inputString;\n    }\n}\n\n\n--- File Index 39: DataCollector/CommandDataCollector.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\DataCollector;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Debug\\CliRequest;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\SignalRegistry\\SignalMap;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\DataCollector\\DataCollector;\nuse Symfony\\Component\\VarDumper\\Cloner\\Data;\n\n/**\n * @internal\n *\n * @author Jules Pietri <jules@heahprod.com>\n */\nfinal class CommandDataCollector extends DataCollector\n{\n    public function collect(Request $request, Response $response, ?\\Throwable $exception = null): void\n    {\n        if (!$request instanceof CliRequest) {\n            return;\n        }\n\n        $command = $request->command;\n        $application = $command->getApplication();\n\n        $this->data = [\n            'command' => $this->cloneVar($command->command),\n            'exit_code' => $command->exitCode,\n            'interrupted_by_signal' => $command->interruptedBySignal,\n            'duration' => $command->duration,\n            'max_memory_usage' => $command->maxMemoryUsage,\n            'verbosity_level' => match ($command->output->getVerbosity()) {\n                OutputInterface::VERBOSITY_QUIET => 'quiet',\n                OutputInterface::VERBOSITY_NORMAL => 'normal',\n                OutputInterface::VERBOSITY_VERBOSE => 'verbose',\n                OutputInterface::VERBOSITY_VERY_VERBOSE => 'very verbose',\n                OutputInterface::VERBOSITY_DEBUG => 'debug',\n            },\n            'interactive' => $command->isInteractive,\n            'validate_input' => !$command->ignoreValidation,\n            'enabled' => $command->isEnabled(),\n            'visible' => !$command->isHidden(),\n            'input' => $this->cloneVar($command->input),\n            'output' => $this->cloneVar($command->output),\n            'interactive_inputs' => array_map($this->cloneVar(...), $command->interactiveInputs),\n            'signalable' => $command->getSubscribedSignals(),\n            'handled_signals' => $command->handledSignals,\n            'helper_set' => array_map($this->cloneVar(...), iterator_to_array($command->getHelperSet())),\n        ];\n\n        $baseDefinition = $application->getDefinition();\n\n        foreach ($command->arguments as $argName => $argValue) {\n            if ($baseDefinition->hasArgument($argName)) {\n                $this->data['application_inputs'][$argName] = $this->cloneVar($argValue);\n            } else {\n                $this->data['arguments'][$argName] = $this->cloneVar($argValue);\n            }\n        }\n\n        foreach ($command->options as $optName => $optValue) {\n            if ($baseDefinition->hasOption($optName)) {\n                $this->data['application_inputs']['--'.$optName] = $this->cloneVar($optValue);\n            } else {\n                $this->data['options'][$optName] = $this->cloneVar($optValue);\n            }\n        }\n    }\n\n    public function getName(): string\n    {\n        return 'command';\n    }\n\n    /**\n     * @return array{\n     *     class?: class-string,\n     *     executor?: string,\n     *     file: string,\n     *     line: int,\n     * }\n     */\n    public function getCommand(): array\n    {\n        $class = $this->data['command']->getType();\n        $r = new \\ReflectionMethod($class, 'execute');\n\n        if (Command::class !== $r->getDeclaringClass()) {\n            return [\n                'executor' => $class.'::'.$r->name,\n                'file' => $r->getFileName(),\n                'line' => $r->getStartLine(),\n            ];\n        }\n\n        $r = new \\ReflectionClass($class);\n\n        return [\n            'class' => $class,\n            'file' => $r->getFileName(),\n            'line' => $r->getStartLine(),\n        ];\n    }\n\n    public function getInterruptedBySignal(): ?string\n    {\n        if (isset($this->data['interrupted_by_signal'])) {\n            return \\sprintf('%s (%d)', SignalMap::getSignalName($this->data['interrupted_by_signal']), $this->data['interrupted_by_signal']);\n        }\n\n        return null;\n    }\n\n    public function getDuration(): string\n    {\n        return $this->data['duration'];\n    }\n\n    public function getMaxMemoryUsage(): string\n    {\n        return $this->data['max_memory_usage'];\n    }\n\n    public function getVerbosityLevel(): string\n    {\n        return $this->data['verbosity_level'];\n    }\n\n    public function getInteractive(): bool\n    {\n        return $this->data['interactive'];\n    }\n\n    public function getValidateInput(): bool\n    {\n        return $this->data['validate_input'];\n    }\n\n    public function getEnabled(): bool\n    {\n        return $this->data['enabled'];\n    }\n\n    public function getVisible(): bool\n    {\n        return $this->data['visible'];\n    }\n\n    public function getInput(): Data\n    {\n        return $this->data['input'];\n    }\n\n    public function getOutput(): Data\n    {\n        return $this->data['output'];\n    }\n\n    /**\n     * @return Data[]\n     */\n    public function getArguments(): array\n    {\n        return $this->data['arguments'] ?? [];\n    }\n\n    /**\n     * @return Data[]\n     */\n    public function getOptions(): array\n    {\n        return $this->data['options'] ?? [];\n    }\n\n    /**\n     * @return Data[]\n     */\n    public function getApplicationInputs(): array\n    {\n        return $this->data['application_inputs'] ?? [];\n    }\n\n    /**\n     * @return Data[]\n     */\n    public function getInteractiveInputs(): array\n    {\n        return $this->data['interactive_inputs'] ?? [];\n    }\n\n    public function getSignalable(): array\n    {\n        return array_map(\n            static fn (int $signal): string => \\sprintf('%s (%d)', SignalMap::getSignalName($signal), $signal),\n            $this->data['signalable']\n        );\n    }\n\n    public function getHandledSignals(): array\n    {\n        $keys = array_map(\n            static fn (int $signal): string => \\sprintf('%s (%d)', SignalMap::getSignalName($signal), $signal),\n            array_keys($this->data['handled_signals'])\n        );\n\n        return array_combine($keys, array_values($this->data['handled_signals']));\n    }\n\n    /**\n     * @return Data[]\n     */\n    public function getHelperSet(): array\n    {\n        return $this->data['helper_set'] ?? [];\n    }\n\n    public function reset(): void\n    {\n        $this->data = [];\n    }\n}\n\n\n--- File Index 40: Output/ConsoleSectionOutput.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\nuse Symfony\\Component\\Console\\Helper\\Helper;\nuse Symfony\\Component\\Console\\Terminal;\n\n/**\n * @author Pierre du Plessis <pdples@gmail.com>\n * @author Gabriel Ostroluck\u00fd <gabriel.ostrolucky@gmail.com>\n */\nclass ConsoleSectionOutput extends StreamOutput\n{\n    private array $content = [];\n    private int $lines = 0;\n    private array $sections;\n    private Terminal $terminal;\n    private int $maxHeight = 0;\n\n    /**\n     * @param resource               $stream\n     * @param ConsoleSectionOutput[] $sections\n     */\n    public function __construct($stream, array &$sections, int $verbosity, bool $decorated, OutputFormatterInterface $formatter)\n    {\n        parent::__construct($stream, $verbosity, $decorated, $formatter);\n        array_unshift($sections, $this);\n        $this->sections = &$sections;\n        $this->terminal = new Terminal();\n    }\n\n    /**\n     * Defines a maximum number of lines for this section.\n     *\n     * When more lines are added, the section will automatically scroll to the\n     * end (i.e. remove the first lines to comply with the max height).\n     */\n    public function setMaxHeight(int $maxHeight): void\n    {\n        // when changing max height, clear output of current section and redraw again with the new height\n        $previousMaxHeight = $this->maxHeight;\n        $this->maxHeight = $maxHeight;\n        $existingContent = $this->popStreamContentUntilCurrentSection($previousMaxHeight ? min($previousMaxHeight, $this->lines) : $this->lines);\n\n        parent::doWrite($this->getVisibleContent(), false);\n        parent::doWrite($existingContent, false);\n    }\n\n    /**\n     * Clears previous output for this section.\n     *\n     * @param int $lines Number of lines to clear. If null, then the entire output of this section is cleared\n     */\n    public function clear(?int $lines = null): void\n    {\n        if (!$this->content || !$this->isDecorated()) {\n            return;\n        }\n\n        if ($lines) {\n            array_splice($this->content, -$lines);\n        } else {\n            $lines = $this->lines;\n            $this->content = [];\n        }\n\n        $this->lines -= $lines;\n\n        parent::doWrite($this->popStreamContentUntilCurrentSection($this->maxHeight ? min($this->maxHeight, $lines) : $lines), false);\n    }\n\n    /**\n     * Overwrites the previous output with a new message.\n     */\n    public function overwrite(string|iterable $message): void\n    {\n        $this->clear();\n        $this->writeln($message);\n    }\n\n    public function getContent(): string\n    {\n        return implode('', $this->content);\n    }\n\n    public function getVisibleContent(): string\n    {\n        if (0 === $this->maxHeight) {\n            return $this->getContent();\n        }\n\n        return implode('', \\array_slice($this->content, -$this->maxHeight));\n    }\n\n    /**\n     * @internal\n     */\n    public function addContent(string $input, bool $newline = true): int\n    {\n        $width = $this->terminal->getWidth();\n        $lines = explode(\\PHP_EOL, $input);\n        $linesAdded = 0;\n        $count = \\count($lines) - 1;\n        foreach ($lines as $i => $lineContent) {\n            // re-add the line break (that has been removed in the above `explode()` for\n            // - every line that is not the last line\n            // - if $newline is required, also add it to the last line\n            if ($i < $count || $newline) {\n                $lineContent .= \\PHP_EOL;\n            }\n\n            // skip line if there is no text (or newline for that matter)\n            if ('' === $lineContent) {\n                continue;\n            }\n\n            // For the first line, check if the previous line (last entry of `$this->content`)\n            // needs to be continued (i.e. does not end with a line break).\n            if (0 === $i\n                && (false !== $lastLine = end($this->content))\n                && !str_ends_with($lastLine, \\PHP_EOL)\n            ) {\n                // deduct the line count of the previous line\n                $this->lines -= (int) ceil($this->getDisplayLength($lastLine) / $width) ?: 1;\n                // concatenate previous and new line\n                $lineContent = $lastLine.$lineContent;\n                // replace last entry of `$this->content` with the new expanded line\n                array_splice($this->content, -1, 1, $lineContent);\n            } else {\n                // otherwise just add the new content\n                $this->content[] = $lineContent;\n            }\n\n            $linesAdded += (int) ceil($this->getDisplayLength($lineContent) / $width) ?: 1;\n        }\n\n        $this->lines += $linesAdded;\n\n        return $linesAdded;\n    }\n\n    /**\n     * @internal\n     */\n    public function addNewLineOfInputSubmit(): void\n    {\n        $this->content[] = \\PHP_EOL;\n        ++$this->lines;\n    }\n\n    protected function doWrite(string $message, bool $newline): void\n    {\n        // Simulate newline behavior for consistent output formatting, avoiding extra logic\n        if (!$newline && str_ends_with($message, \\PHP_EOL)) {\n            $message = substr($message, 0, -\\strlen(\\PHP_EOL));\n            $newline = true;\n        }\n\n        if (!$this->isDecorated()) {\n            parent::doWrite($message, $newline);\n\n            return;\n        }\n\n        // Check if the previous line (last entry of `$this->content`) needs to be continued\n        // (i.e. does not end with a line break). In which case, it needs to be erased first.\n        $linesToClear = $deleteLastLine = ($lastLine = end($this->content) ?: '') && !str_ends_with($lastLine, \\PHP_EOL) ? 1 : 0;\n\n        $linesAdded = $this->addContent($message, $newline);\n\n        if ($lineOverflow = $this->maxHeight > 0 && $this->lines > $this->maxHeight) {\n            // on overflow, clear the whole section and redraw again (to remove the first lines)\n            $linesToClear = $this->maxHeight;\n        }\n\n        $erasedContent = $this->popStreamContentUntilCurrentSection($linesToClear);\n\n        if ($lineOverflow) {\n            // redraw existing lines of the section\n            $previousLinesOfSection = \\array_slice($this->content, $this->lines - $this->maxHeight, $this->maxHeight - $linesAdded);\n            parent::doWrite(implode('', $previousLinesOfSection), false);\n        }\n\n        // if the last line was removed, re-print its content together with the new content.\n        // otherwise, just print the new content.\n        parent::doWrite($deleteLastLine ? $lastLine.$message : $message, true);\n        parent::doWrite($erasedContent, false);\n    }\n\n    /**\n     * At initial stage, cursor is at the end of stream output. This method makes cursor crawl upwards until it hits\n     * current section. Then it erases content it crawled through. Optionally, it erases part of current section too.\n     */\n    private function popStreamContentUntilCurrentSection(int $numberOfLinesToClearFromCurrentSection = 0): string\n    {\n        $numberOfLinesToClear = $numberOfLinesToClearFromCurrentSection;\n        $erasedContent = [];\n\n        foreach ($this->sections as $section) {\n            if ($section === $this) {\n                break;\n            }\n\n            $numberOfLinesToClear += $section->maxHeight ? min($section->lines, $section->maxHeight) : $section->lines;\n            if ('' !== $sectionContent = $section->getVisibleContent()) {\n                if (!str_ends_with($sectionContent, \\PHP_EOL)) {\n                    $sectionContent .= \\PHP_EOL;\n                }\n                $erasedContent[] = $sectionContent;\n            }\n        }\n\n        if ($numberOfLinesToClear > 0) {\n            // move cursor up n lines\n            parent::doWrite(\\sprintf(\"\\x1b[%dA\", $numberOfLinesToClear), false);\n            // erase to end of screen\n            parent::doWrite(\"\\x1b[0J\", false);\n        }\n\n        return implode('', array_reverse($erasedContent));\n    }\n\n    private function getDisplayLength(string $text): int\n    {\n        return Helper::width(Helper::removeDecoration($this->getFormatter(), str_replace(\"\\t\", '        ', $text)));\n    }\n}\n\n\n--- File Index 41: Output/ConsoleOutput.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\n\n/**\n * ConsoleOutput is the default class for all CLI output. It uses STDOUT and STDERR.\n *\n * This class is a convenient wrapper around `StreamOutput` for both STDOUT and STDERR.\n *\n *     $output = new ConsoleOutput();\n *\n * This is equivalent to:\n *\n *     $output = new StreamOutput(fopen('php://stdout', 'w'));\n *     $stdErr = new StreamOutput(fopen('php://stderr', 'w'));\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass ConsoleOutput extends StreamOutput implements ConsoleOutputInterface\n{\n    private OutputInterface $stderr;\n    private array $consoleSectionOutputs = [];\n\n    /**\n     * @param int                           $verbosity The verbosity level (one of the VERBOSITY constants in OutputInterface)\n     * @param bool|null                     $decorated Whether to decorate messages (null for auto-guessing)\n     * @param OutputFormatterInterface|null $formatter Output formatter instance (null to use default OutputFormatter)\n     */\n    public function __construct(int $verbosity = self::VERBOSITY_NORMAL, ?bool $decorated = null, ?OutputFormatterInterface $formatter = null)\n    {\n        parent::__construct($this->openOutputStream(), $verbosity, $decorated, $formatter);\n\n        if (null === $formatter) {\n            // for BC reasons, stdErr has it own Formatter only when user don't inject a specific formatter.\n            $this->stderr = new StreamOutput($this->openErrorStream(), $verbosity, $decorated);\n\n            return;\n        }\n\n        $actualDecorated = $this->isDecorated();\n        $this->stderr = new StreamOutput($this->openErrorStream(), $verbosity, $decorated, $this->getFormatter());\n\n        if (null === $decorated) {\n            $this->setDecorated($actualDecorated && $this->stderr->isDecorated());\n        }\n    }\n\n    /**\n     * Creates a new output section.\n     */\n    public function section(): ConsoleSectionOutput\n    {\n        return new ConsoleSectionOutput($this->getStream(), $this->consoleSectionOutputs, $this->getVerbosity(), $this->isDecorated(), $this->getFormatter());\n    }\n\n    public function setDecorated(bool $decorated): void\n    {\n        parent::setDecorated($decorated);\n        $this->stderr->setDecorated($decorated);\n    }\n\n    public function setFormatter(OutputFormatterInterface $formatter): void\n    {\n        parent::setFormatter($formatter);\n        $this->stderr->setFormatter($formatter);\n    }\n\n    public function setVerbosity(int $level): void\n    {\n        parent::setVerbosity($level);\n        $this->stderr->setVerbosity($level);\n    }\n\n    public function getErrorOutput(): OutputInterface\n    {\n        return $this->stderr;\n    }\n\n    public function setErrorOutput(OutputInterface $error): void\n    {\n        $this->stderr = $error;\n    }\n\n    /**\n     * Returns true if current environment supports writing console output to\n     * STDOUT.\n     */\n    protected function hasStdoutSupport(): bool\n    {\n        return false === $this->isRunningOS400();\n    }\n\n    /**\n     * Returns true if current environment supports writing console output to\n     * STDERR.\n     */\n    protected function hasStderrSupport(): bool\n    {\n        return false === $this->isRunningOS400();\n    }\n\n    /**\n     * Checks if current executing environment is IBM iSeries (OS400), which\n     * doesn't properly convert character-encodings between ASCII to EBCDIC.\n     */\n    private function isRunningOS400(): bool\n    {\n        $checks = [\n            \\function_exists('php_uname') ? php_uname('s') : '',\n            getenv('OSTYPE'),\n            \\PHP_OS,\n        ];\n\n        return false !== stripos(implode(';', $checks), 'OS400');\n    }\n\n    /**\n     * @return resource\n     */\n    private function openOutputStream()\n    {\n        if (!$this->hasStdoutSupport()) {\n            return fopen('php://output', 'w');\n        }\n\n        // Use STDOUT when possible to prevent from opening too many file descriptors\n        return \\defined('STDOUT') ? \\STDOUT : (@fopen('php://stdout', 'w') ?: fopen('php://output', 'w'));\n    }\n\n    /**\n     * @return resource\n     */\n    private function openErrorStream()\n    {\n        if (!$this->hasStderrSupport()) {\n            return fopen('php://output', 'w');\n        }\n\n        // Use STDERR when possible to prevent from opening too many file descriptors\n        return \\defined('STDERR') ? \\STDERR : (@fopen('php://stderr', 'w') ?: fopen('php://output', 'w'));\n    }\n}\n\n\n--- File Index 42: Output/AnsiColorMode.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\n\n/**\n * @author Fabien Potencier <fabien@symfony.com>\n * @author Julien Boudry <julien@condorcet.vote>\n */\nenum AnsiColorMode\n{\n    /*\n     * Classical 4-bit Ansi colors, including 8 classical colors and 8 bright color. Output syntax is \"ESC[${foreGroundColorcode};${backGroundColorcode}m\"\n     * Must be compatible with all terminals and it's the minimal version supported.\n     */\n    case Ansi4;\n\n    /*\n     * 8-bit Ansi colors (240 different colors + 16 duplicate color codes, ensuring backward compatibility).\n     * Output syntax is: \"ESC[38;5;${foreGroundColorcode};48;5;${backGroundColorcode}m\"\n     * Should be compatible with most terminals.\n     */\n    case Ansi8;\n\n    /*\n     * 24-bit Ansi colors (RGB).\n     * Output syntax is: \"ESC[38;2;${foreGroundColorcodeRed};${foreGroundColorcodeGreen};${foreGroundColorcodeBlue};48;2;${backGroundColorcodeRed};${backGroundColorcodeGreen};${backGroundColorcodeBlue}m\"\n     * May be compatible with many modern terminals.\n     */\n    case Ansi24;\n\n    /**\n     * Converts an RGB hexadecimal color to the corresponding Ansi code.\n     */\n    public function convertFromHexToAnsiColorCode(string $hexColor): string\n    {\n        $hexColor = str_replace('#', '', $hexColor);\n\n        if (3 === \\strlen($hexColor)) {\n            $hexColor = $hexColor[0].$hexColor[0].$hexColor[1].$hexColor[1].$hexColor[2].$hexColor[2];\n        }\n\n        if (6 !== \\strlen($hexColor)) {\n            throw new InvalidArgumentException(\\sprintf('Invalid \"#%s\" color.', $hexColor));\n        }\n\n        $color = hexdec($hexColor);\n\n        $r = ($color >> 16) & 255;\n        $g = ($color >> 8) & 255;\n        $b = $color & 255;\n\n        return match ($this) {\n            self::Ansi4 => (string) $this->convertFromRGB($r, $g, $b),\n            self::Ansi8 => '8;5;'.$this->convertFromRGB($r, $g, $b),\n            self::Ansi24 => \\sprintf('8;2;%d;%d;%d', $r, $g, $b),\n        };\n    }\n\n    private function convertFromRGB(int $r, int $g, int $b): int\n    {\n        return match ($this) {\n            self::Ansi4 => $this->degradeHexColorToAnsi4($r, $g, $b),\n            self::Ansi8 => $this->degradeHexColorToAnsi8($r, $g, $b),\n            default => throw new InvalidArgumentException(\"RGB cannot be converted to {$this->name}.\"),\n        };\n    }\n\n    private function degradeHexColorToAnsi4(int $r, int $g, int $b): int\n    {\n        return round($b / 255) << 2 | (round($g / 255) << 1) | round($r / 255);\n    }\n\n    /**\n     * Inspired from https://github.com/ajalt/colormath/blob/e464e0da1b014976736cf97250063248fc77b8e7/colormath/src/commonMain/kotlin/com/github/ajalt/colormath/model/Ansi256.kt code (MIT license).\n     */\n    private function degradeHexColorToAnsi8(int $r, int $g, int $b): int\n    {\n        if ($r === $g && $g === $b) {\n            if ($r < 8) {\n                return 16;\n            }\n\n            if ($r > 248) {\n                return 231;\n            }\n\n            return (int) round(($r - 8) / 247 * 24) + 232;\n        }\n\n        return 16 +\n            (36 * (int) round($r / 255 * 5)) +\n            (6 * (int) round($g / 255 * 5)) +\n            (int) round($b / 255 * 5);\n    }\n}\n\n\n--- File Index 43: Output/OutputInterface.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\n\n/**\n * OutputInterface is the interface implemented by all Output classes.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n *\n * @method bool isSilent()\n */\ninterface OutputInterface\n{\n    public const VERBOSITY_SILENT = 8;\n    public const VERBOSITY_QUIET = 16;\n    public const VERBOSITY_NORMAL = 32;\n    public const VERBOSITY_VERBOSE = 64;\n    public const VERBOSITY_VERY_VERBOSE = 128;\n    public const VERBOSITY_DEBUG = 256;\n\n    public const OUTPUT_NORMAL = 1;\n    public const OUTPUT_RAW = 2;\n    public const OUTPUT_PLAIN = 4;\n\n    /**\n     * Writes a message to the output.\n     *\n     * @param bool $newline Whether to add a newline\n     * @param int  $options A bitmask of options (one of the OUTPUT or VERBOSITY constants),\n     *                      0 is considered the same as self::OUTPUT_NORMAL | self::VERBOSITY_NORMAL\n     */\n    public function write(string|iterable $messages, bool $newline = false, int $options = 0): void;\n\n    /**\n     * Writes a message to the output and adds a newline at the end.\n     *\n     * @param int $options A bitmask of options (one of the OUTPUT or VERBOSITY constants),\n     *                     0 is considered the same as self::OUTPUT_NORMAL | self::VERBOSITY_NORMAL\n     */\n    public function writeln(string|iterable $messages, int $options = 0): void;\n\n    /**\n     * Sets the verbosity of the output.\n     *\n     * @param self::VERBOSITY_* $level\n     */\n    public function setVerbosity(int $level): void;\n\n    /**\n     * Gets the current verbosity of the output.\n     *\n     * @return self::VERBOSITY_*\n     */\n    public function getVerbosity(): int;\n\n    /**\n     * Returns whether verbosity is quiet (-q).\n     */\n    public function isQuiet(): bool;\n\n    /**\n     * Returns whether verbosity is verbose (-v).\n     */\n    public function isVerbose(): bool;\n\n    /**\n     * Returns whether verbosity is very verbose (-vv).\n     */\n    public function isVeryVerbose(): bool;\n\n    /**\n     * Returns whether verbosity is debug (-vvv).\n     */\n    public function isDebug(): bool;\n\n    /**\n     * Sets the decorated flag.\n     */\n    public function setDecorated(bool $decorated): void;\n\n    /**\n     * Gets the decorated flag.\n     */\n    public function isDecorated(): bool;\n\n    public function setFormatter(OutputFormatterInterface $formatter): void;\n\n    /**\n     * Returns current output formatter instance.\n     */\n    public function getFormatter(): OutputFormatterInterface;\n}\n\n\n--- File Index 44: Output/ConsoleOutputInterface.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Output;\n\n/**\n * ConsoleOutputInterface is the interface implemented by ConsoleOutput class.\n * This adds information about stderr and section output stream.\n *\n * @author Dariusz G\u00f3recki <darek.krk@gmail.com>\n */\ninterface ConsoleOutputInterface extends OutputInterface\n{\n    /**\n     * Gets the OutputInterface for errors.\n     */\n    public function getErrorOutput(): OutputInterface;\n\n    public function setErrorOutput(OutputInterface $error): void;\n\n    public function section(): ConsoleSectionOutput;\n}\n\n\n--- File Index 45: Output/StreamOutput.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\n\n/**\n * StreamOutput writes the output to a given stream.\n *\n * Usage:\n *\n *     $output = new StreamOutput(fopen('php://stdout', 'w'));\n *\n * As `StreamOutput` can use any stream, you can also use a file:\n *\n *     $output = new StreamOutput(fopen('/path/to/output.log', 'a', false));\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass StreamOutput extends Output\n{\n    /** @var resource */\n    private $stream;\n\n    /**\n     * @param resource                      $stream    A stream resource\n     * @param int                           $verbosity The verbosity level (one of the VERBOSITY constants in OutputInterface)\n     * @param bool|null                     $decorated Whether to decorate messages (null for auto-guessing)\n     * @param OutputFormatterInterface|null $formatter Output formatter instance (null to use default OutputFormatter)\n     *\n     * @throws InvalidArgumentException When first argument is not a real stream\n     */\n    public function __construct($stream, int $verbosity = self::VERBOSITY_NORMAL, ?bool $decorated = null, ?OutputFormatterInterface $formatter = null)\n    {\n        if (!\\is_resource($stream) || 'stream' !== get_resource_type($stream)) {\n            throw new InvalidArgumentException('The StreamOutput class needs a stream as its first argument.');\n        }\n\n        $this->stream = $stream;\n\n        $decorated ??= $this->hasColorSupport();\n\n        parent::__construct($verbosity, $decorated, $formatter);\n    }\n\n    /**\n     * Gets the stream attached to this StreamOutput instance.\n     *\n     * @return resource\n     */\n    public function getStream()\n    {\n        return $this->stream;\n    }\n\n    protected function doWrite(string $message, bool $newline): void\n    {\n        if ($newline) {\n            $message .= \\PHP_EOL;\n        }\n\n        @fwrite($this->stream, $message);\n\n        fflush($this->stream);\n    }\n\n    /**\n     * Returns true if the stream supports colorization.\n     *\n     * Colorization is disabled if not supported by the stream:\n     *\n     * This is tricky on Windows, because Cygwin, Msys2 etc emulate pseudo\n     * terminals via named pipes, so we can only check the environment.\n     *\n     * Reference: Composer\\XdebugHandler\\Process::supportsColor\n     * https://github.com/composer/xdebug-handler\n     *\n     * @return bool true if the stream supports colorization, false otherwise\n     */\n    protected function hasColorSupport(): bool\n    {\n        // Follow https://no-color.org/\n        if ('' !== (($_SERVER['NO_COLOR'] ?? getenv('NO_COLOR'))[0] ?? '')) {\n            return false;\n        }\n\n        // Follow https://force-color.org/\n        if ('' !== (($_SERVER['FORCE_COLOR'] ?? getenv('FORCE_COLOR'))[0] ?? '')) {\n            return true;\n        }\n\n        // Detect msysgit/mingw and assume this is a tty because detection\n        // does not work correctly, see https://github.com/composer/composer/issues/9690\n        if (!@stream_isatty($this->stream) && !\\in_array(strtoupper((string) getenv('MSYSTEM')), ['MINGW32', 'MINGW64'], true)) {\n            return false;\n        }\n\n        if ('\\\\' === \\DIRECTORY_SEPARATOR && @sapi_windows_vt100_support($this->stream)) {\n            return true;\n        }\n\n        if ('Hyper' === getenv('TERM_PROGRAM')\n            || false !== getenv('COLORTERM')\n            || false !== getenv('ANSICON')\n            || 'ON' === getenv('ConEmuANSI')\n        ) {\n            return true;\n        }\n\n        if ('dumb' === $term = (string) getenv('TERM')) {\n            return false;\n        }\n\n        // See https://github.com/chalk/supports-color/blob/d4f413efaf8da045c5ab440ed418ef02dbb28bf1/index.js#L157\n        return preg_match('/^((screen|xterm|vt100|vt220|putty|rxvt|ansi|cygwin|linux).*)|(.*-256(color)?(-bce)?)$/', $term);\n    }\n}\n\n\n--- File Index 46: Output/TrimmedBufferOutput.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\n\n/**\n * A BufferedOutput that keeps only the last N chars.\n *\n * @author J\u00e9r\u00e9my Deruss\u00e9 <jeremy@derusse.com>\n */\nclass TrimmedBufferOutput extends Output\n{\n    private int $maxLength;\n    private string $buffer = '';\n\n    public function __construct(int $maxLength, ?int $verbosity = self::VERBOSITY_NORMAL, bool $decorated = false, ?OutputFormatterInterface $formatter = null)\n    {\n        if ($maxLength <= 0) {\n            throw new InvalidArgumentException(\\sprintf('\"%s()\" expects a strictly positive maxLength. Got %d.', __METHOD__, $maxLength));\n        }\n\n        parent::__construct($verbosity, $decorated, $formatter);\n        $this->maxLength = $maxLength;\n    }\n\n    /**\n     * Empties buffer and returns its content.\n     */\n    public function fetch(): string\n    {\n        $content = $this->buffer;\n        $this->buffer = '';\n\n        return $content;\n    }\n\n    protected function doWrite(string $message, bool $newline): void\n    {\n        $this->buffer .= $message;\n\n        if ($newline) {\n            $this->buffer .= \\PHP_EOL;\n        }\n\n        $this->buffer = substr($this->buffer, -$this->maxLength);\n    }\n}\n\n\n--- File Index 47: Output/NullOutput.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Formatter\\NullOutputFormatter;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\n\n/**\n * NullOutput suppresses all output.\n *\n *     $output = new NullOutput();\n *\n * @author Fabien Potencier <fabien@symfony.com>\n * @author Tobias Schultze <http://tobion.de>\n */\nclass NullOutput implements OutputInterface\n{\n    private NullOutputFormatter $formatter;\n\n    public function setFormatter(OutputFormatterInterface $formatter): void\n    {\n        // do nothing\n    }\n\n    public function getFormatter(): OutputFormatterInterface\n    {\n        // to comply with the interface we must return a OutputFormatterInterface\n        return $this->formatter ??= new NullOutputFormatter();\n    }\n\n    public function setDecorated(bool $decorated): void\n    {\n        // do nothing\n    }\n\n    public function isDecorated(): bool\n    {\n        return false;\n    }\n\n    public function setVerbosity(int $level): void\n    {\n        // do nothing\n    }\n\n    public function getVerbosity(): int\n    {\n        return self::VERBOSITY_SILENT;\n    }\n\n    public function isSilent(): bool\n    {\n        return true;\n    }\n\n    public function isQuiet(): bool\n    {\n        return false;\n    }\n\n    public function isVerbose(): bool\n    {\n        return false;\n    }\n\n    public function isVeryVerbose(): bool\n    {\n        return false;\n    }\n\n    public function isDebug(): bool\n    {\n        return false;\n    }\n\n    public function writeln(string|iterable $messages, int $options = self::OUTPUT_NORMAL): void\n    {\n        // do nothing\n    }\n\n    public function write(string|iterable $messages, bool $newline = false, int $options = self::OUTPUT_NORMAL): void\n    {\n        // do nothing\n    }\n}\n\n\n--- File Index 48: Output/BufferedOutput.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Output;\n\n/**\n * @author Jean-Fran\u00e7ois Simon <contact@jfsimon.fr>\n */\nclass BufferedOutput extends Output\n{\n    private string $buffer = '';\n\n    /**\n     * Empties buffer and returns its content.\n     */\n    public function fetch(): string\n    {\n        $content = $this->buffer;\n        $this->buffer = '';\n\n        return $content;\n    }\n\n    protected function doWrite(string $message, bool $newline): void\n    {\n        $this->buffer .= $message;\n\n        if ($newline) {\n            $this->buffer .= \\PHP_EOL;\n        }\n    }\n}\n\n\n--- File Index 49: Output/Output.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatter;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\n\n/**\n * Base class for output classes.\n *\n * There are six levels of verbosity:\n *\n *  * normal: no option passed (normal output)\n *  * verbose: -v (more output)\n *  * very verbose: -vv (highly extended output)\n *  * debug: -vvv (all debug output)\n *  * quiet: -q (only output errors)\n *  * silent: --silent (no output)\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nabstract class Output implements OutputInterface\n{\n    private int $verbosity;\n    private OutputFormatterInterface $formatter;\n\n    /**\n     * @param int|null                      $verbosity The verbosity level (one of the VERBOSITY constants in OutputInterface)\n     * @param bool                          $decorated Whether to decorate messages\n     * @param OutputFormatterInterface|null $formatter Output formatter instance (null to use default OutputFormatter)\n     */\n    public function __construct(?int $verbosity = self::VERBOSITY_NORMAL, bool $decorated = false, ?OutputFormatterInterface $formatter = null)\n    {\n        $this->verbosity = $verbosity ?? self::VERBOSITY_NORMAL;\n        $this->formatter = $formatter ?? new OutputFormatter();\n        $this->formatter->setDecorated($decorated);\n    }\n\n    public function setFormatter(OutputFormatterInterface $formatter): void\n    {\n        $this->formatter = $formatter;\n    }\n\n    public function getFormatter(): OutputFormatterInterface\n    {\n        return $this->formatter;\n    }\n\n    public function setDecorated(bool $decorated): void\n    {\n        $this->formatter->setDecorated($decorated);\n    }\n\n    public function isDecorated(): bool\n    {\n        return $this->formatter->isDecorated();\n    }\n\n    public function setVerbosity(int $level): void\n    {\n        $this->verbosity = $level;\n    }\n\n    public function getVerbosity(): int\n    {\n        return $this->verbosity;\n    }\n\n    public function isSilent(): bool\n    {\n        return self::VERBOSITY_SILENT === $this->verbosity;\n    }\n\n    public function isQuiet(): bool\n    {\n        return self::VERBOSITY_QUIET === $this->verbosity;\n    }\n\n    public function isVerbose(): bool\n    {\n        return self::VERBOSITY_VERBOSE <= $this->verbosity;\n    }\n\n    public function isVeryVerbose(): bool\n    {\n        return self::VERBOSITY_VERY_VERBOSE <= $this->verbosity;\n    }\n\n    public function isDebug(): bool\n    {\n        return self::VERBOSITY_DEBUG <= $this->verbosity;\n    }\n\n    public function writeln(string|iterable $messages, int $options = self::OUTPUT_NORMAL): void\n    {\n        $this->write($messages, true, $options);\n    }\n\n    public function write(string|iterable $messages, bool $newline = false, int $options = self::OUTPUT_NORMAL): void\n    {\n        if (!is_iterable($messages)) {\n            $messages = [$messages];\n        }\n\n        $types = self::OUTPUT_NORMAL | self::OUTPUT_RAW | self::OUTPUT_PLAIN;\n        $type = $types & $options ?: self::OUTPUT_NORMAL;\n\n        $verbosities = self::VERBOSITY_QUIET | self::VERBOSITY_NORMAL | self::VERBOSITY_VERBOSE | self::VERBOSITY_VERY_VERBOSE | self::VERBOSITY_DEBUG;\n        $verbosity = $verbosities & $options ?: self::VERBOSITY_NORMAL;\n\n        if ($verbosity > $this->getVerbosity()) {\n            return;\n        }\n\n        foreach ($messages as $message) {\n            switch ($type) {\n                case OutputInterface::OUTPUT_NORMAL:\n                    $message = $this->formatter->format($message);\n                    break;\n                case OutputInterface::OUTPUT_RAW:\n                    break;\n                case OutputInterface::OUTPUT_PLAIN:\n                    $message = strip_tags($this->formatter->format($message));\n                    break;\n            }\n\n            $this->doWrite($message ?? '', $newline);\n        }\n    }\n\n    /**\n     * Writes a message to the output.\n     */\n    abstract protected function doWrite(string $message, bool $newline): void;\n}\n\n\n--- File Index 50: Debug/CliRequest.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Debug;\n\nuse Symfony\\Component\\Console\\Command\\TraceableCommand;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * @internal\n */\nfinal class CliRequest extends Request\n{\n    public function __construct(\n        public readonly TraceableCommand $command,\n    ) {\n        parent::__construct(\n            attributes: ['_controller' => \\get_class($command->command), '_virtual_type' => 'command'],\n            server: $_SERVER,\n        );\n    }\n\n    // Methods below allow to populate a profile, thus enable search and filtering\n    public function getUri(): string\n    {\n        if ($this->server->has('SYMFONY_CLI_BINARY_NAME')) {\n            $binary = $this->server->get('SYMFONY_CLI_BINARY_NAME').' console';\n        } else {\n            $binary = $this->server->get('argv')[0];\n        }\n\n        return $binary.' '.$this->command->input;\n    }\n\n    public function getMethod(): string\n    {\n        return $this->command->isInteractive ? 'INTERACTIVE' : 'BATCH';\n    }\n\n    public function getResponse(): Response\n    {\n        return new class($this->command->exitCode) extends Response {\n            public function __construct(private readonly int $exitCode)\n            {\n                parent::__construct();\n            }\n\n            public function getStatusCode(): int\n            {\n                return $this->exitCode;\n            }\n        };\n    }\n\n    public function getClientIp(): string\n    {\n        $application = $this->command->getApplication();\n\n        return $application->getName().' '.$application->getVersion();\n    }\n}\n\n\n--- File Index 51: Attribute/AsCommand.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Attribute;\n\n/**\n * Service tag to autoconfigure commands.\n */\n#[\\Attribute(\\Attribute::TARGET_CLASS)]\nclass AsCommand\n{\n    /**\n     * @param string      $name        The name of the command, used when calling it (i.e. \"cache:clear\")\n     * @param string|null $description The description of the command, displayed with the help page\n     * @param string[]    $aliases     The list of aliases of the command. The command will be executed when using one of them (i.e. \"cache:clean\")\n     * @param bool        $hidden      If true, the command won't be shown when listing all the available commands, but it can still be run as any other command\n     */\n    public function __construct(\n        public string $name,\n        public ?string $description = null,\n        array $aliases = [],\n        bool $hidden = false,\n    ) {\n        if (!$hidden && !$aliases) {\n            return;\n        }\n\n        $name = explode('|', $name);\n        $name = array_merge($name, $aliases);\n\n        if ($hidden && '' !== $name[0]) {\n            array_unshift($name, '');\n        }\n\n        $this->name = implode('|', $name);\n    }\n}\n\n\n--- File Index 52: Formatter/NullOutputFormatterStyle.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Formatter;\n\n/**\n * @author Tien Xuan Vo <tien.xuan.vo@gmail.com>\n */\nfinal class NullOutputFormatterStyle implements OutputFormatterStyleInterface\n{\n    public function apply(string $text): string\n    {\n        return $text;\n    }\n\n    public function setBackground(?string $color): void\n    {\n        // do nothing\n    }\n\n    public function setForeground(?string $color): void\n    {\n        // do nothing\n    }\n\n    public function setOption(string $option): void\n    {\n        // do nothing\n    }\n\n    public function setOptions(array $options): void\n    {\n        // do nothing\n    }\n\n    public function unsetOption(string $option): void\n    {\n        // do nothing\n    }\n}\n\n\n--- File Index 53: Formatter/OutputFormatterInterface.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Formatter;\n\n/**\n * Formatter interface for console output.\n *\n * @author Konstantin Kudryashov <ever.zet@gmail.com>\n */\ninterface OutputFormatterInterface\n{\n    /**\n     * Sets the decorated flag.\n     */\n    public function setDecorated(bool $decorated): void;\n\n    /**\n     * Whether the output will decorate messages.\n     */\n    public function isDecorated(): bool;\n\n    /**\n     * Sets a new style.\n     */\n    public function setStyle(string $name, OutputFormatterStyleInterface $style): void;\n\n    /**\n     * Checks if output formatter has style with specified name.\n     */\n    public function hasStyle(string $name): bool;\n\n    /**\n     * Gets style options from style with specified name.\n     *\n     * @throws \\InvalidArgumentException When style isn't defined\n     */\n    public function getStyle(string $name): OutputFormatterStyleInterface;\n\n    /**\n     * Formats a message according to the given styles.\n     */\n    public function format(?string $message): ?string;\n}\n\n\n--- File Index 54: Formatter/OutputFormatter.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Formatter;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\n\nuse function Symfony\\Component\\String\\b;\n\n/**\n * Formatter class for console output.\n *\n * @author Konstantin Kudryashov <ever.zet@gmail.com>\n * @author Roland Franssen <franssen.roland@gmail.com>\n */\nclass OutputFormatter implements WrappableOutputFormatterInterface\n{\n    private array $styles = [];\n    private OutputFormatterStyleStack $styleStack;\n\n    public function __clone()\n    {\n        $this->styleStack = clone $this->styleStack;\n        foreach ($this->styles as $key => $value) {\n            $this->styles[$key] = clone $value;\n        }\n    }\n\n    /**\n     * Escapes \"<\" and \">\" special chars in given text.\n     */\n    public static function escape(string $text): string\n    {\n        $text = preg_replace('/([^\\\\\\\\]|^)([<>])/', '$1\\\\\\\\$2', $text);\n\n        return self::escapeTrailingBackslash($text);\n    }\n\n    /**\n     * Escapes trailing \"\\\" in given text.\n     *\n     * @internal\n     */\n    public static function escapeTrailingBackslash(string $text): string\n    {\n        if (str_ends_with($text, '\\\\')) {\n            $len = \\strlen($text);\n            $text = rtrim($text, '\\\\');\n            $text = str_replace(\"\\0\", '', $text);\n            $text .= str_repeat(\"\\0\", $len - \\strlen($text));\n        }\n\n        return $text;\n    }\n\n    /**\n     * Initializes console output formatter.\n     *\n     * @param OutputFormatterStyleInterface[] $styles Array of \"name => FormatterStyle\" instances\n     */\n    public function __construct(\n        private bool $decorated = false,\n        array $styles = [],\n    ) {\n        $this->setStyle('error', new OutputFormatterStyle('white', 'red'));\n        $this->setStyle('info', new OutputFormatterStyle('green'));\n        $this->setStyle('comment', new OutputFormatterStyle('yellow'));\n        $this->setStyle('question', new OutputFormatterStyle('black', 'cyan'));\n\n        foreach ($styles as $name => $style) {\n            $this->setStyle($name, $style);\n        }\n\n        $this->styleStack = new OutputFormatterStyleStack();\n    }\n\n    public function setDecorated(bool $decorated): void\n    {\n        $this->decorated = $decorated;\n    }\n\n    public function isDecorated(): bool\n    {\n        return $this->decorated;\n    }\n\n    public function setStyle(string $name, OutputFormatterStyleInterface $style): void\n    {\n        $this->styles[strtolower($name)] = $style;\n    }\n\n    public function hasStyle(string $name): bool\n    {\n        return isset($this->styles[strtolower($name)]);\n    }\n\n    public function getStyle(string $name): OutputFormatterStyleInterface\n    {\n        if (!$this->hasStyle($name)) {\n            throw new InvalidArgumentException(\\sprintf('Undefined style: \"%s\".', $name));\n        }\n\n        return $this->styles[strtolower($name)];\n    }\n\n    public function format(?string $message): ?string\n    {\n        return $this->formatAndWrap($message, 0);\n    }\n\n    public function formatAndWrap(?string $message, int $width): string\n    {\n        if (null === $message) {\n            return '';\n        }\n\n        $offset = 0;\n        $output = '';\n        $openTagRegex = '[a-z](?:[^\\\\\\\\<>]*+ | \\\\\\\\.)*';\n        $closeTagRegex = '[a-z][^<>]*+';\n        $currentLineLength = 0;\n        preg_match_all(\"#<(($openTagRegex) | /($closeTagRegex)?)>#ix\", $message, $matches, \\PREG_OFFSET_CAPTURE);\n        foreach ($matches[0] as $i => $match) {\n            $pos = $match[1];\n            $text = $match[0];\n\n            if (0 != $pos && '\\\\' == $message[$pos - 1]) {\n                continue;\n            }\n\n            // add the text up to the next tag\n            $output .= $this->applyCurrentStyle(substr($message, $offset, $pos - $offset), $output, $width, $currentLineLength);\n            $offset = $pos + \\strlen($text);\n\n            // opening tag?\n            if ($open = '/' !== $text[1]) {\n                $tag = $matches[1][$i][0];\n            } else {\n                $tag = $matches[3][$i][0] ?? '';\n            }\n\n            if (!$open && !$tag) {\n                // </>\n                $this->styleStack->pop();\n            } elseif (null === $style = $this->createStyleFromString($tag)) {\n                $output .= $this->applyCurrentStyle($text, $output, $width, $currentLineLength);\n            } elseif ($open) {\n                $this->styleStack->push($style);\n            } else {\n                $this->styleStack->pop($style);\n            }\n        }\n\n        $output .= $this->applyCurrentStyle(substr($message, $offset), $output, $width, $currentLineLength);\n\n        return strtr($output, [\"\\0\" => '\\\\', '\\\\<' => '<', '\\\\>' => '>']);\n    }\n\n    public function getStyleStack(): OutputFormatterStyleStack\n    {\n        return $this->styleStack;\n    }\n\n    /**\n     * Tries to create new style instance from string.\n     */\n    private function createStyleFromString(string $string): ?OutputFormatterStyleInterface\n    {\n        if (isset($this->styles[$string])) {\n            return $this->styles[$string];\n        }\n\n        if (!preg_match_all('/([^=]+)=([^;]+)(;|$)/', $string, $matches, \\PREG_SET_ORDER)) {\n            return null;\n        }\n\n        $style = new OutputFormatterStyle();\n        foreach ($matches as $match) {\n            array_shift($match);\n            $match[0] = strtolower($match[0]);\n\n            if ('fg' == $match[0]) {\n                $style->setForeground(strtolower($match[1]));\n            } elseif ('bg' == $match[0]) {\n                $style->setBackground(strtolower($match[1]));\n            } elseif ('href' === $match[0]) {\n                $url = preg_replace('{\\\\\\\\([<>])}', '$1', $match[1]);\n                $style->setHref($url);\n            } elseif ('options' === $match[0]) {\n                preg_match_all('([^,;]+)', strtolower($match[1]), $options);\n                $options = array_shift($options);\n                foreach ($options as $option) {\n                    $style->setOption($option);\n                }\n            } else {\n                return null;\n            }\n        }\n\n        return $style;\n    }\n\n    /**\n     * Applies current style from stack to text, if must be applied.\n     */\n    private function applyCurrentStyle(string $text, string $current, int $width, int &$currentLineLength): string\n    {\n        if ('' === $text) {\n            return '';\n        }\n\n        if (!$width) {\n            return $this->isDecorated() ? $this->styleStack->getCurrent()->apply($text) : $text;\n        }\n\n        if (!$currentLineLength && '' !== $current) {\n            $text = ltrim($text);\n        }\n\n        if ($currentLineLength) {\n            $prefix = substr($text, 0, $i = $width - $currentLineLength).\"\\n\";\n            $text = substr($text, $i);\n        } else {\n            $prefix = '';\n        }\n\n        preg_match('~(\\\\n)$~', $text, $matches);\n        $text = $prefix.$this->addLineBreaks($text, $width);\n        $text = rtrim($text, \"\\n\").($matches[1] ?? '');\n\n        if (!$currentLineLength && '' !== $current && !str_ends_with($current, \"\\n\")) {\n            $text = \"\\n\".$text;\n        }\n\n        $lines = explode(\"\\n\", $text);\n\n        foreach ($lines as $line) {\n            $currentLineLength += \\strlen($line);\n            if ($width <= $currentLineLength) {\n                $currentLineLength = 0;\n            }\n        }\n\n        if ($this->isDecorated()) {\n            foreach ($lines as $i => $line) {\n                $lines[$i] = $this->styleStack->getCurrent()->apply($line);\n            }\n        }\n\n        return implode(\"\\n\", $lines);\n    }\n\n    private function addLineBreaks(string $text, int $width): string\n    {\n        $encoding = mb_detect_encoding($text, null, true) ?: 'UTF-8';\n\n        return b($text)->toCodePointString($encoding)->wordwrap($width, \"\\n\", true)->toByteString($encoding);\n    }\n}\n\n\n--- File Index 55: Formatter/WrappableOutputFormatterInterface.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Formatter;\n\n/**\n * Formatter interface for console output that supports word wrapping.\n *\n * @author Roland Franssen <franssen.roland@gmail.com>\n */\ninterface WrappableOutputFormatterInterface extends OutputFormatterInterface\n{\n    /**\n     * Formats a message according to the given styles, wrapping at `$width` (0 means no wrapping).\n     */\n    public function formatAndWrap(?string $message, int $width): string;\n}\n\n\n--- File Index 56: Formatter/OutputFormatterStyleStack.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Formatter;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Contracts\\Service\\ResetInterface;\n\n/**\n * @author Jean-Fran\u00e7ois Simon <contact@jfsimon.fr>\n */\nclass OutputFormatterStyleStack implements ResetInterface\n{\n    /**\n     * @var OutputFormatterStyleInterface[]\n     */\n    private array $styles = [];\n\n    private OutputFormatterStyleInterface $emptyStyle;\n\n    public function __construct(?OutputFormatterStyleInterface $emptyStyle = null)\n    {\n        $this->emptyStyle = $emptyStyle ?? new OutputFormatterStyle();\n        $this->reset();\n    }\n\n    /**\n     * Resets stack (ie. empty internal arrays).\n     */\n    public function reset(): void\n    {\n        $this->styles = [];\n    }\n\n    /**\n     * Pushes a style in the stack.\n     */\n    public function push(OutputFormatterStyleInterface $style): void\n    {\n        $this->styles[] = $style;\n    }\n\n    /**\n     * Pops a style from the stack.\n     *\n     * @throws InvalidArgumentException When style tags incorrectly nested\n     */\n    public function pop(?OutputFormatterStyleInterface $style = null): OutputFormatterStyleInterface\n    {\n        if (!$this->styles) {\n            return $this->emptyStyle;\n        }\n\n        if (null === $style) {\n            return array_pop($this->styles);\n        }\n\n        foreach (array_reverse($this->styles, true) as $index => $stackedStyle) {\n            if ($style->apply('') === $stackedStyle->apply('')) {\n                $this->styles = \\array_slice($this->styles, 0, $index);\n\n                return $stackedStyle;\n            }\n        }\n\n        throw new InvalidArgumentException('Incorrectly nested style tag found.');\n    }\n\n    /**\n     * Computes current style with stacks top codes.\n     */\n    public function getCurrent(): OutputFormatterStyleInterface\n    {\n        if (!$this->styles) {\n            return $this->emptyStyle;\n        }\n\n        return $this->styles[\\count($this->styles) - 1];\n    }\n\n    /**\n     * @return $this\n     */\n    public function setEmptyStyle(OutputFormatterStyleInterface $emptyStyle): static\n    {\n        $this->emptyStyle = $emptyStyle;\n\n        return $this;\n    }\n\n    public function getEmptyStyle(): OutputFormatterStyleInterface\n    {\n        return $this->emptyStyle;\n    }\n}\n\n\n--- File Index 57: Formatter/OutputFormatterStyleInterface.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Formatter;\n\n/**\n * Formatter style interface for defining styles.\n *\n * @author Konstantin Kudryashov <ever.zet@gmail.com>\n */\ninterface OutputFormatterStyleInterface\n{\n    /**\n     * Sets style foreground color.\n     */\n    public function setForeground(?string $color): void;\n\n    /**\n     * Sets style background color.\n     */\n    public function setBackground(?string $color): void;\n\n    /**\n     * Sets some specific style option.\n     */\n    public function setOption(string $option): void;\n\n    /**\n     * Unsets some specific style option.\n     */\n    public function unsetOption(string $option): void;\n\n    /**\n     * Sets multiple style options at once.\n     */\n    public function setOptions(array $options): void;\n\n    /**\n     * Applies the style to a given text.\n     */\n    public function apply(string $text): string;\n}\n\n\n--- File Index 58: Formatter/NullOutputFormatter.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Formatter;\n\n/**\n * @author Tien Xuan Vo <tien.xuan.vo@gmail.com>\n */\nfinal class NullOutputFormatter implements OutputFormatterInterface\n{\n    private NullOutputFormatterStyle $style;\n\n    public function format(?string $message): ?string\n    {\n        return null;\n    }\n\n    public function getStyle(string $name): OutputFormatterStyleInterface\n    {\n        // to comply with the interface we must return a OutputFormatterStyleInterface\n        return $this->style ??= new NullOutputFormatterStyle();\n    }\n\n    public function hasStyle(string $name): bool\n    {\n        return false;\n    }\n\n    public function isDecorated(): bool\n    {\n        return false;\n    }\n\n    public function setDecorated(bool $decorated): void\n    {\n        // do nothing\n    }\n\n    public function setStyle(string $name, OutputFormatterStyleInterface $style): void\n    {\n        // do nothing\n    }\n}\n\n\n--- File Index 59: Formatter/OutputFormatterStyle.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Formatter;\n\nuse Symfony\\Component\\Console\\Color;\n\n/**\n * Formatter style class for defining styles.\n *\n * @author Konstantin Kudryashov <ever.zet@gmail.com>\n */\nclass OutputFormatterStyle implements OutputFormatterStyleInterface\n{\n    private Color $color;\n    private string $foreground;\n    private string $background;\n    private array $options;\n    private ?string $href = null;\n    private bool $handlesHrefGracefully;\n\n    /**\n     * Initializes output formatter style.\n     *\n     * @param string|null $foreground The style foreground color name\n     * @param string|null $background The style background color name\n     */\n    public function __construct(?string $foreground = null, ?string $background = null, array $options = [])\n    {\n        $this->color = new Color($this->foreground = $foreground ?: '', $this->background = $background ?: '', $this->options = $options);\n    }\n\n    public function setForeground(?string $color): void\n    {\n        $this->color = new Color($this->foreground = $color ?: '', $this->background, $this->options);\n    }\n\n    public function setBackground(?string $color): void\n    {\n        $this->color = new Color($this->foreground, $this->background = $color ?: '', $this->options);\n    }\n\n    public function setHref(string $url): void\n    {\n        $this->href = $url;\n    }\n\n    public function setOption(string $option): void\n    {\n        $this->options[] = $option;\n        $this->color = new Color($this->foreground, $this->background, $this->options);\n    }\n\n    public function unsetOption(string $option): void\n    {\n        $pos = array_search($option, $this->options);\n        if (false !== $pos) {\n            unset($this->options[$pos]);\n        }\n\n        $this->color = new Color($this->foreground, $this->background, $this->options);\n    }\n\n    public function setOptions(array $options): void\n    {\n        $this->color = new Color($this->foreground, $this->background, $this->options = $options);\n    }\n\n    public function apply(string $text): string\n    {\n        $this->handlesHrefGracefully ??= 'JetBrains-JediTerm' !== getenv('TERMINAL_EMULATOR')\n            && (!getenv('KONSOLE_VERSION') || (int) getenv('KONSOLE_VERSION') > 201100)\n            && !isset($_SERVER['IDEA_INITIAL_DIRECTORY']);\n\n        if (null !== $this->href && $this->handlesHrefGracefully) {\n            $text = \"\\033]8;;$this->href\\033\\\\$text\\033]8;;\\033\\\\\";\n        }\n\n        return $this->color->apply($text);\n    }\n}\n\n\n--- File Index 60: DependencyInjection/AddConsoleCommandPass.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\DependencyInjection;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Command\\LazyCommand;\nuse Symfony\\Component\\Console\\CommandLoader\\ContainerCommandLoader;\nuse Symfony\\Component\\DependencyInjection\\Argument\\ServiceClosureArgument;\nuse Symfony\\Component\\DependencyInjection\\Compiler\\CompilerPassInterface;\nuse Symfony\\Component\\DependencyInjection\\Compiler\\ServiceLocatorTagPass;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\DependencyInjection\\Reference;\nuse Symfony\\Component\\DependencyInjection\\TypedReference;\n\n/**\n * Registers console commands.\n *\n * @author Gr\u00e9goire Pineau <lyrixx@lyrixx.info>\n */\nclass AddConsoleCommandPass implements CompilerPassInterface\n{\n    public function process(ContainerBuilder $container): void\n    {\n        $commandServices = $container->findTaggedServiceIds('console.command', true);\n        $lazyCommandMap = [];\n        $lazyCommandRefs = [];\n        $serviceIds = [];\n\n        foreach ($commandServices as $id => $tags) {\n            $definition = $container->getDefinition($id);\n            $definition->addTag('container.no_preload');\n            $class = $container->getParameterBag()->resolveValue($definition->getClass());\n\n            if (isset($tags[0]['command'])) {\n                $aliases = $tags[0]['command'];\n            } else {\n                if (!$r = $container->getReflectionClass($class)) {\n                    throw new InvalidArgumentException(\\sprintf('Class \"%s\" used for service \"%s\" cannot be found.', $class, $id));\n                }\n                if (!$r->isSubclassOf(Command::class)) {\n                    throw new InvalidArgumentException(\\sprintf('The service \"%s\" tagged \"%s\" must be a subclass of \"%s\".', $id, 'console.command', Command::class));\n                }\n                $aliases = str_replace('%', '%%', $class::getDefaultName() ?? '');\n            }\n\n            $aliases = explode('|', $aliases);\n            $commandName = array_shift($aliases);\n\n            if ($isHidden = '' === $commandName) {\n                $commandName = array_shift($aliases);\n            }\n\n            if (null === $commandName) {\n                if (!$definition->isPublic() || $definition->isPrivate() || $definition->hasTag('container.private')) {\n                    $commandId = 'console.command.public_alias.'.$id;\n                    $container->setAlias($commandId, $id)->setPublic(true);\n                    $id = $commandId;\n                }\n                $serviceIds[] = $id;\n\n                continue;\n            }\n\n            $description = $tags[0]['description'] ?? null;\n\n            unset($tags[0]);\n            $lazyCommandMap[$commandName] = $id;\n            $lazyCommandRefs[$id] = new TypedReference($id, $class);\n\n            foreach ($aliases as $alias) {\n                $lazyCommandMap[$alias] = $id;\n            }\n\n            foreach ($tags as $tag) {\n                if (isset($tag['command'])) {\n                    $aliases[] = $tag['command'];\n                    $lazyCommandMap[$tag['command']] = $id;\n                }\n\n                $description ??= $tag['description'] ?? null;\n            }\n\n            $definition->addMethodCall('setName', [$commandName]);\n\n            if ($aliases) {\n                $definition->addMethodCall('setAliases', [$aliases]);\n            }\n\n            if ($isHidden) {\n                $definition->addMethodCall('setHidden', [true]);\n            }\n\n            if (!$description) {\n                if (!$r = $container->getReflectionClass($class)) {\n                    throw new InvalidArgumentException(\\sprintf('Class \"%s\" used for service \"%s\" cannot be found.', $class, $id));\n                }\n                if (!$r->isSubclassOf(Command::class)) {\n                    throw new InvalidArgumentException(\\sprintf('The service \"%s\" tagged \"%s\" must be a subclass of \"%s\".', $id, 'console.command', Command::class));\n                }\n                $description = str_replace('%', '%%', $class::getDefaultDescription() ?? '');\n            }\n\n            if ($description) {\n                $definition->addMethodCall('setDescription', [$description]);\n\n                $container->register('.'.$id.'.lazy', LazyCommand::class)\n                    ->setArguments([$commandName, $aliases, $description, $isHidden, new ServiceClosureArgument($lazyCommandRefs[$id])]);\n\n                $lazyCommandRefs[$id] = new Reference('.'.$id.'.lazy');\n            }\n        }\n\n        $container\n            ->register('console.command_loader', ContainerCommandLoader::class)\n            ->setPublic(true)\n            ->addTag('container.no_preload')\n            ->setArguments([ServiceLocatorTagPass::register($container, $lazyCommandRefs), $lazyCommandMap]);\n\n        $container->setParameter('console.command.ids', $serviceIds);\n    }\n}\n\n\n--- File Index 61: Input/InputOption.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Input;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Completion\\CompletionInput;\nuse Symfony\\Component\\Console\\Completion\\CompletionSuggestions;\nuse Symfony\\Component\\Console\\Completion\\Suggestion;\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\n\n/**\n * Represents a command line option.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass InputOption\n{\n    /**\n     * Do not accept input for the option (e.g. --yell). This is the default behavior of options.\n     */\n    public const VALUE_NONE = 1;\n\n    /**\n     * A value must be passed when the option is used (e.g. --iterations=5 or -i5).\n     */\n    public const VALUE_REQUIRED = 2;\n\n    /**\n     * The option may or may not have a value (e.g. --yell or --yell=loud).\n     */\n    public const VALUE_OPTIONAL = 4;\n\n    /**\n     * The option accepts multiple values (e.g. --dir=/foo --dir=/bar).\n     */\n    public const VALUE_IS_ARRAY = 8;\n\n    /**\n     * The option allows passing a negated variant (e.g. --ansi or --no-ansi).\n     */\n    public const VALUE_NEGATABLE = 16;\n\n    private string $name;\n    private ?string $shortcut;\n    private int $mode;\n    private string|int|bool|array|float|null $default;\n\n    /**\n     * @param string|array|null                                                             $shortcut        The shortcuts, can be null, a string of shortcuts delimited by | or an array of shortcuts\n     * @param int-mask-of<InputOption::*>|null                                              $mode            The option mode: One of the VALUE_* constants\n     * @param string|bool|int|float|array|null                                              $default         The default value (must be null for self::VALUE_NONE)\n     * @param array|\\Closure(CompletionInput,CompletionSuggestions):list<string|Suggestion> $suggestedValues The values used for input completion\n     *\n     * @throws InvalidArgumentException If option mode is invalid or incompatible\n     */\n    public function __construct(\n        string $name,\n        string|array|null $shortcut = null,\n        ?int $mode = null,\n        private string $description = '',\n        string|bool|int|float|array|null $default = null,\n        private array|\\Closure $suggestedValues = [],\n    ) {\n        if (str_starts_with($name, '--')) {\n            $name = substr($name, 2);\n        }\n\n        if (!$name) {\n            throw new InvalidArgumentException('An option name cannot be empty.');\n        }\n\n        if ('' === $shortcut || [] === $shortcut || false === $shortcut) {\n            $shortcut = null;\n        }\n\n        if (null !== $shortcut) {\n            if (\\is_array($shortcut)) {\n                $shortcut = implode('|', $shortcut);\n            }\n            $shortcuts = preg_split('{(\\|)-?}', ltrim($shortcut, '-'));\n            $shortcuts = array_filter($shortcuts, 'strlen');\n            $shortcut = implode('|', $shortcuts);\n\n            if ('' === $shortcut) {\n                throw new InvalidArgumentException('An option shortcut cannot be empty.');\n            }\n        }\n\n        if (null === $mode) {\n            $mode = self::VALUE_NONE;\n        } elseif ($mode >= (self::VALUE_NEGATABLE << 1) || $mode < 1) {\n            throw new InvalidArgumentException(\\sprintf('Option mode \"%s\" is not valid.', $mode));\n        }\n\n        $this->name = $name;\n        $this->shortcut = $shortcut;\n        $this->mode = $mode;\n\n        if ($suggestedValues && !$this->acceptValue()) {\n            throw new LogicException('Cannot set suggested values if the option does not accept a value.');\n        }\n        if ($this->isArray() && !$this->acceptValue()) {\n            throw new InvalidArgumentException('Impossible to have an option mode VALUE_IS_ARRAY if the option does not accept a value.');\n        }\n        if ($this->isNegatable() && $this->acceptValue()) {\n            throw new InvalidArgumentException('Impossible to have an option mode VALUE_NEGATABLE if the option also accepts a value.');\n        }\n\n        $this->setDefault($default);\n    }\n\n    /**\n     * Returns the option shortcut.\n     */\n    public function getShortcut(): ?string\n    {\n        return $this->shortcut;\n    }\n\n    /**\n     * Returns the option name.\n     */\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    /**\n     * Returns true if the option accepts a value.\n     *\n     * @return bool true if value mode is not self::VALUE_NONE, false otherwise\n     */\n    public function acceptValue(): bool\n    {\n        return $this->isValueRequired() || $this->isValueOptional();\n    }\n\n    /**\n     * Returns true if the option requires a value.\n     *\n     * @return bool true if value mode is self::VALUE_REQUIRED, false otherwise\n     */\n    public function isValueRequired(): bool\n    {\n        return self::VALUE_REQUIRED === (self::VALUE_REQUIRED & $this->mode);\n    }\n\n    /**\n     * Returns true if the option takes an optional value.\n     *\n     * @return bool true if value mode is self::VALUE_OPTIONAL, false otherwise\n     */\n    public function isValueOptional(): bool\n    {\n        return self::VALUE_OPTIONAL === (self::VALUE_OPTIONAL & $this->mode);\n    }\n\n    /**\n     * Returns true if the option can take multiple values.\n     *\n     * @return bool true if mode is self::VALUE_IS_ARRAY, false otherwise\n     */\n    public function isArray(): bool\n    {\n        return self::VALUE_IS_ARRAY === (self::VALUE_IS_ARRAY & $this->mode);\n    }\n\n    /**\n     * Returns true if the option allows passing a negated variant.\n     *\n     * @return bool true if mode is self::VALUE_NEGATABLE, false otherwise\n     */\n    public function isNegatable(): bool\n    {\n        return self::VALUE_NEGATABLE === (self::VALUE_NEGATABLE & $this->mode);\n    }\n\n    /**\n     * Sets the default value.\n     */\n    public function setDefault(string|bool|int|float|array|null $default): void\n    {\n        if (self::VALUE_NONE === (self::VALUE_NONE & $this->mode) && null !== $default) {\n            throw new LogicException('Cannot set a default value when using InputOption::VALUE_NONE mode.');\n        }\n\n        if ($this->isArray()) {\n            if (null === $default) {\n                $default = [];\n            } elseif (!\\is_array($default)) {\n                throw new LogicException('A default value for an array option must be an array.');\n            }\n        }\n\n        $this->default = $this->acceptValue() || $this->isNegatable() ? $default : false;\n    }\n\n    /**\n     * Returns the default value.\n     */\n    public function getDefault(): string|bool|int|float|array|null\n    {\n        return $this->default;\n    }\n\n    /**\n     * Returns the description text.\n     */\n    public function getDescription(): string\n    {\n        return $this->description;\n    }\n\n    /**\n     * Returns true if the option has values for input completion.\n     */\n    public function hasCompletion(): bool\n    {\n        return [] !== $this->suggestedValues;\n    }\n\n    /**\n     * Supplies suggestions when command resolves possible completion options for input.\n     *\n     * @see Command::complete()\n     */\n    public function complete(CompletionInput $input, CompletionSuggestions $suggestions): void\n    {\n        $values = $this->suggestedValues;\n        if ($values instanceof \\Closure && !\\is_array($values = $values($input))) {\n            throw new LogicException(\\sprintf('Closure for option \"%s\" must return an array. Got \"%s\".', $this->name, get_debug_type($values)));\n        }\n        if ($values) {\n            $suggestions->suggestValues($values);\n        }\n    }\n\n    /**\n     * Checks whether the given option equals this one.\n     */\n    public function equals(self $option): bool\n    {\n        return $option->getName() === $this->getName()\n            && $option->getShortcut() === $this->getShortcut()\n            && $option->getDefault() === $this->getDefault()\n            && $option->isNegatable() === $this->isNegatable()\n            && $option->isArray() === $this->isArray()\n            && $option->isValueRequired() === $this->isValueRequired()\n            && $option->isValueOptional() === $this->isValueOptional()\n        ;\n    }\n}\n\n\n--- File Index 62: Input/ArgvInput.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Input;\n\nuse Symfony\\Component\\Console\\Exception\\RuntimeException;\n\n/**\n * ArgvInput represents an input coming from the CLI arguments.\n *\n * Usage:\n *\n *     $input = new ArgvInput();\n *\n * By default, the `$_SERVER['argv']` array is used for the input values.\n *\n * This can be overridden by explicitly passing the input values in the constructor:\n *\n *     $input = new ArgvInput($_SERVER['argv']);\n *\n * If you pass it yourself, don't forget that the first element of the array\n * is the name of the running application.\n *\n * When passing an argument to the constructor, be sure that it respects\n * the same rules as the argv one. It's almost always better to use the\n * `StringInput` when you want to provide your own input.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n *\n * @see http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html\n * @see http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html#tag_12_02\n */\nclass ArgvInput extends Input\n{\n    /** @var list<string> */\n    private array $tokens;\n    private array $parsed;\n\n    /** @param list<string>|null $argv */\n    public function __construct(?array $argv = null, ?InputDefinition $definition = null)\n    {\n        $argv ??= $_SERVER['argv'] ?? [];\n\n        foreach ($argv as $arg) {\n            if (!\\is_scalar($arg) && !$arg instanceof \\Stringable) {\n                throw new RuntimeException(\\sprintf('Argument values expected to be all scalars, got \"%s\".', get_debug_type($arg)));\n            }\n        }\n\n        // strip the application name\n        array_shift($argv);\n\n        $this->tokens = $argv;\n\n        parent::__construct($definition);\n    }\n\n    /** @param list<string> $tokens */\n    protected function setTokens(array $tokens): void\n    {\n        $this->tokens = $tokens;\n    }\n\n    protected function parse(): void\n    {\n        $parseOptions = true;\n        $this->parsed = $this->tokens;\n        while (null !== $token = array_shift($this->parsed)) {\n            $parseOptions = $this->parseToken($token, $parseOptions);\n        }\n    }\n\n    protected function parseToken(string $token, bool $parseOptions): bool\n    {\n        if ($parseOptions && '' == $token) {\n            $this->parseArgument($token);\n        } elseif ($parseOptions && '--' == $token) {\n            return false;\n        } elseif ($parseOptions && str_starts_with($token, '--')) {\n            $this->parseLongOption($token);\n        } elseif ($parseOptions && '-' === $token[0] && '-' !== $token) {\n            $this->parseShortOption($token);\n        } else {\n            $this->parseArgument($token);\n        }\n\n        return $parseOptions;\n    }\n\n    /**\n     * Parses a short option.\n     */\n    private function parseShortOption(string $token): void\n    {\n        $name = substr($token, 1);\n\n        if (\\strlen($name) > 1) {\n            if ($this->definition->hasShortcut($name[0]) && $this->definition->getOptionForShortcut($name[0])->acceptValue()) {\n                // an option with a value (with no space)\n                $this->addShortOption($name[0], substr($name, 1));\n            } else {\n                $this->parseShortOptionSet($name);\n            }\n        } else {\n            $this->addShortOption($name, null);\n        }\n    }\n\n    /**\n     * Parses a short option set.\n     *\n     * @throws RuntimeException When option given doesn't exist\n     */\n    private function parseShortOptionSet(string $name): void\n    {\n        $len = \\strlen($name);\n        for ($i = 0; $i < $len; ++$i) {\n            if (!$this->definition->hasShortcut($name[$i])) {\n                $encoding = mb_detect_encoding($name, null, true);\n                throw new RuntimeException(\\sprintf('The \"-%s\" option does not exist.', false === $encoding ? $name[$i] : mb_substr($name, $i, 1, $encoding)));\n            }\n\n            $option = $this->definition->getOptionForShortcut($name[$i]);\n            if ($option->acceptValue()) {\n                $this->addLongOption($option->getName(), $i === $len - 1 ? null : substr($name, $i + 1));\n\n                break;\n            }\n\n            $this->addLongOption($option->getName(), null);\n        }\n    }\n\n    /**\n     * Parses a long option.\n     */\n    private function parseLongOption(string $token): void\n    {\n        $name = substr($token, 2);\n\n        if (false !== $pos = strpos($name, '=')) {\n            if ('' === $value = substr($name, $pos + 1)) {\n                array_unshift($this->parsed, $value);\n            }\n            $this->addLongOption(substr($name, 0, $pos), $value);\n        } else {\n            $this->addLongOption($name, null);\n        }\n    }\n\n    /**\n     * Parses an argument.\n     *\n     * @throws RuntimeException When too many arguments are given\n     */\n    private function parseArgument(string $token): void\n    {\n        $c = \\count($this->arguments);\n\n        // if input is expecting another argument, add it\n        if ($this->definition->hasArgument($c)) {\n            $arg = $this->definition->getArgument($c);\n            $this->arguments[$arg->getName()] = $arg->isArray() ? [$token] : $token;\n\n        // if last argument isArray(), append token to last argument\n        } elseif ($this->definition->hasArgument($c - 1) && $this->definition->getArgument($c - 1)->isArray()) {\n            $arg = $this->definition->getArgument($c - 1);\n            $this->arguments[$arg->getName()][] = $token;\n\n        // unexpected argument\n        } else {\n            $all = $this->definition->getArguments();\n            $symfonyCommandName = null;\n            if (($inputArgument = $all[$key = array_key_first($all)] ?? null) && 'command' === $inputArgument->getName()) {\n                $symfonyCommandName = $this->arguments['command'] ?? null;\n                unset($all[$key]);\n            }\n\n            if (\\count($all)) {\n                if ($symfonyCommandName) {\n                    $message = \\sprintf('Too many arguments to \"%s\" command, expected arguments \"%s\".', $symfonyCommandName, implode('\" \"', array_keys($all)));\n                } else {\n                    $message = \\sprintf('Too many arguments, expected arguments \"%s\".', implode('\" \"', array_keys($all)));\n                }\n            } elseif ($symfonyCommandName) {\n                $message = \\sprintf('No arguments expected for \"%s\" command, got \"%s\".', $symfonyCommandName, $token);\n            } else {\n                $message = \\sprintf('No arguments expected, got \"%s\".', $token);\n            }\n\n            throw new RuntimeException($message);\n        }\n    }\n\n    /**\n     * Adds a short option value.\n     *\n     * @throws RuntimeException When option given doesn't exist\n     */\n    private function addShortOption(string $shortcut, mixed $value): void\n    {\n        if (!$this->definition->hasShortcut($shortcut)) {\n            throw new RuntimeException(\\sprintf('The \"-%s\" option does not exist.', $shortcut));\n        }\n\n        $this->addLongOption($this->definition->getOptionForShortcut($shortcut)->getName(), $value);\n    }\n\n    /**\n     * Adds a long option value.\n     *\n     * @throws RuntimeException When option given doesn't exist\n     */\n    private function addLongOption(string $name, mixed $value): void\n    {\n        if (!$this->definition->hasOption($name)) {\n            if (!$this->definition->hasNegation($name)) {\n                throw new RuntimeException(\\sprintf('The \"--%s\" option does not exist.', $name));\n            }\n\n            $optionName = $this->definition->negationToName($name);\n            if (null !== $value) {\n                throw new RuntimeException(\\sprintf('The \"--%s\" option does not accept a value.', $name));\n            }\n            $this->options[$optionName] = false;\n\n            return;\n        }\n\n        $option = $this->definition->getOption($name);\n\n        if (null !== $value && !$option->acceptValue()) {\n            throw new RuntimeException(\\sprintf('The \"--%s\" option does not accept a value.', $name));\n        }\n\n        if (\\in_array($value, ['', null], true) && $option->acceptValue() && \\count($this->parsed)) {\n            // if option accepts an optional or mandatory argument\n            // let's see if there is one provided\n            $next = array_shift($this->parsed);\n            if ((isset($next[0]) && '-' !== $next[0]) || \\in_array($next, ['', null], true)) {\n                $value = $next;\n            } else {\n                array_unshift($this->parsed, $next);\n            }\n        }\n\n        if (null === $value) {\n            if ($option->isValueRequired()) {\n                throw new RuntimeException(\\sprintf('The \"--%s\" option requires a value.', $name));\n            }\n\n            if (!$option->isArray() && !$option->isValueOptional()) {\n                $value = true;\n            }\n        }\n\n        if ($option->isArray()) {\n            $this->options[$name][] = $value;\n        } else {\n            $this->options[$name] = $value;\n        }\n    }\n\n    public function getFirstArgument(): ?string\n    {\n        $isOption = false;\n        foreach ($this->tokens as $i => $token) {\n            if ($token && '-' === $token[0]) {\n                if (str_contains($token, '=') || !isset($this->tokens[$i + 1])) {\n                    continue;\n                }\n\n                // If it's a long option, consider that everything after \"--\" is the option name.\n                // Otherwise, use the last char (if it's a short option set, only the last one can take a value with space separator)\n                $name = '-' === $token[1] ? substr($token, 2) : substr($token, -1);\n                if (!isset($this->options[$name]) && !$this->definition->hasShortcut($name)) {\n                    // noop\n                } elseif ((isset($this->options[$name]) || isset($this->options[$name = $this->definition->shortcutToName($name)])) && $this->tokens[$i + 1] === $this->options[$name]) {\n                    $isOption = true;\n                }\n\n                continue;\n            }\n\n            if ($isOption) {\n                $isOption = false;\n                continue;\n            }\n\n            return $token;\n        }\n\n        return null;\n    }\n\n    public function hasParameterOption(string|array $values, bool $onlyParams = false): bool\n    {\n        $values = (array) $values;\n\n        foreach ($this->tokens as $token) {\n            if ($onlyParams && '--' === $token) {\n                return false;\n            }\n            foreach ($values as $value) {\n                // Options with values:\n                //   For long options, test for '--option=' at beginning\n                //   For short options, test for '-o' at beginning\n                $leading = str_starts_with($value, '--') ? $value.'=' : $value;\n                if ($token === $value || '' !== $leading && str_starts_with($token, $leading)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public function getParameterOption(string|array $values, string|bool|int|float|array|null $default = false, bool $onlyParams = false): mixed\n    {\n        $values = (array) $values;\n        $tokens = $this->tokens;\n\n        while (0 < \\count($tokens)) {\n            $token = array_shift($tokens);\n            if ($onlyParams && '--' === $token) {\n                return $default;\n            }\n\n            foreach ($values as $value) {\n                if ($token === $value) {\n                    return array_shift($tokens);\n                }\n                // Options with values:\n                //   For long options, test for '--option=' at beginning\n                //   For short options, test for '-o' at beginning\n                $leading = str_starts_with($value, '--') ? $value.'=' : $value;\n                if ('' !== $leading && str_starts_with($token, $leading)) {\n                    return substr($token, \\strlen($leading));\n                }\n            }\n        }\n\n        return $default;\n    }\n\n    /**\n     * Returns un-parsed and not validated tokens.\n     *\n     * @param bool $strip Whether to return the raw parameters (false) or the values after the command name (true)\n     *\n     * @return list<string>\n     */\n    public function getRawTokens(bool $strip = false): array\n    {\n        if (!$strip) {\n            return $this->tokens;\n        }\n\n        $parameters = [];\n        $keep = false;\n        foreach ($this->tokens as $value) {\n            if (!$keep && $value === $this->getFirstArgument()) {\n                $keep = true;\n\n                continue;\n            }\n            if ($keep) {\n                $parameters[] = $value;\n            }\n        }\n\n        return $parameters;\n    }\n\n    /**\n     * Returns a stringified representation of the args passed to the command.\n     */\n    public function __toString(): string\n    {\n        $tokens = array_map(function ($token) {\n            if (preg_match('{^(-[^=]+=)(.+)}', $token, $match)) {\n                return $match[1].$this->escapeToken($match[2]);\n            }\n\n            if ($token && '-' !== $token[0]) {\n                return $this->escapeToken($token);\n            }\n\n            return $token;\n        }, $this->tokens);\n\n        return implode(' ', $tokens);\n    }\n}\n\n\n--- File Index 63: Input/InputDefinition.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Input;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\n\n/**\n * A InputDefinition represents a set of valid command line arguments and options.\n *\n * Usage:\n *\n *     $definition = new InputDefinition([\n *         new InputArgument('name', InputArgument::REQUIRED),\n *         new InputOption('foo', 'f', InputOption::VALUE_REQUIRED),\n *     ]);\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass InputDefinition\n{\n    private array $arguments = [];\n    private int $requiredCount = 0;\n    private ?InputArgument $lastArrayArgument = null;\n    private ?InputArgument $lastOptionalArgument = null;\n    private array $options = [];\n    private array $negations = [];\n    private array $shortcuts = [];\n\n    /**\n     * @param array $definition An array of InputArgument and InputOption instance\n     */\n    public function __construct(array $definition = [])\n    {\n        $this->setDefinition($definition);\n    }\n\n    /**\n     * Sets the definition of the input.\n     */\n    public function setDefinition(array $definition): void\n    {\n        $arguments = [];\n        $options = [];\n        foreach ($definition as $item) {\n            if ($item instanceof InputOption) {\n                $options[] = $item;\n            } else {\n                $arguments[] = $item;\n            }\n        }\n\n        $this->setArguments($arguments);\n        $this->setOptions($options);\n    }\n\n    /**\n     * Sets the InputArgument objects.\n     *\n     * @param InputArgument[] $arguments An array of InputArgument objects\n     */\n    public function setArguments(array $arguments = []): void\n    {\n        $this->arguments = [];\n        $this->requiredCount = 0;\n        $this->lastOptionalArgument = null;\n        $this->lastArrayArgument = null;\n        $this->addArguments($arguments);\n    }\n\n    /**\n     * Adds an array of InputArgument objects.\n     *\n     * @param InputArgument[] $arguments An array of InputArgument objects\n     */\n    public function addArguments(?array $arguments = []): void\n    {\n        if (null !== $arguments) {\n            foreach ($arguments as $argument) {\n                $this->addArgument($argument);\n            }\n        }\n    }\n\n    /**\n     * @throws LogicException When incorrect argument is given\n     */\n    public function addArgument(InputArgument $argument): void\n    {\n        if (isset($this->arguments[$argument->getName()])) {\n            throw new LogicException(\\sprintf('An argument with name \"%s\" already exists.', $argument->getName()));\n        }\n\n        if (null !== $this->lastArrayArgument) {\n            throw new LogicException(\\sprintf('Cannot add a required argument \"%s\" after an array argument \"%s\".', $argument->getName(), $this->lastArrayArgument->getName()));\n        }\n\n        if ($argument->isRequired() && null !== $this->lastOptionalArgument) {\n            throw new LogicException(\\sprintf('Cannot add a required argument \"%s\" after an optional one \"%s\".', $argument->getName(), $this->lastOptionalArgument->getName()));\n        }\n\n        if ($argument->isArray()) {\n            $this->lastArrayArgument = $argument;\n        }\n\n        if ($argument->isRequired()) {\n            ++$this->requiredCount;\n        } else {\n            $this->lastOptionalArgument = $argument;\n        }\n\n        $this->arguments[$argument->getName()] = $argument;\n    }\n\n    /**\n     * Returns an InputArgument by name or by position.\n     *\n     * @throws InvalidArgumentException When argument given doesn't exist\n     */\n    public function getArgument(string|int $name): InputArgument\n    {\n        if (!$this->hasArgument($name)) {\n            throw new InvalidArgumentException(\\sprintf('The \"%s\" argument does not exist.', $name));\n        }\n\n        $arguments = \\is_int($name) ? array_values($this->arguments) : $this->arguments;\n\n        return $arguments[$name];\n    }\n\n    /**\n     * Returns true if an InputArgument object exists by name or position.\n     */\n    public function hasArgument(string|int $name): bool\n    {\n        $arguments = \\is_int($name) ? array_values($this->arguments) : $this->arguments;\n\n        return isset($arguments[$name]);\n    }\n\n    /**\n     * Gets the array of InputArgument objects.\n     *\n     * @return InputArgument[]\n     */\n    public function getArguments(): array\n    {\n        return $this->arguments;\n    }\n\n    /**\n     * Returns the number of InputArguments.\n     */\n    public function getArgumentCount(): int\n    {\n        return null !== $this->lastArrayArgument ? \\PHP_INT_MAX : \\count($this->arguments);\n    }\n\n    /**\n     * Returns the number of required InputArguments.\n     */\n    public function getArgumentRequiredCount(): int\n    {\n        return $this->requiredCount;\n    }\n\n    /**\n     * @return array<string|bool|int|float|array|null>\n     */\n    public function getArgumentDefaults(): array\n    {\n        $values = [];\n        foreach ($this->arguments as $argument) {\n            $values[$argument->getName()] = $argument->getDefault();\n        }\n\n        return $values;\n    }\n\n    /**\n     * Sets the InputOption objects.\n     *\n     * @param InputOption[] $options An array of InputOption objects\n     */\n    public function setOptions(array $options = []): void\n    {\n        $this->options = [];\n        $this->shortcuts = [];\n        $this->negations = [];\n        $this->addOptions($options);\n    }\n\n    /**\n     * Adds an array of InputOption objects.\n     *\n     * @param InputOption[] $options An array of InputOption objects\n     */\n    public function addOptions(array $options = []): void\n    {\n        foreach ($options as $option) {\n            $this->addOption($option);\n        }\n    }\n\n    /**\n     * @throws LogicException When option given already exist\n     */\n    public function addOption(InputOption $option): void\n    {\n        if (isset($this->options[$option->getName()]) && !$option->equals($this->options[$option->getName()])) {\n            throw new LogicException(\\sprintf('An option named \"%s\" already exists.', $option->getName()));\n        }\n        if (isset($this->negations[$option->getName()])) {\n            throw new LogicException(\\sprintf('An option named \"%s\" already exists.', $option->getName()));\n        }\n\n        if ($option->getShortcut()) {\n            foreach (explode('|', $option->getShortcut()) as $shortcut) {\n                if (isset($this->shortcuts[$shortcut]) && !$option->equals($this->options[$this->shortcuts[$shortcut]])) {\n                    throw new LogicException(\\sprintf('An option with shortcut \"%s\" already exists.', $shortcut));\n                }\n            }\n        }\n\n        $this->options[$option->getName()] = $option;\n        if ($option->getShortcut()) {\n            foreach (explode('|', $option->getShortcut()) as $shortcut) {\n                $this->shortcuts[$shortcut] = $option->getName();\n            }\n        }\n\n        if ($option->isNegatable()) {\n            $negatedName = 'no-'.$option->getName();\n            if (isset($this->options[$negatedName])) {\n                throw new LogicException(\\sprintf('An option named \"%s\" already exists.', $negatedName));\n            }\n            $this->negations[$negatedName] = $option->getName();\n        }\n    }\n\n    /**\n     * Returns an InputOption by name.\n     *\n     * @throws InvalidArgumentException When option given doesn't exist\n     */\n    public function getOption(string $name): InputOption\n    {\n        if (!$this->hasOption($name)) {\n            throw new InvalidArgumentException(\\sprintf('The \"--%s\" option does not exist.', $name));\n        }\n\n        return $this->options[$name];\n    }\n\n    /**\n     * Returns true if an InputOption object exists by name.\n     *\n     * This method can't be used to check if the user included the option when\n     * executing the command (use getOption() instead).\n     */\n    public function hasOption(string $name): bool\n    {\n        return isset($this->options[$name]);\n    }\n\n    /**\n     * Gets the array of InputOption objects.\n     *\n     * @return InputOption[]\n     */\n    public function getOptions(): array\n    {\n        return $this->options;\n    }\n\n    /**\n     * Returns true if an InputOption object exists by shortcut.\n     */\n    public function hasShortcut(string $name): bool\n    {\n        return isset($this->shortcuts[$name]);\n    }\n\n    /**\n     * Returns true if an InputOption object exists by negated name.\n     */\n    public function hasNegation(string $name): bool\n    {\n        return isset($this->negations[$name]);\n    }\n\n    /**\n     * Gets an InputOption by shortcut.\n     */\n    public function getOptionForShortcut(string $shortcut): InputOption\n    {\n        return $this->getOption($this->shortcutToName($shortcut));\n    }\n\n    /**\n     * @return array<string|bool|int|float|array|null>\n     */\n    public function getOptionDefaults(): array\n    {\n        $values = [];\n        foreach ($this->options as $option) {\n            $values[$option->getName()] = $option->getDefault();\n        }\n\n        return $values;\n    }\n\n    /**\n     * Returns the InputOption name given a shortcut.\n     *\n     * @throws InvalidArgumentException When option given does not exist\n     *\n     * @internal\n     */\n    public function shortcutToName(string $shortcut): string\n    {\n        if (!isset($this->shortcuts[$shortcut])) {\n            throw new InvalidArgumentException(\\sprintf('The \"-%s\" option does not exist.', $shortcut));\n        }\n\n        return $this->shortcuts[$shortcut];\n    }\n\n    /**\n     * Returns the InputOption name given a negation.\n     *\n     * @throws InvalidArgumentException When option given does not exist\n     *\n     * @internal\n     */\n    public function negationToName(string $negation): string\n    {\n        if (!isset($this->negations[$negation])) {\n            throw new InvalidArgumentException(\\sprintf('The \"--%s\" option does not exist.', $negation));\n        }\n\n        return $this->negations[$negation];\n    }\n\n    /**\n     * Gets the synopsis.\n     */\n    public function getSynopsis(bool $short = false): string\n    {\n        $elements = [];\n\n        if ($short && $this->getOptions()) {\n            $elements[] = '[options]';\n        } elseif (!$short) {\n            foreach ($this->getOptions() as $option) {\n                $value = '';\n                if ($option->acceptValue()) {\n                    $value = \\sprintf(\n                        ' %s%s%s',\n                        $option->isValueOptional() ? '[' : '',\n                        strtoupper($option->getName()),\n                        $option->isValueOptional() ? ']' : ''\n                    );\n                }\n\n                $shortcut = $option->getShortcut() ? \\sprintf('-%s|', $option->getShortcut()) : '';\n                $negation = $option->isNegatable() ? \\sprintf('|--no-%s', $option->getName()) : '';\n                $elements[] = \\sprintf('[%s--%s%s%s]', $shortcut, $option->getName(), $value, $negation);\n            }\n        }\n\n        if (\\count($elements) && $this->getArguments()) {\n            $elements[] = '[--]';\n        }\n\n        $tail = '';\n        foreach ($this->getArguments() as $argument) {\n            $element = '<'.$argument->getName().'>';\n            if ($argument->isArray()) {\n                $element .= '...';\n            }\n\n            if (!$argument->isRequired()) {\n                $element = '['.$element;\n                $tail .= ']';\n            }\n\n            $elements[] = $element;\n        }\n\n        return implode(' ', $elements).$tail;\n    }\n}\n\n\n--- File Index 64: Input/Input.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Input;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\RuntimeException;\n\n/**\n * Input is the base class for all concrete Input classes.\n *\n * Three concrete classes are provided by default:\n *\n *  * `ArgvInput`: The input comes from the CLI arguments (argv)\n *  * `StringInput`: The input is provided as a string\n *  * `ArrayInput`: The input is provided as an array\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nabstract class Input implements InputInterface, StreamableInputInterface\n{\n    protected InputDefinition $definition;\n    /** @var resource */\n    protected $stream;\n    protected array $options = [];\n    protected array $arguments = [];\n    protected bool $interactive = true;\n\n    public function __construct(?InputDefinition $definition = null)\n    {\n        if (null === $definition) {\n            $this->definition = new InputDefinition();\n        } else {\n            $this->bind($definition);\n            $this->validate();\n        }\n    }\n\n    public function bind(InputDefinition $definition): void\n    {\n        $this->arguments = [];\n        $this->options = [];\n        $this->definition = $definition;\n\n        $this->parse();\n    }\n\n    /**\n     * Processes command line arguments.\n     */\n    abstract protected function parse(): void;\n\n    public function validate(): void\n    {\n        $definition = $this->definition;\n        $givenArguments = $this->arguments;\n\n        $missingArguments = array_filter(array_keys($definition->getArguments()), fn ($argument) => !\\array_key_exists($argument, $givenArguments) && $definition->getArgument($argument)->isRequired());\n\n        if (\\count($missingArguments) > 0) {\n            throw new RuntimeException(\\sprintf('Not enough arguments (missing: \"%s\").', implode(', ', $missingArguments)));\n        }\n    }\n\n    public function isInteractive(): bool\n    {\n        return $this->interactive;\n    }\n\n    public function setInteractive(bool $interactive): void\n    {\n        $this->interactive = $interactive;\n    }\n\n    public function getArguments(): array\n    {\n        return array_merge($this->definition->getArgumentDefaults(), $this->arguments);\n    }\n\n    public function getArgument(string $name): mixed\n    {\n        if (!$this->definition->hasArgument($name)) {\n            throw new InvalidArgumentException(\\sprintf('The \"%s\" argument does not exist.', $name));\n        }\n\n        return $this->arguments[$name] ?? $this->definition->getArgument($name)->getDefault();\n    }\n\n    public function setArgument(string $name, mixed $value): void\n    {\n        if (!$this->definition->hasArgument($name)) {\n            throw new InvalidArgumentException(\\sprintf('The \"%s\" argument does not exist.', $name));\n        }\n\n        $this->arguments[$name] = $value;\n    }\n\n    public function hasArgument(string $name): bool\n    {\n        return $this->definition->hasArgument($name);\n    }\n\n    public function getOptions(): array\n    {\n        return array_merge($this->definition->getOptionDefaults(), $this->options);\n    }\n\n    public function getOption(string $name): mixed\n    {\n        if ($this->definition->hasNegation($name)) {\n            if (null === $value = $this->getOption($this->definition->negationToName($name))) {\n                return $value;\n            }\n\n            return !$value;\n        }\n\n        if (!$this->definition->hasOption($name)) {\n            throw new InvalidArgumentException(\\sprintf('The \"%s\" option does not exist.', $name));\n        }\n\n        return \\array_key_exists($name, $this->options) ? $this->options[$name] : $this->definition->getOption($name)->getDefault();\n    }\n\n    public function setOption(string $name, mixed $value): void\n    {\n        if ($this->definition->hasNegation($name)) {\n            $this->options[$this->definition->negationToName($name)] = !$value;\n\n            return;\n        } elseif (!$this->definition->hasOption($name)) {\n            throw new InvalidArgumentException(\\sprintf('The \"%s\" option does not exist.', $name));\n        }\n\n        $this->options[$name] = $value;\n    }\n\n    public function hasOption(string $name): bool\n    {\n        return $this->definition->hasOption($name) || $this->definition->hasNegation($name);\n    }\n\n    /**\n     * Escapes a token through escapeshellarg if it contains unsafe chars.\n     */\n    public function escapeToken(string $token): string\n    {\n        return preg_match('{^[\\w-]+$}', $token) ? $token : escapeshellarg($token);\n    }\n\n    /**\n     * @param resource $stream\n     */\n    public function setStream($stream): void\n    {\n        $this->stream = $stream;\n    }\n\n    /**\n     * @return resource\n     */\n    public function getStream()\n    {\n        return $this->stream;\n    }\n}\n\n\n--- File Index 65: Input/StringInput.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Input;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\n\n/**\n * StringInput represents an input provided as a string.\n *\n * Usage:\n *\n *     $input = new StringInput('foo --bar=\"foobar\"');\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass StringInput extends ArgvInput\n{\n    public const REGEX_UNQUOTED_STRING = '([^\\s\\\\\\\\]+?)';\n    public const REGEX_QUOTED_STRING = '(?:\"([^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*)\"|\\'([^\\'\\\\\\\\]*(?:\\\\\\\\.[^\\'\\\\\\\\]*)*)\\')';\n\n    /**\n     * @param string $input A string representing the parameters from the CLI\n     */\n    public function __construct(string $input)\n    {\n        parent::__construct([]);\n\n        $this->setTokens($this->tokenize($input));\n    }\n\n    /**\n     * Tokenizes a string.\n     *\n     * @return list<string>\n     *\n     * @throws InvalidArgumentException When unable to parse input (should never happen)\n     */\n    private function tokenize(string $input): array\n    {\n        $tokens = [];\n        $length = \\strlen($input);\n        $cursor = 0;\n        $token = null;\n        while ($cursor < $length) {\n            if ('\\\\' === $input[$cursor]) {\n                $token .= $input[++$cursor] ?? '';\n                ++$cursor;\n                continue;\n            }\n\n            if (preg_match('/\\s+/A', $input, $match, 0, $cursor)) {\n                if (null !== $token) {\n                    $tokens[] = $token;\n                    $token = null;\n                }\n            } elseif (preg_match('/([^=\"\\'\\s]+?)(=?)('.self::REGEX_QUOTED_STRING.'+)/A', $input, $match, 0, $cursor)) {\n                $token .= $match[1].$match[2].stripcslashes(str_replace(['\"\\'', '\\'\"', '\\'\\'', '\"\"'], '', substr($match[3], 1, -1)));\n            } elseif (preg_match('/'.self::REGEX_QUOTED_STRING.'/A', $input, $match, 0, $cursor)) {\n                $token .= stripcslashes(substr($match[0], 1, -1));\n            } elseif (preg_match('/'.self::REGEX_UNQUOTED_STRING.'/A', $input, $match, 0, $cursor)) {\n                $token .= $match[1];\n            } else {\n                // should never happen\n                throw new InvalidArgumentException(\\sprintf('Unable to parse input near \"... %s ...\".', substr($input, $cursor, 10)));\n            }\n\n            $cursor += \\strlen($match[0]);\n        }\n\n        if (null !== $token) {\n            $tokens[] = $token;\n        }\n\n        return $tokens;\n    }\n}\n\n\n--- File Index 66: Input/InputAwareInterface.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Input;\n\n/**\n * InputAwareInterface should be implemented by classes that depends on the\n * Console Input.\n *\n * @author Wouter J <waldio.webdesign@gmail.com>\n */\ninterface InputAwareInterface\n{\n    /**\n     * Sets the Console Input.\n     */\n    public function setInput(InputInterface $input): void;\n}\n\n\n--- File Index 67: Input/StreamableInputInterface.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Input;\n\n/**\n * StreamableInputInterface is the interface implemented by all input classes\n * that have an input stream.\n *\n * @author Robin Chalas <robin.chalas@gmail.com>\n */\ninterface StreamableInputInterface extends InputInterface\n{\n    /**\n     * Sets the input stream to read from when interacting with the user.\n     *\n     * This is mainly useful for testing purpose.\n     *\n     * @param resource $stream The input stream\n     */\n    public function setStream($stream): void;\n\n    /**\n     * Returns the input stream.\n     *\n     * @return resource|null\n     */\n    public function getStream();\n}\n\n\n--- File Index 68: Input/InputArgument.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Input;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Completion\\CompletionInput;\nuse Symfony\\Component\\Console\\Completion\\CompletionSuggestions;\nuse Symfony\\Component\\Console\\Completion\\Suggestion;\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\n\n/**\n * Represents a command line argument.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass InputArgument\n{\n    /**\n     * Providing an argument is required (e.g. just 'app:foo' is not allowed).\n     */\n    public const REQUIRED = 1;\n\n    /**\n     * Providing an argument is optional (e.g. 'app:foo' and 'app:foo bar' are both allowed). This is the default behavior of arguments.\n     */\n    public const OPTIONAL = 2;\n\n    /**\n     * The argument accepts multiple values and turn them into an array (e.g. 'app:foo bar baz' will result in value ['bar', 'baz']).\n     */\n    public const IS_ARRAY = 4;\n\n    private int $mode;\n    private string|int|bool|array|float|null $default;\n\n    /**\n     * @param string                                                                        $name            The argument name\n     * @param int-mask-of<InputArgument::*>|null                                            $mode            The argument mode: a bit mask of self::REQUIRED, self::OPTIONAL and self::IS_ARRAY\n     * @param string                                                                        $description     A description text\n     * @param string|bool|int|float|array|null                                              $default         The default value (for self::OPTIONAL mode only)\n     * @param array|\\Closure(CompletionInput,CompletionSuggestions):list<string|Suggestion> $suggestedValues The values used for input completion\n     *\n     * @throws InvalidArgumentException When argument mode is not valid\n     */\n    public function __construct(\n        private string $name,\n        ?int $mode = null,\n        private string $description = '',\n        string|bool|int|float|array|null $default = null,\n        private \\Closure|array $suggestedValues = [],\n    ) {\n        if (null === $mode) {\n            $mode = self::OPTIONAL;\n        } elseif ($mode >= (self::IS_ARRAY << 1) || $mode < 1) {\n            throw new InvalidArgumentException(\\sprintf('Argument mode \"%s\" is not valid.', $mode));\n        }\n\n        $this->mode = $mode;\n\n        $this->setDefault($default);\n    }\n\n    /**\n     * Returns the argument name.\n     */\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    /**\n     * Returns true if the argument is required.\n     *\n     * @return bool true if parameter mode is self::REQUIRED, false otherwise\n     */\n    public function isRequired(): bool\n    {\n        return self::REQUIRED === (self::REQUIRED & $this->mode);\n    }\n\n    /**\n     * Returns true if the argument can take multiple values.\n     *\n     * @return bool true if mode is self::IS_ARRAY, false otherwise\n     */\n    public function isArray(): bool\n    {\n        return self::IS_ARRAY === (self::IS_ARRAY & $this->mode);\n    }\n\n    /**\n     * Sets the default value.\n     */\n    public function setDefault(string|bool|int|float|array|null $default): void\n    {\n        if ($this->isRequired() && null !== $default) {\n            throw new LogicException('Cannot set a default value except for InputArgument::OPTIONAL mode.');\n        }\n\n        if ($this->isArray()) {\n            if (null === $default) {\n                $default = [];\n            } elseif (!\\is_array($default)) {\n                throw new LogicException('A default value for an array argument must be an array.');\n            }\n        }\n\n        $this->default = $default;\n    }\n\n    /**\n     * Returns the default value.\n     */\n    public function getDefault(): string|bool|int|float|array|null\n    {\n        return $this->default;\n    }\n\n    /**\n     * Returns true if the argument has values for input completion.\n     */\n    public function hasCompletion(): bool\n    {\n        return [] !== $this->suggestedValues;\n    }\n\n    /**\n     * Supplies suggestions when command resolves possible completion options for input.\n     *\n     * @see Command::complete()\n     */\n    public function complete(CompletionInput $input, CompletionSuggestions $suggestions): void\n    {\n        $values = $this->suggestedValues;\n        if ($values instanceof \\Closure && !\\is_array($values = $values($input))) {\n            throw new LogicException(\\sprintf('Closure for argument \"%s\" must return an array. Got \"%s\".', $this->name, get_debug_type($values)));\n        }\n        if ($values) {\n            $suggestions->suggestValues($values);\n        }\n    }\n\n    /**\n     * Returns the description text.\n     */\n    public function getDescription(): string\n    {\n        return $this->description;\n    }\n}\n\n\n--- File Index 69: Input/InputInterface.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Input;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\RuntimeException;\n\n/**\n * InputInterface is the interface implemented by all input classes.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\ninterface InputInterface\n{\n    /**\n     * Returns the first argument from the raw parameters (not parsed).\n     */\n    public function getFirstArgument(): ?string;\n\n    /**\n     * Returns true if the raw parameters (not parsed) contain a value.\n     *\n     * This method is to be used to introspect the input parameters\n     * before they have been validated. It must be used carefully.\n     * Does not necessarily return the correct result for short options\n     * when multiple flags are combined in the same option.\n     *\n     * @param string|array $values     The values to look for in the raw parameters (can be an array)\n     * @param bool         $onlyParams Only check real parameters, skip those following an end of options (--) signal\n     */\n    public function hasParameterOption(string|array $values, bool $onlyParams = false): bool;\n\n    /**\n     * Returns the value of a raw option (not parsed).\n     *\n     * This method is to be used to introspect the input parameters\n     * before they have been validated. It must be used carefully.\n     * Does not necessarily return the correct result for short options\n     * when multiple flags are combined in the same option.\n     *\n     * @param string|array                     $values     The value(s) to look for in the raw parameters (can be an array)\n     * @param string|bool|int|float|array|null $default    The default value to return if no result is found\n     * @param bool                             $onlyParams Only check real parameters, skip those following an end of options (--) signal\n     */\n    public function getParameterOption(string|array $values, string|bool|int|float|array|null $default = false, bool $onlyParams = false): mixed;\n\n    /**\n     * Binds the current Input instance with the given arguments and options.\n     *\n     * @throws RuntimeException\n     */\n    public function bind(InputDefinition $definition): void;\n\n    /**\n     * Validates the input.\n     *\n     * @throws RuntimeException When not enough arguments are given\n     */\n    public function validate(): void;\n\n    /**\n     * Returns all the given arguments merged with the default values.\n     *\n     * @return array<string|bool|int|float|array|null>\n     */\n    public function getArguments(): array;\n\n    /**\n     * Returns the argument value for a given argument name.\n     *\n     * @throws InvalidArgumentException When argument given doesn't exist\n     */\n    public function getArgument(string $name): mixed;\n\n    /**\n     * Sets an argument value by name.\n     *\n     * @throws InvalidArgumentException When argument given doesn't exist\n     */\n    public function setArgument(string $name, mixed $value): void;\n\n    /**\n     * Returns true if an InputArgument object exists by name or position.\n     */\n    public function hasArgument(string $name): bool;\n\n    /**\n     * Returns all the given options merged with the default values.\n     *\n     * @return array<string|bool|int|float|array|null>\n     */\n    public function getOptions(): array;\n\n    /**\n     * Returns the option value for a given option name.\n     *\n     * @throws InvalidArgumentException When option given doesn't exist\n     */\n    public function getOption(string $name): mixed;\n\n    /**\n     * Sets an option value by name.\n     *\n     * @throws InvalidArgumentException When option given doesn't exist\n     */\n    public function setOption(string $name, mixed $value): void;\n\n    /**\n     * Returns true if an InputOption object exists by name.\n     */\n    public function hasOption(string $name): bool;\n\n    /**\n     * Is this input means interactive?\n     */\n    public function isInteractive(): bool;\n\n    /**\n     * Sets the input interactivity.\n     */\n    public function setInteractive(bool $interactive): void;\n\n    /**\n     * Returns a stringified representation of the args passed to the command.\n     *\n     * InputArguments MUST be escaped as well as the InputOption values passed to the command.\n     */\n    public function __toString(): string;\n}\n\n\n--- File Index 70: Input/ArrayInput.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Input;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\InvalidOptionException;\n\n/**\n * ArrayInput represents an input provided as an array.\n *\n * Usage:\n *\n *     $input = new ArrayInput(['command' => 'foo:bar', 'foo' => 'bar', '--bar' => 'foobar']);\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass ArrayInput extends Input\n{\n    public function __construct(\n        private array $parameters,\n        ?InputDefinition $definition = null,\n    ) {\n        parent::__construct($definition);\n    }\n\n    public function getFirstArgument(): ?string\n    {\n        foreach ($this->parameters as $param => $value) {\n            if ($param && \\is_string($param) && '-' === $param[0]) {\n                continue;\n            }\n\n            return $value;\n        }\n\n        return null;\n    }\n\n    public function hasParameterOption(string|array $values, bool $onlyParams = false): bool\n    {\n        $values = (array) $values;\n\n        foreach ($this->parameters as $k => $v) {\n            if (!\\is_int($k)) {\n                $v = $k;\n            }\n\n            if ($onlyParams && '--' === $v) {\n                return false;\n            }\n\n            if (\\in_array($v, $values)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public function getParameterOption(string|array $values, string|bool|int|float|array|null $default = false, bool $onlyParams = false): mixed\n    {\n        $values = (array) $values;\n\n        foreach ($this->parameters as $k => $v) {\n            if ($onlyParams && ('--' === $k || (\\is_int($k) && '--' === $v))) {\n                return $default;\n            }\n\n            if (\\is_int($k)) {\n                if (\\in_array($v, $values)) {\n                    return true;\n                }\n            } elseif (\\in_array($k, $values)) {\n                return $v;\n            }\n        }\n\n        return $default;\n    }\n\n    /**\n     * Returns a stringified representation of the args passed to the command.\n     */\n    public function __toString(): string\n    {\n        $params = [];\n        foreach ($this->parameters as $param => $val) {\n            if ($param && \\is_string($param) && '-' === $param[0]) {\n                $glue = ('-' === $param[1]) ? '=' : ' ';\n                if (\\is_array($val)) {\n                    foreach ($val as $v) {\n                        $params[] = $param.('' != $v ? $glue.$this->escapeToken($v) : '');\n                    }\n                } else {\n                    $params[] = $param.('' != $val ? $glue.$this->escapeToken($val) : '');\n                }\n            } else {\n                $params[] = \\is_array($val) ? implode(' ', array_map($this->escapeToken(...), $val)) : $this->escapeToken($val);\n            }\n        }\n\n        return implode(' ', $params);\n    }\n\n    protected function parse(): void\n    {\n        foreach ($this->parameters as $key => $value) {\n            if ('--' === $key) {\n                return;\n            }\n            if (str_starts_with($key, '--')) {\n                $this->addLongOption(substr($key, 2), $value);\n            } elseif (str_starts_with($key, '-')) {\n                $this->addShortOption(substr($key, 1), $value);\n            } else {\n                $this->addArgument($key, $value);\n            }\n        }\n    }\n\n    /**\n     * Adds a short option value.\n     *\n     * @throws InvalidOptionException When option given doesn't exist\n     */\n    private function addShortOption(string $shortcut, mixed $value): void\n    {\n        if (!$this->definition->hasShortcut($shortcut)) {\n            throw new InvalidOptionException(\\sprintf('The \"-%s\" option does not exist.', $shortcut));\n        }\n\n        $this->addLongOption($this->definition->getOptionForShortcut($shortcut)->getName(), $value);\n    }\n\n    /**\n     * Adds a long option value.\n     *\n     * @throws InvalidOptionException When option given doesn't exist\n     * @throws InvalidOptionException When a required value is missing\n     */\n    private function addLongOption(string $name, mixed $value): void\n    {\n        if (!$this->definition->hasOption($name)) {\n            if (!$this->definition->hasNegation($name)) {\n                throw new InvalidOptionException(\\sprintf('The \"--%s\" option does not exist.', $name));\n            }\n\n            $optionName = $this->definition->negationToName($name);\n            $this->options[$optionName] = false;\n\n            return;\n        }\n\n        $option = $this->definition->getOption($name);\n\n        if (null === $value) {\n            if ($option->isValueRequired()) {\n                throw new InvalidOptionException(\\sprintf('The \"--%s\" option requires a value.', $name));\n            }\n\n            if (!$option->isValueOptional()) {\n                $value = true;\n            }\n        }\n\n        $this->options[$name] = $value;\n    }\n\n    /**\n     * Adds an argument value.\n     *\n     * @throws InvalidArgumentException When argument given doesn't exist\n     */\n    private function addArgument(string|int $name, mixed $value): void\n    {\n        if (!$this->definition->hasArgument($name)) {\n            throw new InvalidArgumentException(\\sprintf('The \"%s\" argument does not exist.', $name));\n        }\n\n        $this->arguments[$name] = $value;\n    }\n}\n\n\n--- File Index 71: SignalRegistry/SignalMap.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\SignalRegistry;\n\n/**\n * @author Gr\u00e9goire Pineau <lyrixx@lyrixx.info>\n */\nclass SignalMap\n{\n    private static array $map;\n\n    public static function getSignalName(int $signal): ?string\n    {\n        if (!\\extension_loaded('pcntl')) {\n            return null;\n        }\n\n        if (!isset(self::$map)) {\n            $r = new \\ReflectionExtension('pcntl');\n            $c = $r->getConstants();\n            $map = array_filter($c, fn ($k) => str_starts_with($k, 'SIG') && !str_starts_with($k, 'SIG_') && 'SIGBABY' !== $k, \\ARRAY_FILTER_USE_KEY);\n            self::$map = array_flip($map);\n        }\n\n        return self::$map[$signal] ?? null;\n    }\n}\n\n\n--- File Index 72: SignalRegistry/SignalRegistry.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\SignalRegistry;\n\nfinal class SignalRegistry\n{\n    private array $signalHandlers = [];\n\n    public function __construct()\n    {\n        if (\\function_exists('pcntl_async_signals')) {\n            pcntl_async_signals(true);\n        }\n    }\n\n    public function register(int $signal, callable $signalHandler): void\n    {\n        if (!isset($this->signalHandlers[$signal])) {\n            $previousCallback = pcntl_signal_get_handler($signal);\n\n            if (\\is_callable($previousCallback)) {\n                $this->signalHandlers[$signal][] = $previousCallback;\n            }\n        }\n\n        $this->signalHandlers[$signal][] = $signalHandler;\n\n        pcntl_signal($signal, $this->handle(...));\n    }\n\n    public static function isSupported(): bool\n    {\n        return \\function_exists('pcntl_signal');\n    }\n\n    /**\n     * @internal\n     */\n    public function handle(int $signal): void\n    {\n        $count = \\count($this->signalHandlers[$signal]);\n\n        foreach ($this->signalHandlers[$signal] as $i => $signalHandler) {\n            $hasNext = $i !== $count - 1;\n            $signalHandler($signal, $hasNext);\n        }\n    }\n\n    /**\n     * @internal\n     */\n    public function scheduleAlarm(int $seconds): void\n    {\n        pcntl_alarm($seconds);\n    }\n}\n\n\n--- File Index 73: Command/LockableTrait.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Command;\n\nuse Symfony\\Component\\Console\\Exception\\LogicException;\nuse Symfony\\Component\\Lock\\LockFactory;\nuse Symfony\\Component\\Lock\\LockInterface;\nuse Symfony\\Component\\Lock\\Store\\FlockStore;\nuse Symfony\\Component\\Lock\\Store\\SemaphoreStore;\n\n/**\n * Basic lock feature for commands.\n *\n * @author Geoffrey Brier <geoffrey.brier@gmail.com>\n */\ntrait LockableTrait\n{\n    private ?LockInterface $lock = null;\n\n    private ?LockFactory $lockFactory = null;\n\n    /**\n     * Locks a command.\n     */\n    private function lock(?string $name = null, bool $blocking = false): bool\n    {\n        if (!class_exists(SemaphoreStore::class)) {\n            throw new LogicException('To enable the locking feature you must install the symfony/lock component. Try running \"composer require symfony/lock\".');\n        }\n\n        if (null !== $this->lock) {\n            throw new LogicException('A lock is already in place.');\n        }\n\n        if (null === $this->lockFactory) {\n            if (SemaphoreStore::isSupported()) {\n                $store = new SemaphoreStore();\n            } else {\n                $store = new FlockStore();\n            }\n\n            $this->lockFactory = (new LockFactory($store));\n        }\n\n        $this->lock = $this->lockFactory->createLock($name ?: $this->getName());\n        if (!$this->lock->acquire($blocking)) {\n            $this->lock = null;\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Releases the command lock if there is one.\n     */\n    private function release(): void\n    {\n        if ($this->lock) {\n            $this->lock->release();\n            $this->lock = null;\n        }\n    }\n}\n\n\n--- File Index 74: Command/HelpCommand.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Command;\n\nuse Symfony\\Component\\Console\\Descriptor\\ApplicationDescription;\nuse Symfony\\Component\\Console\\Helper\\DescriptorHelper;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * HelpCommand displays the help for a given command.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass HelpCommand extends Command\n{\n    private Command $command;\n\n    protected function configure(): void\n    {\n        $this->ignoreValidationErrors();\n\n        $this\n            ->setName('help')\n            ->setDefinition([\n                new InputArgument('command_name', InputArgument::OPTIONAL, 'The command name', 'help', fn () => array_keys((new ApplicationDescription($this->getApplication()))->getCommands())),\n                new InputOption('format', null, InputOption::VALUE_REQUIRED, 'The output format (txt, xml, json, or md)', 'txt', fn () => (new DescriptorHelper())->getFormats()),\n                new InputOption('raw', null, InputOption::VALUE_NONE, 'To output raw command help'),\n            ])\n            ->setDescription('Display help for a command')\n            ->setHelp(<<<'EOF'\nThe <info>%command.name%</info> command displays help for a given command:\n\n  <info>%command.full_name% list</info>\n\nYou can also output the help in other formats by using the <comment>--format</comment> option:\n\n  <info>%command.full_name% --format=xml list</info>\n\nTo display the list of available commands, please use the <info>list</info> command.\nEOF\n            )\n        ;\n    }\n\n    public function setCommand(Command $command): void\n    {\n        $this->command = $command;\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $this->command ??= $this->getApplication()->find($input->getArgument('command_name'));\n\n        $helper = new DescriptorHelper();\n        $helper->describe($output, $this->command, [\n            'format' => $input->getOption('format'),\n            'raw_text' => $input->getOption('raw'),\n        ]);\n\n        unset($this->command);\n\n        return 0;\n    }\n}\n\n\n--- File Index 75: Command/Command.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Command;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Completion\\CompletionInput;\nuse Symfony\\Component\\Console\\Completion\\CompletionSuggestions;\nuse Symfony\\Component\\Console\\Completion\\Suggestion;\nuse Symfony\\Component\\Console\\Exception\\ExceptionInterface;\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\nuse Symfony\\Component\\Console\\Helper\\HelperInterface;\nuse Symfony\\Component\\Console\\Helper\\HelperSet;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Base class for all commands.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass Command\n{\n    // see https://tldp.org/LDP/abs/html/exitcodes.html\n    public const SUCCESS = 0;\n    public const FAILURE = 1;\n    public const INVALID = 2;\n\n    private ?Application $application = null;\n    private ?string $name = null;\n    private ?string $processTitle = null;\n    private array $aliases = [];\n    private InputDefinition $definition;\n    private bool $hidden = false;\n    private string $help = '';\n    private string $description = '';\n    private ?InputDefinition $fullDefinition = null;\n    private bool $ignoreValidationErrors = false;\n    private ?\\Closure $code = null;\n    private array $synopsis = [];\n    private array $usages = [];\n    private ?HelperSet $helperSet = null;\n\n    public static function getDefaultName(): ?string\n    {\n        if ($attribute = (new \\ReflectionClass(static::class))->getAttributes(AsCommand::class)) {\n            return $attribute[0]->newInstance()->name;\n        }\n\n        return null;\n    }\n\n    public static function getDefaultDescription(): ?string\n    {\n        if ($attribute = (new \\ReflectionClass(static::class))->getAttributes(AsCommand::class)) {\n            return $attribute[0]->newInstance()->description;\n        }\n\n        return null;\n    }\n\n    /**\n     * @param string|null $name The name of the command; passing null means it must be set in configure()\n     *\n     * @throws LogicException When the command name is empty\n     */\n    public function __construct(?string $name = null)\n    {\n        $this->definition = new InputDefinition();\n\n        if (null === $name && null !== $name = static::getDefaultName()) {\n            $aliases = explode('|', $name);\n\n            if ('' === $name = array_shift($aliases)) {\n                $this->setHidden(true);\n                $name = array_shift($aliases);\n            }\n\n            $this->setAliases($aliases);\n        }\n\n        if (null !== $name) {\n            $this->setName($name);\n        }\n\n        if ('' === $this->description) {\n            $this->setDescription(static::getDefaultDescription() ?? '');\n        }\n\n        $this->configure();\n    }\n\n    /**\n     * Ignores validation errors.\n     *\n     * This is mainly useful for the help command.\n     */\n    public function ignoreValidationErrors(): void\n    {\n        $this->ignoreValidationErrors = true;\n    }\n\n    public function setApplication(?Application $application): void\n    {\n        $this->application = $application;\n        if ($application) {\n            $this->setHelperSet($application->getHelperSet());\n        } else {\n            $this->helperSet = null;\n        }\n\n        $this->fullDefinition = null;\n    }\n\n    public function setHelperSet(HelperSet $helperSet): void\n    {\n        $this->helperSet = $helperSet;\n    }\n\n    /**\n     * Gets the helper set.\n     */\n    public function getHelperSet(): ?HelperSet\n    {\n        return $this->helperSet;\n    }\n\n    /**\n     * Gets the application instance for this command.\n     */\n    public function getApplication(): ?Application\n    {\n        return $this->application;\n    }\n\n    /**\n     * Checks whether the command is enabled or not in the current environment.\n     *\n     * Override this to check for x or y and return false if the command cannot\n     * run properly under the current conditions.\n     */\n    public function isEnabled(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Configures the current command.\n     *\n     * @return void\n     */\n    protected function configure()\n    {\n    }\n\n    /**\n     * Executes the current command.\n     *\n     * This method is not abstract because you can use this class\n     * as a concrete class. In this case, instead of defining the\n     * execute() method, you set the code to execute by passing\n     * a Closure to the setCode() method.\n     *\n     * @return int 0 if everything went fine, or an exit code\n     *\n     * @throws LogicException When this abstract method is not implemented\n     *\n     * @see setCode()\n     */\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        throw new LogicException('You must override the execute() method in the concrete command class.');\n    }\n\n    /**\n     * Interacts with the user.\n     *\n     * This method is executed before the InputDefinition is validated.\n     * This means that this is the only place where the command can\n     * interactively ask for values of missing required arguments.\n     *\n     * @return void\n     */\n    protected function interact(InputInterface $input, OutputInterface $output)\n    {\n    }\n\n    /**\n     * Initializes the command after the input has been bound and before the input\n     * is validated.\n     *\n     * This is mainly useful when a lot of commands extends one main command\n     * where some things need to be initialized based on the input arguments and options.\n     *\n     * @see InputInterface::bind()\n     * @see InputInterface::validate()\n     *\n     * @return void\n     */\n    protected function initialize(InputInterface $input, OutputInterface $output)\n    {\n    }\n\n    /**\n     * Runs the command.\n     *\n     * The code to execute is either defined directly with the\n     * setCode() method or by overriding the execute() method\n     * in a sub-class.\n     *\n     * @return int The command exit code\n     *\n     * @throws ExceptionInterface When input binding fails. Bypass this by calling {@link ignoreValidationErrors()}.\n     *\n     * @see setCode()\n     * @see execute()\n     */\n    public function run(InputInterface $input, OutputInterface $output): int\n    {\n        // add the application arguments and options\n        $this->mergeApplicationDefinition();\n\n        // bind the input against the command specific arguments/options\n        try {\n            $input->bind($this->getDefinition());\n        } catch (ExceptionInterface $e) {\n            if (!$this->ignoreValidationErrors) {\n                throw $e;\n            }\n        }\n\n        $this->initialize($input, $output);\n\n        if (null !== $this->processTitle) {\n            if (\\function_exists('cli_set_process_title')) {\n                if (!@cli_set_process_title($this->processTitle)) {\n                    if ('Darwin' === \\PHP_OS) {\n                        $output->writeln('<comment>Running \"cli_set_process_title\" as an unprivileged user is not supported on MacOS.</comment>', OutputInterface::VERBOSITY_VERY_VERBOSE);\n                    } else {\n                        cli_set_process_title($this->processTitle);\n                    }\n                }\n            } elseif (\\function_exists('setproctitle')) {\n                setproctitle($this->processTitle);\n            } elseif (OutputInterface::VERBOSITY_VERY_VERBOSE === $output->getVerbosity()) {\n                $output->writeln('<comment>Install the proctitle PECL to be able to change the process title.</comment>');\n            }\n        }\n\n        if ($input->isInteractive()) {\n            $this->interact($input, $output);\n        }\n\n        // The command name argument is often omitted when a command is executed directly with its run() method.\n        // It would fail the validation if we didn't make sure the command argument is present,\n        // since it's required by the application.\n        if ($input->hasArgument('command') && null === $input->getArgument('command')) {\n            $input->setArgument('command', $this->getName());\n        }\n\n        $input->validate();\n\n        if ($this->code) {\n            $statusCode = ($this->code)($input, $output);\n        } else {\n            $statusCode = $this->execute($input, $output);\n        }\n\n        return is_numeric($statusCode) ? (int) $statusCode : 0;\n    }\n\n    /**\n     * Supplies suggestions when resolving possible completion options for input (e.g. option or argument).\n     */\n    public function complete(CompletionInput $input, CompletionSuggestions $suggestions): void\n    {\n        $definition = $this->getDefinition();\n        if (CompletionInput::TYPE_OPTION_VALUE === $input->getCompletionType() && $definition->hasOption($input->getCompletionName())) {\n            $definition->getOption($input->getCompletionName())->complete($input, $suggestions);\n        } elseif (CompletionInput::TYPE_ARGUMENT_VALUE === $input->getCompletionType() && $definition->hasArgument($input->getCompletionName())) {\n            $definition->getArgument($input->getCompletionName())->complete($input, $suggestions);\n        }\n    }\n\n    /**\n     * Sets the code to execute when running this command.\n     *\n     * If this method is used, it overrides the code defined\n     * in the execute() method.\n     *\n     * @param callable $code A callable(InputInterface $input, OutputInterface $output)\n     *\n     * @return $this\n     *\n     * @throws InvalidArgumentException\n     *\n     * @see execute()\n     */\n    public function setCode(callable $code): static\n    {\n        if ($code instanceof \\Closure) {\n            $r = new \\ReflectionFunction($code);\n            if (null === $r->getClosureThis()) {\n                set_error_handler(static function () {});\n                try {\n                    if ($c = \\Closure::bind($code, $this)) {\n                        $code = $c;\n                    }\n                } finally {\n                    restore_error_handler();\n                }\n            }\n        } else {\n            $code = $code(...);\n        }\n\n        $this->code = $code;\n\n        return $this;\n    }\n\n    /**\n     * Merges the application definition with the command definition.\n     *\n     * This method is not part of public API and should not be used directly.\n     *\n     * @param bool $mergeArgs Whether to merge or not the Application definition arguments to Command definition arguments\n     *\n     * @internal\n     */\n    public function mergeApplicationDefinition(bool $mergeArgs = true): void\n    {\n        if (null === $this->application) {\n            return;\n        }\n\n        $this->fullDefinition = new InputDefinition();\n        $this->fullDefinition->setOptions($this->definition->getOptions());\n        $this->fullDefinition->addOptions($this->application->getDefinition()->getOptions());\n\n        if ($mergeArgs) {\n            $this->fullDefinition->setArguments($this->application->getDefinition()->getArguments());\n            $this->fullDefinition->addArguments($this->definition->getArguments());\n        } else {\n            $this->fullDefinition->setArguments($this->definition->getArguments());\n        }\n    }\n\n    /**\n     * Sets an array of argument and option instances.\n     *\n     * @return $this\n     */\n    public function setDefinition(array|InputDefinition $definition): static\n    {\n        if ($definition instanceof InputDefinition) {\n            $this->definition = $definition;\n        } else {\n            $this->definition->setDefinition($definition);\n        }\n\n        $this->fullDefinition = null;\n\n        return $this;\n    }\n\n    /**\n     * Gets the InputDefinition attached to this Command.\n     */\n    public function getDefinition(): InputDefinition\n    {\n        return $this->fullDefinition ?? $this->getNativeDefinition();\n    }\n\n    /**\n     * Gets the InputDefinition to be used to create representations of this Command.\n     *\n     * Can be overridden to provide the original command representation when it would otherwise\n     * be changed by merging with the application InputDefinition.\n     *\n     * This method is not part of public API and should not be used directly.\n     */\n    public function getNativeDefinition(): InputDefinition\n    {\n        return $this->definition ?? throw new LogicException(\\sprintf('Command class \"%s\" is not correctly initialized. You probably forgot to call the parent constructor.', static::class));\n    }\n\n    /**\n     * Adds an argument.\n     *\n     * @param                                                                               $mode            The argument mode: InputArgument::REQUIRED or InputArgument::OPTIONAL\n     * @param                                                                               $default         The default value (for InputArgument::OPTIONAL mode only)\n     * @param array|\\Closure(CompletionInput,CompletionSuggestions):list<string|Suggestion> $suggestedValues The values used for input completion\n     *\n     * @return $this\n     *\n     * @throws InvalidArgumentException When argument mode is not valid\n     */\n    public function addArgument(string $name, ?int $mode = null, string $description = '', mixed $default = null, array|\\Closure $suggestedValues = []): static\n    {\n        $this->definition->addArgument(new InputArgument($name, $mode, $description, $default, $suggestedValues));\n        $this->fullDefinition?->addArgument(new InputArgument($name, $mode, $description, $default, $suggestedValues));\n\n        return $this;\n    }\n\n    /**\n     * Adds an option.\n     *\n     * @param                                                                               $shortcut        The shortcuts, can be null, a string of shortcuts delimited by | or an array of shortcuts\n     * @param                                                                               $mode            The option mode: One of the InputOption::VALUE_* constants\n     * @param                                                                               $default         The default value (must be null for InputOption::VALUE_NONE)\n     * @param array|\\Closure(CompletionInput,CompletionSuggestions):list<string|Suggestion> $suggestedValues The values used for input completion\n     *\n     * @return $this\n     *\n     * @throws InvalidArgumentException If option mode is invalid or incompatible\n     */\n    public function addOption(string $name, string|array|null $shortcut = null, ?int $mode = null, string $description = '', mixed $default = null, array|\\Closure $suggestedValues = []): static\n    {\n        $this->definition->addOption(new InputOption($name, $shortcut, $mode, $description, $default, $suggestedValues));\n        $this->fullDefinition?->addOption(new InputOption($name, $shortcut, $mode, $description, $default, $suggestedValues));\n\n        return $this;\n    }\n\n    /**\n     * Sets the name of the command.\n     *\n     * This method can set both the namespace and the name if\n     * you separate them by a colon (:)\n     *\n     *     $command->setName('foo:bar');\n     *\n     * @return $this\n     *\n     * @throws InvalidArgumentException When the name is invalid\n     */\n    public function setName(string $name): static\n    {\n        $this->validateName($name);\n\n        $this->name = $name;\n\n        return $this;\n    }\n\n    /**\n     * Sets the process title of the command.\n     *\n     * This feature should be used only when creating a long process command,\n     * like a daemon.\n     *\n     * @return $this\n     */\n    public function setProcessTitle(string $title): static\n    {\n        $this->processTitle = $title;\n\n        return $this;\n    }\n\n    /**\n     * Returns the command name.\n     */\n    public function getName(): ?string\n    {\n        return $this->name;\n    }\n\n    /**\n     * @param bool $hidden Whether or not the command should be hidden from the list of commands\n     *\n     * @return $this\n     */\n    public function setHidden(bool $hidden = true): static\n    {\n        $this->hidden = $hidden;\n\n        return $this;\n    }\n\n    /**\n     * @return bool whether the command should be publicly shown or not\n     */\n    public function isHidden(): bool\n    {\n        return $this->hidden;\n    }\n\n    /**\n     * Sets the description for the command.\n     *\n     * @return $this\n     */\n    public function setDescription(string $description): static\n    {\n        $this->description = $description;\n\n        return $this;\n    }\n\n    /**\n     * Returns the description for the command.\n     */\n    public function getDescription(): string\n    {\n        return $this->description;\n    }\n\n    /**\n     * Sets the help for the command.\n     *\n     * @return $this\n     */\n    public function setHelp(string $help): static\n    {\n        $this->help = $help;\n\n        return $this;\n    }\n\n    /**\n     * Returns the help for the command.\n     */\n    public function getHelp(): string\n    {\n        return $this->help;\n    }\n\n    /**\n     * Returns the processed help for the command replacing the %command.name% and\n     * %command.full_name% patterns with the real values dynamically.\n     */\n    public function getProcessedHelp(): string\n    {\n        $name = $this->name;\n        $isSingleCommand = $this->application?->isSingleCommand();\n\n        $placeholders = [\n            '%command.name%',\n            '%command.full_name%',\n        ];\n        $replacements = [\n            $name,\n            $isSingleCommand ? $_SERVER['PHP_SELF'] : $_SERVER['PHP_SELF'].' '.$name,\n        ];\n\n        return str_replace($placeholders, $replacements, $this->getHelp() ?: $this->getDescription());\n    }\n\n    /**\n     * Sets the aliases for the command.\n     *\n     * @param string[] $aliases An array of aliases for the command\n     *\n     * @return $this\n     *\n     * @throws InvalidArgumentException When an alias is invalid\n     */\n    public function setAliases(iterable $aliases): static\n    {\n        $list = [];\n\n        foreach ($aliases as $alias) {\n            $this->validateName($alias);\n            $list[] = $alias;\n        }\n\n        $this->aliases = \\is_array($aliases) ? $aliases : $list;\n\n        return $this;\n    }\n\n    /**\n     * Returns the aliases for the command.\n     */\n    public function getAliases(): array\n    {\n        return $this->aliases;\n    }\n\n    /**\n     * Returns the synopsis for the command.\n     *\n     * @param bool $short Whether to show the short version of the synopsis (with options folded) or not\n     */\n    public function getSynopsis(bool $short = false): string\n    {\n        $key = $short ? 'short' : 'long';\n\n        if (!isset($this->synopsis[$key])) {\n            $this->synopsis[$key] = trim(\\sprintf('%s %s', $this->name, $this->definition->getSynopsis($short)));\n        }\n\n        return $this->synopsis[$key];\n    }\n\n    /**\n     * Add a command usage example, it'll be prefixed with the command name.\n     *\n     * @return $this\n     */\n    public function addUsage(string $usage): static\n    {\n        if (!str_starts_with($usage, $this->name)) {\n            $usage = \\sprintf('%s %s', $this->name, $usage);\n        }\n\n        $this->usages[] = $usage;\n\n        return $this;\n    }\n\n    /**\n     * Returns alternative usages of the command.\n     */\n    public function getUsages(): array\n    {\n        return $this->usages;\n    }\n\n    /**\n     * Gets a helper instance by name.\n     *\n     * @throws LogicException           if no HelperSet is defined\n     * @throws InvalidArgumentException if the helper is not defined\n     */\n    public function getHelper(string $name): HelperInterface\n    {\n        if (null === $this->helperSet) {\n            throw new LogicException(\\sprintf('Cannot retrieve helper \"%s\" because there is no HelperSet defined. Did you forget to add your command to the application or to set the application on the command using the setApplication() method? You can also set the HelperSet directly using the setHelperSet() method.', $name));\n        }\n\n        return $this->helperSet->get($name);\n    }\n\n    /**\n     * Validates a command name.\n     *\n     * It must be non-empty and parts can optionally be separated by \":\".\n     *\n     * @throws InvalidArgumentException When the name is invalid\n     */\n    private function validateName(string $name): void\n    {\n        if (!preg_match('/^[^\\:]++(\\:[^\\:]++)*$/', $name)) {\n            throw new InvalidArgumentException(\\sprintf('Command name \"%s\" is invalid.', $name));\n        }\n    }\n}\n\n\n--- File Index 76: Command/LazyCommand.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Command;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Completion\\CompletionInput;\nuse Symfony\\Component\\Console\\Completion\\CompletionSuggestions;\nuse Symfony\\Component\\Console\\Completion\\Suggestion;\nuse Symfony\\Component\\Console\\Helper\\HelperInterface;\nuse Symfony\\Component\\Console\\Helper\\HelperSet;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * @author Nicolas Grekas <p@tchwork.com>\n */\nfinal class LazyCommand extends Command\n{\n    private \\Closure|Command $command;\n\n    public function __construct(\n        string $name,\n        array $aliases,\n        string $description,\n        bool $isHidden,\n        \\Closure $commandFactory,\n        private ?bool $isEnabled = true,\n    ) {\n        $this->setName($name)\n            ->setAliases($aliases)\n            ->setHidden($isHidden)\n            ->setDescription($description);\n\n        $this->command = $commandFactory;\n    }\n\n    public function ignoreValidationErrors(): void\n    {\n        $this->getCommand()->ignoreValidationErrors();\n    }\n\n    public function setApplication(?Application $application): void\n    {\n        if ($this->command instanceof parent) {\n            $this->command->setApplication($application);\n        }\n\n        parent::setApplication($application);\n    }\n\n    public function setHelperSet(HelperSet $helperSet): void\n    {\n        if ($this->command instanceof parent) {\n            $this->command->setHelperSet($helperSet);\n        }\n\n        parent::setHelperSet($helperSet);\n    }\n\n    public function isEnabled(): bool\n    {\n        return $this->isEnabled ?? $this->getCommand()->isEnabled();\n    }\n\n    public function run(InputInterface $input, OutputInterface $output): int\n    {\n        return $this->getCommand()->run($input, $output);\n    }\n\n    public function complete(CompletionInput $input, CompletionSuggestions $suggestions): void\n    {\n        $this->getCommand()->complete($input, $suggestions);\n    }\n\n    public function setCode(callable $code): static\n    {\n        $this->getCommand()->setCode($code);\n\n        return $this;\n    }\n\n    /**\n     * @internal\n     */\n    public function mergeApplicationDefinition(bool $mergeArgs = true): void\n    {\n        $this->getCommand()->mergeApplicationDefinition($mergeArgs);\n    }\n\n    public function setDefinition(array|InputDefinition $definition): static\n    {\n        $this->getCommand()->setDefinition($definition);\n\n        return $this;\n    }\n\n    public function getDefinition(): InputDefinition\n    {\n        return $this->getCommand()->getDefinition();\n    }\n\n    public function getNativeDefinition(): InputDefinition\n    {\n        return $this->getCommand()->getNativeDefinition();\n    }\n\n    /**\n     * @param array|\\Closure(CompletionInput,CompletionSuggestions):list<string|Suggestion> $suggestedValues The values used for input completion\n     */\n    public function addArgument(string $name, ?int $mode = null, string $description = '', mixed $default = null, array|\\Closure $suggestedValues = []): static\n    {\n        $this->getCommand()->addArgument($name, $mode, $description, $default, $suggestedValues);\n\n        return $this;\n    }\n\n    /**\n     * @param array|\\Closure(CompletionInput,CompletionSuggestions):list<string|Suggestion> $suggestedValues The values used for input completion\n     */\n    public function addOption(string $name, string|array|null $shortcut = null, ?int $mode = null, string $description = '', mixed $default = null, array|\\Closure $suggestedValues = []): static\n    {\n        $this->getCommand()->addOption($name, $shortcut, $mode, $description, $default, $suggestedValues);\n\n        return $this;\n    }\n\n    public function setProcessTitle(string $title): static\n    {\n        $this->getCommand()->setProcessTitle($title);\n\n        return $this;\n    }\n\n    public function setHelp(string $help): static\n    {\n        $this->getCommand()->setHelp($help);\n\n        return $this;\n    }\n\n    public function getHelp(): string\n    {\n        return $this->getCommand()->getHelp();\n    }\n\n    public function getProcessedHelp(): string\n    {\n        return $this->getCommand()->getProcessedHelp();\n    }\n\n    public function getSynopsis(bool $short = false): string\n    {\n        return $this->getCommand()->getSynopsis($short);\n    }\n\n    public function addUsage(string $usage): static\n    {\n        $this->getCommand()->addUsage($usage);\n\n        return $this;\n    }\n\n    public function getUsages(): array\n    {\n        return $this->getCommand()->getUsages();\n    }\n\n    public function getHelper(string $name): HelperInterface\n    {\n        return $this->getCommand()->getHelper($name);\n    }\n\n    public function getCommand(): parent\n    {\n        if (!$this->command instanceof \\Closure) {\n            return $this->command;\n        }\n\n        $command = $this->command = ($this->command)();\n        $command->setApplication($this->getApplication());\n\n        if (null !== $this->getHelperSet()) {\n            $command->setHelperSet($this->getHelperSet());\n        }\n\n        $command->setName($this->getName())\n            ->setAliases($this->getAliases())\n            ->setHidden($this->isHidden())\n            ->setDescription($this->getDescription());\n\n        // Will throw if the command is not correctly initialized.\n        $command->getDefinition();\n\n        return $command;\n    }\n}\n\n\n--- File Index 77: Command/SignalableCommandInterface.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Command;\n\n/**\n * Interface for command reacting to signal.\n *\n * @author Gr\u00e9goire Pineau <lyrixx@lyrix.info>\n */\ninterface SignalableCommandInterface\n{\n    /**\n     * Returns the list of signals to subscribe.\n     */\n    public function getSubscribedSignals(): array;\n\n    /**\n     * The method will be called when the application is signaled.\n     *\n     * @return int|false The exit code to return or false to continue the normal execution\n     */\n    public function handleSignal(int $signal, int|false $previousExitCode = 0): int|false;\n}\n\n\n--- File Index 78: Command/DumpCompletionCommand.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Command;\n\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Process\\Process;\n\n/**\n * Dumps the completion script for the current shell.\n *\n * @author Wouter de Jong <wouter@wouterj.nl>\n */\n#[AsCommand(name: 'completion', description: 'Dump the shell completion script')]\nfinal class DumpCompletionCommand extends Command\n{\n    private array $supportedShells;\n\n    protected function configure(): void\n    {\n        $fullCommand = $_SERVER['PHP_SELF'];\n        $commandName = basename($fullCommand);\n        $fullCommand = @realpath($fullCommand) ?: $fullCommand;\n\n        $shell = self::guessShell();\n        [$rcFile, $completionFile] = match ($shell) {\n            'fish' => ['~/.config/fish/config.fish', \"/etc/fish/completions/$commandName.fish\"],\n            'zsh' => ['~/.zshrc', '$fpath[1]/_'.$commandName],\n            default => ['~/.bashrc', \"/etc/bash_completion.d/$commandName\"],\n        };\n\n        $supportedShells = implode(', ', $this->getSupportedShells());\n\n        $this\n            ->setHelp(<<<EOH\nThe <info>%command.name%</> command dumps the shell completion script required\nto use shell autocompletion (currently, {$supportedShells} completion are supported).\n\n<comment>Static installation\n-------------------</>\n\nDump the script to a global completion file and restart your shell:\n\n    <info>%command.full_name% {$shell} | sudo tee {$completionFile}</>\n\nOr dump the script to a local file and source it:\n\n    <info>%command.full_name% {$shell} > completion.sh</>\n\n    <comment># source the file whenever you use the project</>\n    <info>source completion.sh</>\n\n    <comment># or add this line at the end of your \"{$rcFile}\" file:</>\n    <info>source /path/to/completion.sh</>\n\n<comment>Dynamic installation\n--------------------</>\n\nAdd this to the end of your shell configuration file (e.g. <info>\"{$rcFile}\"</>):\n\n    <info>eval \"$({$fullCommand} completion {$shell})\"</>\nEOH\n            )\n            ->addArgument('shell', InputArgument::OPTIONAL, 'The shell type (e.g. \"bash\"), the value of the \"$SHELL\" env var will be used if this is not given', null, $this->getSupportedShells(...))\n            ->addOption('debug', null, InputOption::VALUE_NONE, 'Tail the completion debug log')\n        ;\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $commandName = basename($_SERVER['argv'][0]);\n\n        if ($input->getOption('debug')) {\n            $this->tailDebugLog($commandName, $output);\n\n            return 0;\n        }\n\n        $shell = $input->getArgument('shell') ?? self::guessShell();\n        $completionFile = __DIR__.'/../Resources/completion.'.$shell;\n        if (!file_exists($completionFile)) {\n            $supportedShells = $this->getSupportedShells();\n\n            if ($output instanceof ConsoleOutputInterface) {\n                $output = $output->getErrorOutput();\n            }\n            if ($shell) {\n                $output->writeln(\\sprintf('<error>Detected shell \"%s\", which is not supported by Symfony shell completion (supported shells: \"%s\").</>', $shell, implode('\", \"', $supportedShells)));\n            } else {\n                $output->writeln(\\sprintf('<error>Shell not detected, Symfony shell completion only supports \"%s\").</>', implode('\", \"', $supportedShells)));\n            }\n\n            return 2;\n        }\n\n        $output->write(str_replace(['{{ COMMAND_NAME }}', '{{ VERSION }}'], [$commandName, CompleteCommand::COMPLETION_API_VERSION], file_get_contents($completionFile)));\n\n        return 0;\n    }\n\n    private static function guessShell(): string\n    {\n        return basename($_SERVER['SHELL'] ?? '');\n    }\n\n    private function tailDebugLog(string $commandName, OutputInterface $output): void\n    {\n        $debugFile = sys_get_temp_dir().'/sf_'.$commandName.'.log';\n        if (!file_exists($debugFile)) {\n            touch($debugFile);\n        }\n        $process = new Process(['tail', '-f', $debugFile], null, null, null, 0);\n        $process->run(function (string $type, string $line) use ($output): void {\n            $output->write($line);\n        });\n    }\n\n    /**\n     * @return string[]\n     */\n    private function getSupportedShells(): array\n    {\n        if (isset($this->supportedShells)) {\n            return $this->supportedShells;\n        }\n\n        $shells = [];\n\n        foreach (new \\DirectoryIterator(__DIR__.'/../Resources/') as $file) {\n            if (str_starts_with($file->getBasename(), 'completion.') && $file->isFile()) {\n                $shells[] = $file->getExtension();\n            }\n        }\n        sort($shells);\n\n        return $this->supportedShells = $shells;\n    }\n}\n\n\n--- File Index 79: Command/ListCommand.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Command;\n\nuse Symfony\\Component\\Console\\Descriptor\\ApplicationDescription;\nuse Symfony\\Component\\Console\\Helper\\DescriptorHelper;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * ListCommand displays the list of all available commands for the application.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass ListCommand extends Command\n{\n    protected function configure(): void\n    {\n        $this\n            ->setName('list')\n            ->setDefinition([\n                new InputArgument('namespace', InputArgument::OPTIONAL, 'The namespace name', null, fn () => array_keys((new ApplicationDescription($this->getApplication()))->getNamespaces())),\n                new InputOption('raw', null, InputOption::VALUE_NONE, 'To output raw command list'),\n                new InputOption('format', null, InputOption::VALUE_REQUIRED, 'The output format (txt, xml, json, or md)', 'txt', fn () => (new DescriptorHelper())->getFormats()),\n                new InputOption('short', null, InputOption::VALUE_NONE, 'To skip describing commands\\' arguments'),\n            ])\n            ->setDescription('List commands')\n            ->setHelp(<<<'EOF'\nThe <info>%command.name%</info> command lists all commands:\n\n  <info>%command.full_name%</info>\n\nYou can also display the commands for a specific namespace:\n\n  <info>%command.full_name% test</info>\n\nYou can also output the information in other formats by using the <comment>--format</comment> option:\n\n  <info>%command.full_name% --format=xml</info>\n\nIt's also possible to get raw list of commands (useful for embedding command runner):\n\n  <info>%command.full_name% --raw</info>\nEOF\n            )\n        ;\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $helper = new DescriptorHelper();\n        $helper->describe($output, $this->getApplication(), [\n            'format' => $input->getOption('format'),\n            'raw_text' => $input->getOption('raw'),\n            'namespace' => $input->getArgument('namespace'),\n            'short' => $input->getOption('short'),\n        ]);\n\n        return 0;\n    }\n}\n\n\n--- File Index 80: Command/CompleteCommand.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Command;\n\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Completion\\CompletionInput;\nuse Symfony\\Component\\Console\\Completion\\CompletionSuggestions;\nuse Symfony\\Component\\Console\\Completion\\Output\\BashCompletionOutput;\nuse Symfony\\Component\\Console\\Completion\\Output\\CompletionOutputInterface;\nuse Symfony\\Component\\Console\\Completion\\Output\\FishCompletionOutput;\nuse Symfony\\Component\\Console\\Completion\\Output\\ZshCompletionOutput;\nuse Symfony\\Component\\Console\\Exception\\CommandNotFoundException;\nuse Symfony\\Component\\Console\\Exception\\ExceptionInterface;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Responsible for providing the values to the shell completion.\n *\n * @author Wouter de Jong <wouter@wouterj.nl>\n */\n#[AsCommand(name: '|_complete', description: 'Internal command to provide shell completion suggestions')]\nfinal class CompleteCommand extends Command\n{\n    public const COMPLETION_API_VERSION = '1';\n\n    private array $completionOutputs;\n    private bool $isDebug = false;\n\n    /**\n     * @param array<string, class-string<CompletionOutputInterface>> $completionOutputs A list of additional completion outputs, with shell name as key and FQCN as value\n     */\n    public function __construct(array $completionOutputs = [])\n    {\n        // must be set before the parent constructor, as the property value is used in configure()\n        $this->completionOutputs = $completionOutputs + [\n            'bash' => BashCompletionOutput::class,\n            'fish' => FishCompletionOutput::class,\n            'zsh' => ZshCompletionOutput::class,\n        ];\n\n        parent::__construct();\n    }\n\n    protected function configure(): void\n    {\n        $this\n            ->addOption('shell', 's', InputOption::VALUE_REQUIRED, 'The shell type (\"'.implode('\", \"', array_keys($this->completionOutputs)).'\")')\n            ->addOption('input', 'i', InputOption::VALUE_REQUIRED | InputOption::VALUE_IS_ARRAY, 'An array of input tokens (e.g. COMP_WORDS or argv)')\n            ->addOption('current', 'c', InputOption::VALUE_REQUIRED, 'The index of the \"input\" array that the cursor is in (e.g. COMP_CWORD)')\n            ->addOption('api-version', 'a', InputOption::VALUE_REQUIRED, 'The API version of the completion script')\n            ->addOption('symfony', 'S', InputOption::VALUE_REQUIRED, 'deprecated')\n        ;\n    }\n\n    protected function initialize(InputInterface $input, OutputInterface $output): void\n    {\n        $this->isDebug = filter_var(getenv('SYMFONY_COMPLETION_DEBUG'), \\FILTER_VALIDATE_BOOL);\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        try {\n            // \"symfony\" must be kept for compat with the shell scripts generated by Symfony Console 5.4 - 6.1\n            $version = $input->getOption('symfony') ? '1' : $input->getOption('api-version');\n            if ($version && version_compare($version, self::COMPLETION_API_VERSION, '<')) {\n                $message = \\sprintf('Completion script version is not supported (\"%s\" given, \">=%s\" required).', $version, self::COMPLETION_API_VERSION);\n                $this->log($message);\n\n                $output->writeln($message.' Install the Symfony completion script again by using the \"completion\" command.');\n\n                return 126;\n            }\n\n            $shell = $input->getOption('shell');\n            if (!$shell) {\n                throw new \\RuntimeException('The \"--shell\" option must be set.');\n            }\n\n            if (!$completionOutput = $this->completionOutputs[$shell] ?? false) {\n                throw new \\RuntimeException(\\sprintf('Shell completion is not supported for your shell: \"%s\" (supported: \"%s\").', $shell, implode('\", \"', array_keys($this->completionOutputs))));\n            }\n\n            $completionInput = $this->createCompletionInput($input);\n            $suggestions = new CompletionSuggestions();\n\n            $this->log([\n                '',\n                '<comment>'.date('Y-m-d H:i:s').'</>',\n                '<info>Input:</> <comment>(\"|\" indicates the cursor position)</>',\n                '  '.$completionInput,\n                '<info>Command:</>',\n                '  '.implode(' ', $_SERVER['argv']),\n                '<info>Messages:</>',\n            ]);\n\n            $command = $this->findCommand($completionInput);\n            if (null === $command) {\n                $this->log('  No command found, completing using the Application class.');\n\n                $this->getApplication()->complete($completionInput, $suggestions);\n            } elseif (\n                $completionInput->mustSuggestArgumentValuesFor('command')\n                && $command->getName() !== $completionInput->getCompletionValue()\n                && !\\in_array($completionInput->getCompletionValue(), $command->getAliases(), true)\n            ) {\n                $this->log('  No command found, completing using the Application class.');\n\n                // expand shortcut names (\"cache:cl<TAB>\") into their full name (\"cache:clear\")\n                $suggestions->suggestValues(array_filter(array_merge([$command->getName()], $command->getAliases())));\n            } else {\n                $command->mergeApplicationDefinition();\n                $completionInput->bind($command->getDefinition());\n\n                if (CompletionInput::TYPE_OPTION_NAME === $completionInput->getCompletionType()) {\n                    $this->log('  Completing option names for the <comment>'.($command instanceof LazyCommand ? $command->getCommand() : $command)::class.'</> command.');\n\n                    $suggestions->suggestOptions($command->getDefinition()->getOptions());\n                } else {\n                    $this->log([\n                        '  Completing using the <comment>'.($command instanceof LazyCommand ? $command->getCommand() : $command)::class.'</> class.',\n                        '  Completing <comment>'.$completionInput->getCompletionType().'</> for <comment>'.$completionInput->getCompletionName().'</>',\n                    ]);\n                    if (null !== $compval = $completionInput->getCompletionValue()) {\n                        $this->log('  Current value: <comment>'.$compval.'</>');\n                    }\n\n                    $command->complete($completionInput, $suggestions);\n                }\n            }\n\n            /** @var CompletionOutputInterface $completionOutput */\n            $completionOutput = new $completionOutput();\n\n            $this->log('<info>Suggestions:</>');\n            if ($options = $suggestions->getOptionSuggestions()) {\n                $this->log('  --'.implode(' --', array_map(fn ($o) => $o->getName(), $options)));\n            } elseif ($values = $suggestions->getValueSuggestions()) {\n                $this->log('  '.implode(' ', $values));\n            } else {\n                $this->log('  <comment>No suggestions were provided</>');\n            }\n\n            $completionOutput->write($suggestions, $output);\n        } catch (\\Throwable $e) {\n            $this->log([\n                '<error>Error!</error>',\n                (string) $e,\n            ]);\n\n            if ($output->isDebug()) {\n                throw $e;\n            }\n\n            return 2;\n        }\n\n        return 0;\n    }\n\n    private function createCompletionInput(InputInterface $input): CompletionInput\n    {\n        $currentIndex = $input->getOption('current');\n        if (!$currentIndex || !ctype_digit($currentIndex)) {\n            throw new \\RuntimeException('The \"--current\" option must be set and it must be an integer.');\n        }\n\n        $completionInput = CompletionInput::fromTokens($input->getOption('input'), (int) $currentIndex);\n\n        try {\n            $completionInput->bind($this->getApplication()->getDefinition());\n        } catch (ExceptionInterface) {\n        }\n\n        return $completionInput;\n    }\n\n    private function findCommand(CompletionInput $completionInput): ?Command\n    {\n        try {\n            $inputName = $completionInput->getFirstArgument();\n            if (null === $inputName) {\n                return null;\n            }\n\n            return $this->getApplication()->find($inputName);\n        } catch (CommandNotFoundException) {\n        }\n\n        return null;\n    }\n\n    private function log($messages): void\n    {\n        if (!$this->isDebug) {\n            return;\n        }\n\n        $commandName = basename($_SERVER['argv'][0]);\n        file_put_contents(sys_get_temp_dir().'/sf_'.$commandName.'.log', implode(\\PHP_EOL, (array) $messages).\\PHP_EOL, \\FILE_APPEND);\n    }\n}\n\n\n--- File Index 81: Command/TraceableCommand.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Command;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Completion\\CompletionInput;\nuse Symfony\\Component\\Console\\Completion\\CompletionSuggestions;\nuse Symfony\\Component\\Console\\Helper\\HelperInterface;\nuse Symfony\\Component\\Console\\Helper\\HelperSet;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Stopwatch\\Stopwatch;\n\n/**\n * @internal\n *\n * @author Jules Pietri <jules@heahprod.com>\n */\nfinal class TraceableCommand extends Command implements SignalableCommandInterface\n{\n    public readonly Command $command;\n    public int $exitCode;\n    public ?int $interruptedBySignal = null;\n    public bool $ignoreValidation;\n    public bool $isInteractive = false;\n    public string $duration = 'n/a';\n    public string $maxMemoryUsage = 'n/a';\n    public InputInterface $input;\n    public OutputInterface $output;\n    /** @var array<string, mixed> */\n    public array $arguments;\n    /** @var array<string, mixed> */\n    public array $options;\n    /** @var array<string, mixed> */\n    public array $interactiveInputs = [];\n    public array $handledSignals = [];\n\n    public function __construct(\n        Command $command,\n        private readonly Stopwatch $stopwatch,\n    ) {\n        if ($command instanceof LazyCommand) {\n            $command = $command->getCommand();\n        }\n\n        $this->command = $command;\n\n        // prevent call to self::getDefaultDescription()\n        $this->setDescription($command->getDescription());\n\n        parent::__construct($command->getName());\n\n        // init below enables calling {@see parent::run()}\n        [$code, $processTitle, $ignoreValidationErrors] = \\Closure::bind(function () {\n            return [$this->code, $this->processTitle, $this->ignoreValidationErrors];\n        }, $command, Command::class)();\n\n        if (\\is_callable($code)) {\n            $this->setCode($code);\n        }\n\n        if ($processTitle) {\n            parent::setProcessTitle($processTitle);\n        }\n\n        if ($ignoreValidationErrors) {\n            parent::ignoreValidationErrors();\n        }\n\n        $this->ignoreValidation = $ignoreValidationErrors;\n    }\n\n    public function __call(string $name, array $arguments): mixed\n    {\n        return $this->command->{$name}(...$arguments);\n    }\n\n    public function getSubscribedSignals(): array\n    {\n        return $this->command instanceof SignalableCommandInterface ? $this->command->getSubscribedSignals() : [];\n    }\n\n    public function handleSignal(int $signal, int|false $previousExitCode = 0): int|false\n    {\n        if (!$this->command instanceof SignalableCommandInterface) {\n            return false;\n        }\n\n        $event = $this->stopwatch->start($this->getName().'.handle_signal');\n\n        $exit = $this->command->handleSignal($signal, $previousExitCode);\n\n        $event->stop();\n\n        if (!isset($this->handledSignals[$signal])) {\n            $this->handledSignals[$signal] = [\n                'handled' => 0,\n                'duration' => 0,\n                'memory' => 0,\n            ];\n        }\n\n        ++$this->handledSignals[$signal]['handled'];\n        $this->handledSignals[$signal]['duration'] += $event->getDuration();\n        $this->handledSignals[$signal]['memory'] = max(\n            $this->handledSignals[$signal]['memory'],\n            $event->getMemory() >> 20\n        );\n\n        return $exit;\n    }\n\n    /**\n     * {@inheritdoc}\n     *\n     * Calling parent method is required to be used in {@see parent::run()}.\n     */\n    public function ignoreValidationErrors(): void\n    {\n        $this->ignoreValidation = true;\n        $this->command->ignoreValidationErrors();\n\n        parent::ignoreValidationErrors();\n    }\n\n    public function setApplication(?Application $application = null): void\n    {\n        $this->command->setApplication($application);\n    }\n\n    public function getApplication(): ?Application\n    {\n        return $this->command->getApplication();\n    }\n\n    public function setHelperSet(HelperSet $helperSet): void\n    {\n        $this->command->setHelperSet($helperSet);\n    }\n\n    public function getHelperSet(): ?HelperSet\n    {\n        return $this->command->getHelperSet();\n    }\n\n    public function isEnabled(): bool\n    {\n        return $this->command->isEnabled();\n    }\n\n    public function complete(CompletionInput $input, CompletionSuggestions $suggestions): void\n    {\n        $this->command->complete($input, $suggestions);\n    }\n\n    /**\n     * {@inheritdoc}\n     *\n     * Calling parent method is required to be used in {@see parent::run()}.\n     */\n    public function setCode(callable $code): static\n    {\n        $this->command->setCode($code);\n\n        return parent::setCode(function (InputInterface $input, OutputInterface $output) use ($code): int {\n            $event = $this->stopwatch->start($this->getName().'.code');\n\n            $this->exitCode = $code($input, $output);\n\n            $event->stop();\n\n            return $this->exitCode;\n        });\n    }\n\n    /**\n     * @internal\n     */\n    public function mergeApplicationDefinition(bool $mergeArgs = true): void\n    {\n        $this->command->mergeApplicationDefinition($mergeArgs);\n    }\n\n    public function setDefinition(array|InputDefinition $definition): static\n    {\n        $this->command->setDefinition($definition);\n\n        return $this;\n    }\n\n    public function getDefinition(): InputDefinition\n    {\n        return $this->command->getDefinition();\n    }\n\n    public function getNativeDefinition(): InputDefinition\n    {\n        return $this->command->getNativeDefinition();\n    }\n\n    public function addArgument(string $name, ?int $mode = null, string $description = '', mixed $default = null, array|\\Closure $suggestedValues = []): static\n    {\n        $this->command->addArgument($name, $mode, $description, $default, $suggestedValues);\n\n        return $this;\n    }\n\n    public function addOption(string $name, string|array|null $shortcut = null, ?int $mode = null, string $description = '', mixed $default = null, array|\\Closure $suggestedValues = []): static\n    {\n        $this->command->addOption($name, $shortcut, $mode, $description, $default, $suggestedValues);\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     *\n     * Calling parent method is required to be used in {@see parent::run()}.\n     */\n    public function setProcessTitle(string $title): static\n    {\n        $this->command->setProcessTitle($title);\n\n        return parent::setProcessTitle($title);\n    }\n\n    public function setHelp(string $help): static\n    {\n        $this->command->setHelp($help);\n\n        return $this;\n    }\n\n    public function getHelp(): string\n    {\n        return $this->command->getHelp();\n    }\n\n    public function getProcessedHelp(): string\n    {\n        return $this->command->getProcessedHelp();\n    }\n\n    public function getSynopsis(bool $short = false): string\n    {\n        return $this->command->getSynopsis($short);\n    }\n\n    public function addUsage(string $usage): static\n    {\n        $this->command->addUsage($usage);\n\n        return $this;\n    }\n\n    public function getUsages(): array\n    {\n        return $this->command->getUsages();\n    }\n\n    public function getHelper(string $name): HelperInterface\n    {\n        return $this->command->getHelper($name);\n    }\n\n    public function run(InputInterface $input, OutputInterface $output): int\n    {\n        $this->input = $input;\n        $this->output = $output;\n        $this->arguments = $input->getArguments();\n        $this->options = $input->getOptions();\n        $event = $this->stopwatch->start($this->getName(), 'command');\n\n        try {\n            $this->exitCode = parent::run($input, $output);\n        } finally {\n            $event->stop();\n\n            if ($output instanceof ConsoleOutputInterface && $output->isDebug()) {\n                $output->getErrorOutput()->writeln((string) $event);\n            }\n\n            $this->duration = $event->getDuration().' ms';\n            $this->maxMemoryUsage = ($event->getMemory() >> 20).' MiB';\n\n            if ($this->isInteractive) {\n                $this->extractInteractiveInputs($input->getArguments(), $input->getOptions());\n            }\n        }\n\n        return $this->exitCode;\n    }\n\n    protected function initialize(InputInterface $input, OutputInterface $output): void\n    {\n        $event = $this->stopwatch->start($this->getName().'.init', 'command');\n\n        $this->command->initialize($input, $output);\n\n        $event->stop();\n    }\n\n    protected function interact(InputInterface $input, OutputInterface $output): void\n    {\n        if (!$this->isInteractive = Command::class !== (new \\ReflectionMethod($this->command, 'interact'))->getDeclaringClass()->getName()) {\n            return;\n        }\n\n        $event = $this->stopwatch->start($this->getName().'.interact', 'command');\n\n        $this->command->interact($input, $output);\n\n        $event->stop();\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $event = $this->stopwatch->start($this->getName().'.execute', 'command');\n\n        $exitCode = $this->command->execute($input, $output);\n\n        $event->stop();\n\n        return $exitCode;\n    }\n\n    private function extractInteractiveInputs(array $arguments, array $options): void\n    {\n        foreach ($arguments as $argName => $argValue) {\n            if (\\array_key_exists($argName, $this->arguments) && $this->arguments[$argName] === $argValue) {\n                continue;\n            }\n\n            $this->interactiveInputs[$argName] = $argValue;\n        }\n\n        foreach ($options as $optName => $optValue) {\n            if (\\array_key_exists($optName, $this->options) && $this->options[$optName] === $optValue) {\n                continue;\n            }\n\n            $this->interactiveInputs['--'.$optName] = $optValue;\n        }\n    }\n}\n\n\n--- File Index 82: Tester/ApplicationTester.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Tester;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\n\n/**\n * Eases the testing of console applications.\n *\n * When testing an application, don't forget to disable the auto exit flag:\n *\n *     $application = new Application();\n *     $application->setAutoExit(false);\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass ApplicationTester\n{\n    use TesterTrait;\n\n    public function __construct(\n        private Application $application,\n    ) {\n    }\n\n    /**\n     * Executes the application.\n     *\n     * Available options:\n     *\n     *  * interactive:               Sets the input interactive flag\n     *  * decorated:                 Sets the output decorated flag\n     *  * verbosity:                 Sets the output verbosity flag\n     *  * capture_stderr_separately: Make output of stdOut and stdErr separately available\n     *\n     * @return int The command exit code\n     */\n    public function run(array $input, array $options = []): int\n    {\n        $prevShellVerbosity = getenv('SHELL_VERBOSITY');\n\n        try {\n            $this->input = new ArrayInput($input);\n            if (isset($options['interactive'])) {\n                $this->input->setInteractive($options['interactive']);\n            }\n\n            if ($this->inputs) {\n                $this->input->setStream(self::createStream($this->inputs));\n            }\n\n            $this->initOutput($options);\n\n            return $this->statusCode = $this->application->run($this->input, $this->output);\n        } finally {\n            // SHELL_VERBOSITY is set by Application::configureIO so we need to unset/reset it\n            // to its previous value to avoid one test's verbosity to spread to the following tests\n            if (false === $prevShellVerbosity) {\n                if (\\function_exists('putenv')) {\n                    @putenv('SHELL_VERBOSITY');\n                }\n                unset($_ENV['SHELL_VERBOSITY']);\n                unset($_SERVER['SHELL_VERBOSITY']);\n            } else {\n                if (\\function_exists('putenv')) {\n                    @putenv('SHELL_VERBOSITY='.$prevShellVerbosity);\n                }\n                $_ENV['SHELL_VERBOSITY'] = $prevShellVerbosity;\n                $_SERVER['SHELL_VERBOSITY'] = $prevShellVerbosity;\n            }\n        }\n    }\n}\n\n\n--- File Index 83: Tester/CommandCompletionTester.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Tester;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Completion\\CompletionInput;\nuse Symfony\\Component\\Console\\Completion\\CompletionSuggestions;\n\n/**\n * Eases the testing of command completion.\n *\n * @author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>\n */\nclass CommandCompletionTester\n{\n    public function __construct(\n        private Command $command,\n    ) {\n    }\n\n    /**\n     * Create completion suggestions from input tokens.\n     */\n    public function complete(array $input): array\n    {\n        $currentIndex = \\count($input);\n        if ('' === end($input)) {\n            array_pop($input);\n        }\n        array_unshift($input, $this->command->getName());\n\n        $completionInput = CompletionInput::fromTokens($input, $currentIndex);\n        $completionInput->bind($this->command->getDefinition());\n        $suggestions = new CompletionSuggestions();\n\n        $this->command->complete($completionInput, $suggestions);\n\n        $options = [];\n        foreach ($suggestions->getOptionSuggestions() as $option) {\n            $options[] = '--'.$option->getName();\n        }\n\n        return array_map('strval', array_merge($options, $suggestions->getValueSuggestions()));\n    }\n}\n\n\n--- File Index 84: Tester/CommandTester.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Tester;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\n\n/**\n * Eases the testing of console commands.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n * @author Robin Chalas <robin.chalas@gmail.com>\n */\nclass CommandTester\n{\n    use TesterTrait;\n\n    public function __construct(\n        private Command $command,\n    ) {\n    }\n\n    /**\n     * Executes the command.\n     *\n     * Available execution options:\n     *\n     *  * interactive:               Sets the input interactive flag\n     *  * decorated:                 Sets the output decorated flag\n     *  * verbosity:                 Sets the output verbosity flag\n     *  * capture_stderr_separately: Make output of stdOut and stdErr separately available\n     *\n     * @param array $input   An array of command arguments and options\n     * @param array $options An array of execution options\n     *\n     * @return int The command exit code\n     */\n    public function execute(array $input, array $options = []): int\n    {\n        // set the command name automatically if the application requires\n        // this argument and no command name was passed\n        if (!isset($input['command'])\n            && (null !== $application = $this->command->getApplication())\n            && $application->getDefinition()->hasArgument('command')\n        ) {\n            $input = array_merge(['command' => $this->command->getName()], $input);\n        }\n\n        $this->input = new ArrayInput($input);\n        // Use an in-memory input stream even if no inputs are set so that QuestionHelper::ask() does not rely on the blocking STDIN.\n        $this->input->setStream(self::createStream($this->inputs));\n\n        if (isset($options['interactive'])) {\n            $this->input->setInteractive($options['interactive']);\n        }\n\n        if (!isset($options['decorated'])) {\n            $options['decorated'] = false;\n        }\n\n        $this->initOutput($options);\n\n        return $this->statusCode = $this->command->run($this->input, $this->output);\n    }\n}\n\n\n--- File Index 85: Tester/TesterTrait.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Tester;\n\nuse PHPUnit\\Framework\\Assert;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutput;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Output\\StreamOutput;\nuse Symfony\\Component\\Console\\Tester\\Constraint\\CommandIsSuccessful;\n\n/**\n * @author Amrouche Hamza <hamza.simperfit@gmail.com>\n */\ntrait TesterTrait\n{\n    private StreamOutput $output;\n    private array $inputs = [];\n    private bool $captureStreamsIndependently = false;\n    private InputInterface $input;\n    private int $statusCode;\n\n    /**\n     * Gets the display returned by the last execution of the command or application.\n     *\n     * @throws \\RuntimeException If it's called before the execute method\n     */\n    public function getDisplay(bool $normalize = false): string\n    {\n        if (!isset($this->output)) {\n            throw new \\RuntimeException('Output not initialized, did you execute the command before requesting the display?');\n        }\n\n        rewind($this->output->getStream());\n\n        $display = stream_get_contents($this->output->getStream());\n\n        if ($normalize) {\n            $display = str_replace(\\PHP_EOL, \"\\n\", $display);\n        }\n\n        return $display;\n    }\n\n    /**\n     * Gets the output written to STDERR by the application.\n     *\n     * @param bool $normalize Whether to normalize end of lines to \\n or not\n     */\n    public function getErrorOutput(bool $normalize = false): string\n    {\n        if (!$this->captureStreamsIndependently) {\n            throw new \\LogicException('The error output is not available when the tester is run without \"capture_stderr_separately\" option set.');\n        }\n\n        rewind($this->output->getErrorOutput()->getStream());\n\n        $display = stream_get_contents($this->output->getErrorOutput()->getStream());\n\n        if ($normalize) {\n            $display = str_replace(\\PHP_EOL, \"\\n\", $display);\n        }\n\n        return $display;\n    }\n\n    /**\n     * Gets the input instance used by the last execution of the command or application.\n     */\n    public function getInput(): InputInterface\n    {\n        return $this->input;\n    }\n\n    /**\n     * Gets the output instance used by the last execution of the command or application.\n     */\n    public function getOutput(): OutputInterface\n    {\n        return $this->output;\n    }\n\n    /**\n     * Gets the status code returned by the last execution of the command or application.\n     *\n     * @throws \\RuntimeException If it's called before the execute method\n     */\n    public function getStatusCode(): int\n    {\n        return $this->statusCode ?? throw new \\RuntimeException('Status code not initialized, did you execute the command before requesting the status code?');\n    }\n\n    public function assertCommandIsSuccessful(string $message = ''): void\n    {\n        Assert::assertThat($this->statusCode, new CommandIsSuccessful(), $message);\n    }\n\n    /**\n     * Sets the user inputs.\n     *\n     * @param array $inputs An array of strings representing each input\n     *                      passed to the command input stream\n     *\n     * @return $this\n     */\n    public function setInputs(array $inputs): static\n    {\n        $this->inputs = $inputs;\n\n        return $this;\n    }\n\n    /**\n     * Initializes the output property.\n     *\n     * Available options:\n     *\n     *  * decorated:                 Sets the output decorated flag\n     *  * verbosity:                 Sets the output verbosity flag\n     *  * capture_stderr_separately: Make output of stdOut and stdErr separately available\n     */\n    private function initOutput(array $options): void\n    {\n        $this->captureStreamsIndependently = $options['capture_stderr_separately'] ?? false;\n        if (!$this->captureStreamsIndependently) {\n            $this->output = new StreamOutput(fopen('php://memory', 'w', false));\n            if (isset($options['decorated'])) {\n                $this->output->setDecorated($options['decorated']);\n            }\n            if (isset($options['verbosity'])) {\n                $this->output->setVerbosity($options['verbosity']);\n            }\n        } else {\n            $this->output = new ConsoleOutput(\n                $options['verbosity'] ?? ConsoleOutput::VERBOSITY_NORMAL,\n                $options['decorated'] ?? null\n            );\n\n            $errorOutput = new StreamOutput(fopen('php://memory', 'w', false));\n            $errorOutput->setFormatter($this->output->getFormatter());\n            $errorOutput->setVerbosity($this->output->getVerbosity());\n            $errorOutput->setDecorated($this->output->isDecorated());\n\n            $reflectedOutput = new \\ReflectionObject($this->output);\n            $strErrProperty = $reflectedOutput->getProperty('stderr');\n            $strErrProperty->setValue($this->output, $errorOutput);\n\n            $reflectedParent = $reflectedOutput->getParentClass();\n            $streamProperty = $reflectedParent->getProperty('stream');\n            $streamProperty->setValue($this->output, fopen('php://memory', 'w', false));\n        }\n    }\n\n    /**\n     * @return resource\n     */\n    private static function createStream(array $inputs)\n    {\n        $stream = fopen('php://memory', 'r+', false);\n\n        foreach ($inputs as $input) {\n            fwrite($stream, $input.\\PHP_EOL);\n        }\n\n        rewind($stream);\n\n        return $stream;\n    }\n}\n\n\n--- File Index 86: Tester/Constraint/CommandIsSuccessful.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Tester\\Constraint;\n\nuse PHPUnit\\Framework\\Constraint\\Constraint;\nuse Symfony\\Component\\Console\\Command\\Command;\n\nfinal class CommandIsSuccessful extends Constraint\n{\n    public function toString(): string\n    {\n        return 'is successful';\n    }\n\n    protected function matches($other): bool\n    {\n        return Command::SUCCESS === $other;\n    }\n\n    protected function failureDescription($other): string\n    {\n        return 'the command '.$this->toString();\n    }\n\n    protected function additionalFailureDescription($other): string\n    {\n        $mapping = [\n            Command::FAILURE => 'Command failed.',\n            Command::INVALID => 'Command was invalid.',\n        ];\n\n        return $mapping[$other] ?? \\sprintf('Command returned exit status %d.', $other);\n    }\n}\n\n\n--- File Index 87: Messenger/RunCommandMessage.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Messenger;\n\nuse Symfony\\Component\\Console\\Exception\\RunCommandFailedException;\n\n/**\n * @author Kevin Bond <kevinbond@gmail.com>\n */\nclass RunCommandMessage implements \\Stringable\n{\n    /**\n     * @param bool $throwOnFailure  If the command has a non-zero exit code, throw {@see RunCommandFailedException}\n     * @param bool $catchExceptions @see Application::setCatchExceptions()\n     */\n    public function __construct(\n        public readonly string $input,\n        public readonly bool $throwOnFailure = true,\n        public readonly bool $catchExceptions = false,\n    ) {\n    }\n\n    public function __toString(): string\n    {\n        return $this->input;\n    }\n}\n\n\n--- File Index 88: Messenger/RunCommandMessageHandler.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Messenger;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Exception\\RunCommandFailedException;\nuse Symfony\\Component\\Console\\Input\\StringInput;\nuse Symfony\\Component\\Console\\Output\\BufferedOutput;\n\n/**\n * @author Kevin Bond <kevinbond@gmail.com>\n */\nfinal class RunCommandMessageHandler\n{\n    public function __construct(\n        private readonly Application $application,\n    ) {\n    }\n\n    public function __invoke(RunCommandMessage $message): RunCommandContext\n    {\n        $input = new StringInput($message->input);\n        $output = new BufferedOutput();\n\n        $this->application->setCatchExceptions($message->catchExceptions);\n\n        try {\n            $exitCode = $this->application->run($input, $output);\n        } catch (\\Throwable $e) {\n            throw new RunCommandFailedException($e, new RunCommandContext($message, Command::FAILURE, $output->fetch()));\n        }\n\n        if ($message->throwOnFailure && Command::SUCCESS !== $exitCode) {\n            throw new RunCommandFailedException(\\sprintf('Command \"%s\" exited with code \"%s\".', $message->input, $exitCode), new RunCommandContext($message, $exitCode, $output->fetch()));\n        }\n\n        return new RunCommandContext($message, $exitCode, $output->fetch());\n    }\n}\n\n\n--- File Index 89: Messenger/RunCommandContext.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Messenger;\n\n/**\n * @author Kevin Bond <kevinbond@gmail.com>\n */\nfinal class RunCommandContext\n{\n    public function __construct(\n        public readonly RunCommandMessage $message,\n        public readonly int $exitCode,\n        public readonly string $output,\n    ) {\n    }\n}\n\n\n--- File Index 90: Style/OutputStyle.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Style;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\nuse Symfony\\Component\\Console\\Helper\\ProgressBar;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Decorates output to add console style guide helpers.\n *\n * @author Kevin Bond <kevinbond@gmail.com>\n */\nabstract class OutputStyle implements OutputInterface, StyleInterface\n{\n    public function __construct(\n        private OutputInterface $output,\n    ) {\n    }\n\n    public function newLine(int $count = 1): void\n    {\n        $this->output->write(str_repeat(\\PHP_EOL, $count));\n    }\n\n    public function createProgressBar(int $max = 0): ProgressBar\n    {\n        return new ProgressBar($this->output, $max);\n    }\n\n    public function write(string|iterable $messages, bool $newline = false, int $type = self::OUTPUT_NORMAL): void\n    {\n        $this->output->write($messages, $newline, $type);\n    }\n\n    public function writeln(string|iterable $messages, int $type = self::OUTPUT_NORMAL): void\n    {\n        $this->output->writeln($messages, $type);\n    }\n\n    public function setVerbosity(int $level): void\n    {\n        $this->output->setVerbosity($level);\n    }\n\n    public function getVerbosity(): int\n    {\n        return $this->output->getVerbosity();\n    }\n\n    public function setDecorated(bool $decorated): void\n    {\n        $this->output->setDecorated($decorated);\n    }\n\n    public function isDecorated(): bool\n    {\n        return $this->output->isDecorated();\n    }\n\n    public function setFormatter(OutputFormatterInterface $formatter): void\n    {\n        $this->output->setFormatter($formatter);\n    }\n\n    public function getFormatter(): OutputFormatterInterface\n    {\n        return $this->output->getFormatter();\n    }\n\n    public function isSilent(): bool\n    {\n        // @deprecated since Symfony 7.2, change to $this->output->isSilent() in 8.0\n        return method_exists($this->output, 'isSilent') ? $this->output->isSilent() : self::VERBOSITY_SILENT === $this->output->getVerbosity();\n    }\n\n    public function isQuiet(): bool\n    {\n        return $this->output->isQuiet();\n    }\n\n    public function isVerbose(): bool\n    {\n        return $this->output->isVerbose();\n    }\n\n    public function isVeryVerbose(): bool\n    {\n        return $this->output->isVeryVerbose();\n    }\n\n    public function isDebug(): bool\n    {\n        return $this->output->isDebug();\n    }\n\n    protected function getErrorOutput(): OutputInterface\n    {\n        if (!$this->output instanceof ConsoleOutputInterface) {\n            return $this->output;\n        }\n\n        return $this->output->getErrorOutput();\n    }\n}\n\n\n--- File Index 91: Style/SymfonyStyle.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Style;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\RuntimeException;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatter;\nuse Symfony\\Component\\Console\\Helper\\Helper;\nuse Symfony\\Component\\Console\\Helper\\OutputWrapper;\nuse Symfony\\Component\\Console\\Helper\\ProgressBar;\nuse Symfony\\Component\\Console\\Helper\\SymfonyQuestionHelper;\nuse Symfony\\Component\\Console\\Helper\\Table;\nuse Symfony\\Component\\Console\\Helper\\TableCell;\nuse Symfony\\Component\\Console\\Helper\\TableSeparator;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Symfony\\Component\\Console\\Output\\ConsoleSectionOutput;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Output\\TrimmedBufferOutput;\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion;\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\nuse Symfony\\Component\\Console\\Terminal;\n\n/**\n * Output decorator helpers for the Symfony Style Guide.\n *\n * @author Kevin Bond <kevinbond@gmail.com>\n */\nclass SymfonyStyle extends OutputStyle\n{\n    public const MAX_LINE_LENGTH = 120;\n\n    private SymfonyQuestionHelper $questionHelper;\n    private ProgressBar $progressBar;\n    private int $lineLength;\n    private TrimmedBufferOutput $bufferedOutput;\n\n    public function __construct(\n        private InputInterface $input,\n        private OutputInterface $output,\n    ) {\n        $this->bufferedOutput = new TrimmedBufferOutput(\\DIRECTORY_SEPARATOR === '\\\\' ? 4 : 2, $output->getVerbosity(), false, clone $output->getFormatter());\n        // Windows cmd wraps lines as soon as the terminal width is reached, whether there are following chars or not.\n        $width = (new Terminal())->getWidth() ?: self::MAX_LINE_LENGTH;\n        $this->lineLength = min($width - (int) (\\DIRECTORY_SEPARATOR === '\\\\'), self::MAX_LINE_LENGTH);\n\n        parent::__construct($output);\n    }\n\n    /**\n     * Formats a message as a block of text.\n     */\n    public function block(string|array $messages, ?string $type = null, ?string $style = null, string $prefix = ' ', bool $padding = false, bool $escape = true): void\n    {\n        $messages = \\is_array($messages) ? array_values($messages) : [$messages];\n\n        $this->autoPrependBlock();\n        $this->writeln($this->createBlock($messages, $type, $style, $prefix, $padding, $escape));\n        $this->newLine();\n    }\n\n    public function title(string $message): void\n    {\n        $this->autoPrependBlock();\n        $this->writeln([\n            \\sprintf('<comment>%s</>', OutputFormatter::escapeTrailingBackslash($message)),\n            \\sprintf('<comment>%s</>', str_repeat('=', Helper::width(Helper::removeDecoration($this->getFormatter(), $message)))),\n        ]);\n        $this->newLine();\n    }\n\n    public function section(string $message): void\n    {\n        $this->autoPrependBlock();\n        $this->writeln([\n            \\sprintf('<comment>%s</>', OutputFormatter::escapeTrailingBackslash($message)),\n            \\sprintf('<comment>%s</>', str_repeat('-', Helper::width(Helper::removeDecoration($this->getFormatter(), $message)))),\n        ]);\n        $this->newLine();\n    }\n\n    public function listing(array $elements): void\n    {\n        $this->autoPrependText();\n        $elements = array_map(fn ($element) => \\sprintf(' * %s', $element), $elements);\n\n        $this->writeln($elements);\n        $this->newLine();\n    }\n\n    public function text(string|array $message): void\n    {\n        $this->autoPrependText();\n\n        $messages = \\is_array($message) ? array_values($message) : [$message];\n        foreach ($messages as $message) {\n            $this->writeln(\\sprintf(' %s', $message));\n        }\n    }\n\n    /**\n     * Formats a command comment.\n     */\n    public function comment(string|array $message): void\n    {\n        $this->block($message, null, null, '<fg=default;bg=default> // </>', false, false);\n    }\n\n    public function success(string|array $message): void\n    {\n        $this->block($message, 'OK', 'fg=black;bg=green', ' ', true);\n    }\n\n    public function error(string|array $message): void\n    {\n        $this->block($message, 'ERROR', 'fg=white;bg=red', ' ', true);\n    }\n\n    public function warning(string|array $message): void\n    {\n        $this->block($message, 'WARNING', 'fg=black;bg=yellow', ' ', true);\n    }\n\n    public function note(string|array $message): void\n    {\n        $this->block($message, 'NOTE', 'fg=yellow', ' ! ');\n    }\n\n    /**\n     * Formats an info message.\n     */\n    public function info(string|array $message): void\n    {\n        $this->block($message, 'INFO', 'fg=green', ' ', true);\n    }\n\n    public function caution(string|array $message): void\n    {\n        $this->block($message, 'CAUTION', 'fg=white;bg=red', ' ! ', true);\n    }\n\n    public function table(array $headers, array $rows): void\n    {\n        $this->createTable()\n            ->setHeaders($headers)\n            ->setRows($rows)\n            ->render()\n        ;\n\n        $this->newLine();\n    }\n\n    /**\n     * Formats a horizontal table.\n     */\n    public function horizontalTable(array $headers, array $rows): void\n    {\n        $this->createTable()\n            ->setHorizontal(true)\n            ->setHeaders($headers)\n            ->setRows($rows)\n            ->render()\n        ;\n\n        $this->newLine();\n    }\n\n    /**\n     * Formats a list of key/value horizontally.\n     *\n     * Each row can be one of:\n     * * 'A title'\n     * * ['key' => 'value']\n     * * new TableSeparator()\n     */\n    public function definitionList(string|array|TableSeparator ...$list): void\n    {\n        $headers = [];\n        $row = [];\n        foreach ($list as $value) {\n            if ($value instanceof TableSeparator) {\n                $headers[] = $value;\n                $row[] = $value;\n                continue;\n            }\n            if (\\is_string($value)) {\n                $headers[] = new TableCell($value, ['colspan' => 2]);\n                $row[] = null;\n                continue;\n            }\n            if (!\\is_array($value)) {\n                throw new InvalidArgumentException('Value should be an array, string, or an instance of TableSeparator.');\n            }\n            $headers[] = key($value);\n            $row[] = current($value);\n        }\n\n        $this->horizontalTable($headers, [$row]);\n    }\n\n    public function ask(string $question, ?string $default = null, ?callable $validator = null): mixed\n    {\n        $question = new Question($question, $default);\n        $question->setValidator($validator);\n\n        return $this->askQuestion($question);\n    }\n\n    public function askHidden(string $question, ?callable $validator = null): mixed\n    {\n        $question = new Question($question);\n\n        $question->setHidden(true);\n        $question->setValidator($validator);\n\n        return $this->askQuestion($question);\n    }\n\n    public function confirm(string $question, bool $default = true): bool\n    {\n        return $this->askQuestion(new ConfirmationQuestion($question, $default));\n    }\n\n    public function choice(string $question, array $choices, mixed $default = null, bool $multiSelect = false): mixed\n    {\n        if (null !== $default) {\n            $values = array_flip($choices);\n            $default = $values[$default] ?? $default;\n        }\n\n        $questionChoice = new ChoiceQuestion($question, $choices, $default);\n        $questionChoice->setMultiselect($multiSelect);\n\n        return $this->askQuestion($questionChoice);\n    }\n\n    public function progressStart(int $max = 0): void\n    {\n        $this->progressBar = $this->createProgressBar($max);\n        $this->progressBar->start();\n    }\n\n    public function progressAdvance(int $step = 1): void\n    {\n        $this->getProgressBar()->advance($step);\n    }\n\n    public function progressFinish(): void\n    {\n        $this->getProgressBar()->finish();\n        $this->newLine(2);\n        unset($this->progressBar);\n    }\n\n    public function createProgressBar(int $max = 0): ProgressBar\n    {\n        $progressBar = parent::createProgressBar($max);\n\n        if ('\\\\' !== \\DIRECTORY_SEPARATOR || 'Hyper' === getenv('TERM_PROGRAM')) {\n            $progressBar->setEmptyBarCharacter('\u2591'); // light shade character \\u2591\n            $progressBar->setProgressCharacter('');\n            $progressBar->setBarCharacter('\u2593'); // dark shade character \\u2593\n        }\n\n        return $progressBar;\n    }\n\n    /**\n     * @see ProgressBar::iterate()\n     *\n     * @template TKey\n     * @template TValue\n     *\n     * @param iterable<TKey, TValue> $iterable\n     * @param int|null               $max      Number of steps to complete the bar (0 if indeterminate), if null it will be inferred from $iterable\n     *\n     * @return iterable<TKey, TValue>\n     */\n    public function progressIterate(iterable $iterable, ?int $max = null): iterable\n    {\n        yield from $this->createProgressBar()->iterate($iterable, $max);\n\n        $this->newLine(2);\n    }\n\n    public function askQuestion(Question $question): mixed\n    {\n        if ($this->input->isInteractive()) {\n            $this->autoPrependBlock();\n        }\n\n        $this->questionHelper ??= new SymfonyQuestionHelper();\n\n        $answer = $this->questionHelper->ask($this->input, $this, $question);\n\n        if ($this->input->isInteractive()) {\n            if ($this->output instanceof ConsoleSectionOutput) {\n                // add the new line of the `return` to submit the input to ConsoleSectionOutput, because ConsoleSectionOutput is holding all it's lines.\n                // this is relevant when a `ConsoleSectionOutput::clear` is called.\n                $this->output->addNewLineOfInputSubmit();\n            }\n            $this->newLine();\n            $this->bufferedOutput->write(\"\\n\");\n        }\n\n        return $answer;\n    }\n\n    public function writeln(string|iterable $messages, int $type = self::OUTPUT_NORMAL): void\n    {\n        if (!is_iterable($messages)) {\n            $messages = [$messages];\n        }\n\n        foreach ($messages as $message) {\n            parent::writeln($message, $type);\n            $this->writeBuffer($message, true, $type);\n        }\n    }\n\n    public function write(string|iterable $messages, bool $newline = false, int $type = self::OUTPUT_NORMAL): void\n    {\n        if (!is_iterable($messages)) {\n            $messages = [$messages];\n        }\n\n        foreach ($messages as $message) {\n            parent::write($message, $newline, $type);\n            $this->writeBuffer($message, $newline, $type);\n        }\n    }\n\n    public function newLine(int $count = 1): void\n    {\n        parent::newLine($count);\n        $this->bufferedOutput->write(str_repeat(\"\\n\", $count));\n    }\n\n    /**\n     * Returns a new instance which makes use of stderr if available.\n     */\n    public function getErrorStyle(): self\n    {\n        return new self($this->input, $this->getErrorOutput());\n    }\n\n    public function createTable(): Table\n    {\n        $output = $this->output instanceof ConsoleOutputInterface ? $this->output->section() : $this->output;\n        $style = clone Table::getStyleDefinition('symfony-style-guide');\n        $style->setCellHeaderFormat('<info>%s</info>');\n\n        return (new Table($output))->setStyle($style);\n    }\n\n    private function getProgressBar(): ProgressBar\n    {\n        return $this->progressBar\n            ?? throw new RuntimeException('The ProgressBar is not started.');\n    }\n\n    private function autoPrependBlock(): void\n    {\n        $chars = substr(str_replace(\\PHP_EOL, \"\\n\", $this->bufferedOutput->fetch()), -2);\n\n        if (!isset($chars[0])) {\n            $this->newLine(); // empty history, so we should start with a new line.\n\n            return;\n        }\n        // Prepend new line for each non LF chars (This means no blank line was output before)\n        $this->newLine(2 - substr_count($chars, \"\\n\"));\n    }\n\n    private function autoPrependText(): void\n    {\n        $fetched = $this->bufferedOutput->fetch();\n        // Prepend new line if last char isn't EOL:\n        if ($fetched && !str_ends_with($fetched, \"\\n\")) {\n            $this->newLine();\n        }\n    }\n\n    private function writeBuffer(string $message, bool $newLine, int $type): void\n    {\n        // We need to know if the last chars are PHP_EOL\n        $this->bufferedOutput->write($message, $newLine, $type);\n    }\n\n    private function createBlock(iterable $messages, ?string $type = null, ?string $style = null, string $prefix = ' ', bool $padding = false, bool $escape = false): array\n    {\n        $indentLength = 0;\n        $prefixLength = Helper::width(Helper::removeDecoration($this->getFormatter(), $prefix));\n        $lines = [];\n\n        if (null !== $type) {\n            $type = \\sprintf('[%s] ', $type);\n            $indentLength = Helper::width($type);\n            $lineIndentation = str_repeat(' ', $indentLength);\n        }\n\n        // wrap and add newlines for each element\n        $outputWrapper = new OutputWrapper();\n        foreach ($messages as $key => $message) {\n            if ($escape) {\n                $message = OutputFormatter::escape($message);\n            }\n\n            $lines = array_merge(\n                $lines,\n                explode(\\PHP_EOL, $outputWrapper->wrap(\n                    $message,\n                    $this->lineLength - $prefixLength - $indentLength,\n                    \\PHP_EOL\n                ))\n            );\n\n            if (\\count($messages) > 1 && $key < \\count($messages) - 1) {\n                $lines[] = '';\n            }\n        }\n\n        $firstLineIndex = 0;\n        if ($padding && $this->isDecorated()) {\n            $firstLineIndex = 1;\n            array_unshift($lines, '');\n            $lines[] = '';\n        }\n\n        foreach ($lines as $i => &$line) {\n            if (null !== $type) {\n                $line = $firstLineIndex === $i ? $type.$line : $lineIndentation.$line;\n            }\n\n            $line = $prefix.$line;\n            $line .= str_repeat(' ', max($this->lineLength - Helper::width(Helper::removeDecoration($this->getFormatter(), $line)), 0));\n\n            if ($style) {\n                $line = \\sprintf('<%s>%s</>', $style, $line);\n            }\n        }\n\n        return $lines;\n    }\n}\n\n\n--- File Index 92: Style/StyleInterface.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Style;\n\n/**\n * Output style helpers.\n *\n * @author Kevin Bond <kevinbond@gmail.com>\n */\ninterface StyleInterface\n{\n    /**\n     * Formats a command title.\n     */\n    public function title(string $message): void;\n\n    /**\n     * Formats a section title.\n     */\n    public function section(string $message): void;\n\n    /**\n     * Formats a list.\n     */\n    public function listing(array $elements): void;\n\n    /**\n     * Formats informational text.\n     */\n    public function text(string|array $message): void;\n\n    /**\n     * Formats a success result bar.\n     */\n    public function success(string|array $message): void;\n\n    /**\n     * Formats an error result bar.\n     */\n    public function error(string|array $message): void;\n\n    /**\n     * Formats an warning result bar.\n     */\n    public function warning(string|array $message): void;\n\n    /**\n     * Formats a note admonition.\n     */\n    public function note(string|array $message): void;\n\n    /**\n     * Formats a caution admonition.\n     */\n    public function caution(string|array $message): void;\n\n    /**\n     * Formats a table.\n     */\n    public function table(array $headers, array $rows): void;\n\n    /**\n     * Asks a question.\n     */\n    public function ask(string $question, ?string $default = null, ?callable $validator = null): mixed;\n\n    /**\n     * Asks a question with the user input hidden.\n     */\n    public function askHidden(string $question, ?callable $validator = null): mixed;\n\n    /**\n     * Asks for confirmation.\n     */\n    public function confirm(string $question, bool $default = true): bool;\n\n    /**\n     * Asks a choice question.\n     */\n    public function choice(string $question, array $choices, mixed $default = null): mixed;\n\n    /**\n     * Add newline(s).\n     */\n    public function newLine(int $count = 1): void;\n\n    /**\n     * Starts the progress output.\n     */\n    public function progressStart(int $max = 0): void;\n\n    /**\n     * Advances the progress output X steps.\n     */\n    public function progressAdvance(int $step = 1): void;\n\n    /**\n     * Finishes the progress output.\n     */\n    public function progressFinish(): void;\n}\n\n\n--- File Index 93: Helper/InputAwareHelper.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Input\\InputAwareInterface;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\n\n/**\n * An implementation of InputAwareInterface for Helpers.\n *\n * @author Wouter J <waldio.webdesign@gmail.com>\n */\nabstract class InputAwareHelper extends Helper implements InputAwareInterface\n{\n    protected InputInterface $input;\n\n    public function setInput(InputInterface $input): void\n    {\n        $this->input = $input;\n    }\n}\n\n\n--- File Index 94: Helper/HelperSet.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\n\n/**\n * HelperSet represents a set of helpers to be used with a command.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n *\n * @implements \\IteratorAggregate<string, HelperInterface>\n */\nclass HelperSet implements \\IteratorAggregate\n{\n    /** @var array<string, HelperInterface> */\n    private array $helpers = [];\n\n    /**\n     * @param HelperInterface[] $helpers\n     */\n    public function __construct(array $helpers = [])\n    {\n        foreach ($helpers as $alias => $helper) {\n            $this->set($helper, \\is_int($alias) ? null : $alias);\n        }\n    }\n\n    public function set(HelperInterface $helper, ?string $alias = null): void\n    {\n        $this->helpers[$helper->getName()] = $helper;\n        if (null !== $alias) {\n            $this->helpers[$alias] = $helper;\n        }\n\n        $helper->setHelperSet($this);\n    }\n\n    /**\n     * Returns true if the helper if defined.\n     */\n    public function has(string $name): bool\n    {\n        return isset($this->helpers[$name]);\n    }\n\n    /**\n     * Gets a helper value.\n     *\n     * @throws InvalidArgumentException if the helper is not defined\n     */\n    public function get(string $name): HelperInterface\n    {\n        if (!$this->has($name)) {\n            throw new InvalidArgumentException(\\sprintf('The helper \"%s\" is not defined.', $name));\n        }\n\n        return $this->helpers[$name];\n    }\n\n    public function getIterator(): \\Traversable\n    {\n        return new \\ArrayIterator($this->helpers);\n    }\n}\n\n\n--- File Index 95: Helper/TableSeparator.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\n/**\n * Marks a row as being a separator.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass TableSeparator extends TableCell\n{\n    public function __construct(array $options = [])\n    {\n        parent::__construct('', $options);\n    }\n}\n\n\n--- File Index 96: Helper/HelperInterface.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\n/**\n * HelperInterface is the interface all helpers must implement.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\ninterface HelperInterface\n{\n    /**\n     * Sets the helper set associated with this helper.\n     */\n    public function setHelperSet(?HelperSet $helperSet): void;\n\n    /**\n     * Gets the helper set associated with this helper.\n     */\n    public function getHelperSet(): ?HelperSet;\n\n    /**\n     * Returns the canonical name of this helper.\n     */\n    public function getName(): string;\n}\n\n\n--- File Index 97: Helper/TableCellStyle.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\n\n/**\n * @author Yewhen Khoptynskyi <khoptynskyi@gmail.com>\n */\nclass TableCellStyle\n{\n    public const DEFAULT_ALIGN = 'left';\n\n    private const TAG_OPTIONS = [\n        'fg',\n        'bg',\n        'options',\n    ];\n\n    private const ALIGN_MAP = [\n        'left' => \\STR_PAD_RIGHT,\n        'center' => \\STR_PAD_BOTH,\n        'right' => \\STR_PAD_LEFT,\n    ];\n\n    private array $options = [\n        'fg' => 'default',\n        'bg' => 'default',\n        'options' => null,\n        'align' => self::DEFAULT_ALIGN,\n        'cellFormat' => null,\n    ];\n\n    public function __construct(array $options = [])\n    {\n        if ($diff = array_diff(array_keys($options), array_keys($this->options))) {\n            throw new InvalidArgumentException(\\sprintf('The TableCellStyle does not support the following options: \\'%s\\'.', implode('\\', \\'', $diff)));\n        }\n\n        if (isset($options['align']) && !\\array_key_exists($options['align'], self::ALIGN_MAP)) {\n            throw new InvalidArgumentException(\\sprintf('Wrong align value. Value must be following: \\'%s\\'.', implode('\\', \\'', array_keys(self::ALIGN_MAP))));\n        }\n\n        $this->options = array_merge($this->options, $options);\n    }\n\n    public function getOptions(): array\n    {\n        return $this->options;\n    }\n\n    /**\n     * Gets options we need for tag for example fg, bg.\n     *\n     * @return string[]\n     */\n    public function getTagOptions(): array\n    {\n        return array_filter(\n            $this->getOptions(),\n            fn ($key) => \\in_array($key, self::TAG_OPTIONS, true) && isset($this->options[$key]),\n            \\ARRAY_FILTER_USE_KEY\n        );\n    }\n\n    public function getPadByAlign(): int\n    {\n        return self::ALIGN_MAP[$this->getOptions()['align']];\n    }\n\n    public function getCellFormat(): ?string\n    {\n        return $this->getOptions()['cellFormat'];\n    }\n}\n\n\n--- File Index 98: Helper/Table.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\RuntimeException;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatter;\nuse Symfony\\Component\\Console\\Formatter\\WrappableOutputFormatterInterface;\nuse Symfony\\Component\\Console\\Output\\ConsoleSectionOutput;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Provides helpers to display a table.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n * @author \u0421\u0430\u0448\u0430 \u0421\u0442\u0430\u043c\u0435\u043d\u043a\u043e\u0432\u0438\u045b <umpirsky@gmail.com>\n * @author Abdellatif Ait boudad <a.aitboudad@gmail.com>\n * @author Max Grigorian <maxakawizard@gmail.com>\n * @author Dany Maillard <danymaillard93b@gmail.com>\n */\nclass Table\n{\n    private const SEPARATOR_TOP = 0;\n    private const SEPARATOR_TOP_BOTTOM = 1;\n    private const SEPARATOR_MID = 2;\n    private const SEPARATOR_BOTTOM = 3;\n    private const BORDER_OUTSIDE = 0;\n    private const BORDER_INSIDE = 1;\n    private const DISPLAY_ORIENTATION_DEFAULT = 'default';\n    private const DISPLAY_ORIENTATION_HORIZONTAL = 'horizontal';\n    private const DISPLAY_ORIENTATION_VERTICAL = 'vertical';\n\n    private ?string $headerTitle = null;\n    private ?string $footerTitle = null;\n    private array $headers = [];\n    private array $rows = [];\n    private array $effectiveColumnWidths = [];\n    private int $numberOfColumns;\n    private TableStyle $style;\n    private array $columnStyles = [];\n    private array $columnWidths = [];\n    private array $columnMaxWidths = [];\n    private bool $rendered = false;\n    private string $displayOrientation = self::DISPLAY_ORIENTATION_DEFAULT;\n\n    private static array $styles;\n\n    public function __construct(\n        private OutputInterface $output,\n    ) {\n        self::$styles ??= self::initStyles();\n\n        $this->setStyle('default');\n    }\n\n    /**\n     * Sets a style definition.\n     */\n    public static function setStyleDefinition(string $name, TableStyle $style): void\n    {\n        self::$styles ??= self::initStyles();\n\n        self::$styles[$name] = $style;\n    }\n\n    /**\n     * Gets a style definition by name.\n     */\n    public static function getStyleDefinition(string $name): TableStyle\n    {\n        self::$styles ??= self::initStyles();\n\n        return self::$styles[$name] ?? throw new InvalidArgumentException(\\sprintf('Style \"%s\" is not defined.', $name));\n    }\n\n    /**\n     * Sets table style.\n     *\n     * @return $this\n     */\n    public function setStyle(TableStyle|string $name): static\n    {\n        $this->style = $this->resolveStyle($name);\n\n        return $this;\n    }\n\n    /**\n     * Gets the current table style.\n     */\n    public function getStyle(): TableStyle\n    {\n        return $this->style;\n    }\n\n    /**\n     * Sets table column style.\n     *\n     * @param TableStyle|string $name The style name or a TableStyle instance\n     *\n     * @return $this\n     */\n    public function setColumnStyle(int $columnIndex, TableStyle|string $name): static\n    {\n        $this->columnStyles[$columnIndex] = $this->resolveStyle($name);\n\n        return $this;\n    }\n\n    /**\n     * Gets the current style for a column.\n     *\n     * If style was not set, it returns the global table style.\n     */\n    public function getColumnStyle(int $columnIndex): TableStyle\n    {\n        return $this->columnStyles[$columnIndex] ?? $this->getStyle();\n    }\n\n    /**\n     * Sets the minimum width of a column.\n     *\n     * @return $this\n     */\n    public function setColumnWidth(int $columnIndex, int $width): static\n    {\n        $this->columnWidths[$columnIndex] = $width;\n\n        return $this;\n    }\n\n    /**\n     * Sets the minimum width of all columns.\n     *\n     * @return $this\n     */\n    public function setColumnWidths(array $widths): static\n    {\n        $this->columnWidths = [];\n        foreach ($widths as $index => $width) {\n            $this->setColumnWidth($index, $width);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Sets the maximum width of a column.\n     *\n     * Any cell within this column which contents exceeds the specified width will be wrapped into multiple lines, while\n     * formatted strings are preserved.\n     *\n     * @return $this\n     */\n    public function setColumnMaxWidth(int $columnIndex, int $width): static\n    {\n        if (!$this->output->getFormatter() instanceof WrappableOutputFormatterInterface) {\n            throw new \\LogicException(\\sprintf('Setting a maximum column width is only supported when using a \"%s\" formatter, got \"%s\".', WrappableOutputFormatterInterface::class, get_debug_type($this->output->getFormatter())));\n        }\n\n        $this->columnMaxWidths[$columnIndex] = $width;\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function setHeaders(array $headers): static\n    {\n        $headers = array_values($headers);\n        if ($headers && !\\is_array($headers[0])) {\n            $headers = [$headers];\n        }\n\n        $this->headers = $headers;\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function setRows(array $rows): static\n    {\n        $this->rows = [];\n\n        return $this->addRows($rows);\n    }\n\n    /**\n     * @return $this\n     */\n    public function addRows(array $rows): static\n    {\n        foreach ($rows as $row) {\n            $this->addRow($row);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function addRow(TableSeparator|array $row): static\n    {\n        if ($row instanceof TableSeparator) {\n            $this->rows[] = $row;\n\n            return $this;\n        }\n\n        $this->rows[] = array_values($row);\n\n        return $this;\n    }\n\n    /**\n     * Adds a row to the table, and re-renders the table.\n     *\n     * @return $this\n     */\n    public function appendRow(TableSeparator|array $row): static\n    {\n        if (!$this->output instanceof ConsoleSectionOutput) {\n            throw new RuntimeException(\\sprintf('Output should be an instance of \"%s\" when calling \"%s\".', ConsoleSectionOutput::class, __METHOD__));\n        }\n\n        if ($this->rendered) {\n            $this->output->clear($this->calculateRowCount());\n        }\n\n        $this->addRow($row);\n        $this->render();\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function setRow(int|string $column, array $row): static\n    {\n        $this->rows[$column] = $row;\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function setHeaderTitle(?string $title): static\n    {\n        $this->headerTitle = $title;\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function setFooterTitle(?string $title): static\n    {\n        $this->footerTitle = $title;\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function setHorizontal(bool $horizontal = true): static\n    {\n        $this->displayOrientation = $horizontal ? self::DISPLAY_ORIENTATION_HORIZONTAL : self::DISPLAY_ORIENTATION_DEFAULT;\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function setVertical(bool $vertical = true): static\n    {\n        $this->displayOrientation = $vertical ? self::DISPLAY_ORIENTATION_VERTICAL : self::DISPLAY_ORIENTATION_DEFAULT;\n\n        return $this;\n    }\n\n    /**\n     * Renders table to output.\n     *\n     * Example:\n     *\n     *     +---------------+-----------------------+------------------+\n     *     | ISBN          | Title                 | Author           |\n     *     +---------------+-----------------------+------------------+\n     *     | 99921-58-10-7 | Divine Comedy         | Dante Alighieri  |\n     *     | 9971-5-0210-0 | A Tale of Two Cities  | Charles Dickens  |\n     *     | 960-425-059-0 | The Lord of the Rings | J. R. R. Tolkien |\n     *     +---------------+-----------------------+------------------+\n     */\n    public function render(): void\n    {\n        $divider = new TableSeparator();\n        $isCellWithColspan = static fn ($cell) => $cell instanceof TableCell && $cell->getColspan() >= 2;\n\n        $horizontal = self::DISPLAY_ORIENTATION_HORIZONTAL === $this->displayOrientation;\n        $vertical = self::DISPLAY_ORIENTATION_VERTICAL === $this->displayOrientation;\n\n        $rows = [];\n        if ($horizontal) {\n            foreach ($this->headers[0] ?? [] as $i => $header) {\n                $rows[$i] = [$header];\n                foreach ($this->rows as $row) {\n                    if ($row instanceof TableSeparator) {\n                        continue;\n                    }\n                    if (isset($row[$i])) {\n                        $rows[$i][] = $row[$i];\n                    } elseif ($isCellWithColspan($rows[$i][0])) {\n                        // Noop, there is a \"title\"\n                    } else {\n                        $rows[$i][] = null;\n                    }\n                }\n            }\n        } elseif ($vertical) {\n            $formatter = $this->output->getFormatter();\n            $maxHeaderLength = array_reduce($this->headers[0] ?? [], static fn ($max, $header) => max($max, Helper::width(Helper::removeDecoration($formatter, $header))), 0);\n\n            foreach ($this->rows as $row) {\n                if ($row instanceof TableSeparator) {\n                    continue;\n                }\n\n                if ($rows) {\n                    $rows[] = [$divider];\n                }\n\n                $containsColspan = false;\n                foreach ($row as $cell) {\n                    if ($containsColspan = $isCellWithColspan($cell)) {\n                        break;\n                    }\n                }\n\n                $headers = $this->headers[0] ?? [];\n                $maxRows = max(\\count($headers), \\count($row));\n                for ($i = 0; $i < $maxRows; ++$i) {\n                    $cell = (string) ($row[$i] ?? '');\n\n                    $eol = str_contains($cell, \"\\r\\n\") ? \"\\r\\n\" : \"\\n\";\n                    $parts = explode($eol, $cell);\n                    foreach ($parts as $idx => $part) {\n                        if ($headers && !$containsColspan) {\n                            if (0 === $idx) {\n                                $rows[] = [\\sprintf(\n                                    '<comment>%s%s</>: %s',\n                                    str_repeat(' ', $maxHeaderLength - Helper::width(Helper::removeDecoration($formatter, $headers[$i] ?? ''))),\n                                    $headers[$i] ?? '',\n                                    $part\n                                )];\n                            } else {\n                                $rows[] = [\\sprintf(\n                                    '%s  %s',\n                                    str_pad('', $maxHeaderLength, ' ', \\STR_PAD_LEFT),\n                                    $part\n                                )];\n                            }\n                        } elseif ('' !== $cell) {\n                            $rows[] = [$part];\n                        }\n                    }\n                }\n            }\n        } else {\n            $rows = array_merge($this->headers, [$divider], $this->rows);\n        }\n\n        $this->calculateNumberOfColumns($rows);\n\n        $rowGroups = $this->buildTableRows($rows);\n        $this->calculateColumnsWidth($rowGroups);\n\n        $isHeader = !$horizontal;\n        $isFirstRow = $horizontal;\n        $hasTitle = (bool) $this->headerTitle;\n\n        foreach ($rowGroups as $rowGroup) {\n            $isHeaderSeparatorRendered = false;\n\n            foreach ($rowGroup as $row) {\n                if ($divider === $row) {\n                    $isHeader = false;\n                    $isFirstRow = true;\n\n                    continue;\n                }\n\n                if ($row instanceof TableSeparator) {\n                    $this->renderRowSeparator();\n\n                    continue;\n                }\n\n                if (!$row) {\n                    continue;\n                }\n\n                if ($isHeader && !$isHeaderSeparatorRendered) {\n                    $this->renderRowSeparator(\n                        self::SEPARATOR_TOP,\n                        $hasTitle ? $this->headerTitle : null,\n                        $hasTitle ? $this->style->getHeaderTitleFormat() : null\n                    );\n                    $hasTitle = false;\n                    $isHeaderSeparatorRendered = true;\n                }\n\n                if ($isFirstRow) {\n                    $this->renderRowSeparator(\n                        $horizontal ? self::SEPARATOR_TOP : self::SEPARATOR_TOP_BOTTOM,\n                        $hasTitle ? $this->headerTitle : null,\n                        $hasTitle ? $this->style->getHeaderTitleFormat() : null\n                    );\n                    $isFirstRow = false;\n                    $hasTitle = false;\n                }\n\n                if ($vertical) {\n                    $isHeader = false;\n                    $isFirstRow = false;\n                }\n\n                if ($horizontal) {\n                    $this->renderRow($row, $this->style->getCellRowFormat(), $this->style->getCellHeaderFormat());\n                } else {\n                    $this->renderRow($row, $isHeader ? $this->style->getCellHeaderFormat() : $this->style->getCellRowFormat());\n                }\n            }\n        }\n        $this->renderRowSeparator(self::SEPARATOR_BOTTOM, $this->footerTitle, $this->style->getFooterTitleFormat());\n\n        $this->cleanup();\n        $this->rendered = true;\n    }\n\n    /**\n     * Renders horizontal header separator.\n     *\n     * Example:\n     *\n     *     +-----+-----------+-------+\n     */\n    private function renderRowSeparator(int $type = self::SEPARATOR_MID, ?string $title = null, ?string $titleFormat = null): void\n    {\n        if (!$count = $this->numberOfColumns) {\n            return;\n        }\n\n        $borders = $this->style->getBorderChars();\n        if (!$borders[0] && !$borders[2] && !$this->style->getCrossingChar()) {\n            return;\n        }\n\n        $crossings = $this->style->getCrossingChars();\n        if (self::SEPARATOR_MID === $type) {\n            [$horizontal, $leftChar, $midChar, $rightChar] = [$borders[2], $crossings[8], $crossings[0], $crossings[4]];\n        } elseif (self::SEPARATOR_TOP === $type) {\n            [$horizontal, $leftChar, $midChar, $rightChar] = [$borders[0], $crossings[1], $crossings[2], $crossings[3]];\n        } elseif (self::SEPARATOR_TOP_BOTTOM === $type) {\n            [$horizontal, $leftChar, $midChar, $rightChar] = [$borders[0], $crossings[9], $crossings[10], $crossings[11]];\n        } else {\n            [$horizontal, $leftChar, $midChar, $rightChar] = [$borders[0], $crossings[7], $crossings[6], $crossings[5]];\n        }\n\n        $markup = $leftChar;\n        for ($column = 0; $column < $count; ++$column) {\n            $markup .= str_repeat($horizontal, $this->effectiveColumnWidths[$column]);\n            $markup .= $column === $count - 1 ? $rightChar : $midChar;\n        }\n\n        if (null !== $title) {\n            $titleLength = Helper::width(Helper::removeDecoration($formatter = $this->output->getFormatter(), $formattedTitle = \\sprintf($titleFormat, $title)));\n            $markupLength = Helper::width($markup);\n            if ($titleLength > $limit = $markupLength - 4) {\n                $titleLength = $limit;\n                $formatLength = Helper::width(Helper::removeDecoration($formatter, \\sprintf($titleFormat, '')));\n                $formattedTitle = \\sprintf($titleFormat, Helper::substr($title, 0, $limit - $formatLength - 3).'...');\n            }\n\n            $titleStart = intdiv($markupLength - $titleLength, 2);\n            if (false === mb_detect_encoding($markup, null, true)) {\n                $markup = substr_replace($markup, $formattedTitle, $titleStart, $titleLength);\n            } else {\n                $markup = mb_substr($markup, 0, $titleStart).$formattedTitle.mb_substr($markup, $titleStart + $titleLength);\n            }\n        }\n\n        $this->output->writeln(\\sprintf($this->style->getBorderFormat(), $markup));\n    }\n\n    /**\n     * Renders vertical column separator.\n     */\n    private function renderColumnSeparator(int $type = self::BORDER_OUTSIDE): string\n    {\n        $borders = $this->style->getBorderChars();\n\n        return \\sprintf($this->style->getBorderFormat(), self::BORDER_OUTSIDE === $type ? $borders[1] : $borders[3]);\n    }\n\n    /**\n     * Renders table row.\n     *\n     * Example:\n     *\n     *     | 9971-5-0210-0 | A Tale of Two Cities  | Charles Dickens  |\n     */\n    private function renderRow(array $row, string $cellFormat, ?string $firstCellFormat = null): void\n    {\n        $rowContent = $this->renderColumnSeparator(self::BORDER_OUTSIDE);\n        $columns = $this->getRowColumns($row);\n        $last = \\count($columns) - 1;\n        foreach ($columns as $i => $column) {\n            if ($firstCellFormat && 0 === $i) {\n                $rowContent .= $this->renderCell($row, $column, $firstCellFormat);\n            } else {\n                $rowContent .= $this->renderCell($row, $column, $cellFormat);\n            }\n            $rowContent .= $this->renderColumnSeparator($last === $i ? self::BORDER_OUTSIDE : self::BORDER_INSIDE);\n        }\n        $this->output->writeln($rowContent);\n    }\n\n    /**\n     * Renders table cell with padding.\n     */\n    private function renderCell(array $row, int $column, string $cellFormat): string\n    {\n        $cell = $row[$column] ?? '';\n        $width = $this->effectiveColumnWidths[$column];\n        if ($cell instanceof TableCell && $cell->getColspan() > 1) {\n            // add the width of the following columns(numbers of colspan).\n            foreach (range($column + 1, $column + $cell->getColspan() - 1) as $nextColumn) {\n                $width += $this->getColumnSeparatorWidth() + $this->effectiveColumnWidths[$nextColumn];\n            }\n        }\n\n        // str_pad won't work properly with multi-byte strings, we need to fix the padding\n        if (false !== $encoding = mb_detect_encoding($cell, null, true)) {\n            $width += \\strlen($cell) - mb_strwidth($cell, $encoding);\n        }\n\n        $style = $this->getColumnStyle($column);\n\n        if ($cell instanceof TableSeparator) {\n            return \\sprintf($style->getBorderFormat(), str_repeat($style->getBorderChars()[2], $width));\n        }\n\n        $width += Helper::length($cell) - Helper::length(Helper::removeDecoration($this->output->getFormatter(), $cell));\n        $content = \\sprintf($style->getCellRowContentFormat(), $cell);\n\n        $padType = $style->getPadType();\n        if ($cell instanceof TableCell && $cell->getStyle() instanceof TableCellStyle) {\n            $isNotStyledByTag = !preg_match('/^<(\\w+|(\\w+=[\\w,]+;?)*)>.+<\\/(\\w+|(\\w+=\\w+;?)*)?>$/', $cell);\n            if ($isNotStyledByTag) {\n                $cellFormat = $cell->getStyle()->getCellFormat();\n                if (!\\is_string($cellFormat)) {\n                    $tag = http_build_query($cell->getStyle()->getTagOptions(), '', ';');\n                    $cellFormat = '<'.$tag.'>%s</>';\n                }\n\n                if (str_contains($content, '</>')) {\n                    $content = str_replace('</>', '', $content);\n                    $width -= 3;\n                }\n                if (str_contains($content, '<fg=default;bg=default>')) {\n                    $content = str_replace('<fg=default;bg=default>', '', $content);\n                    $width -= \\strlen('<fg=default;bg=default>');\n                }\n            }\n\n            $padType = $cell->getStyle()->getPadByAlign();\n        }\n\n        return \\sprintf($cellFormat, str_pad($content, $width, $style->getPaddingChar(), $padType));\n    }\n\n    /**\n     * Calculate number of columns for this table.\n     */\n    private function calculateNumberOfColumns(array $rows): void\n    {\n        $columns = [0];\n        foreach ($rows as $row) {\n            if ($row instanceof TableSeparator) {\n                continue;\n            }\n\n            $columns[] = $this->getNumberOfColumns($row);\n        }\n\n        $this->numberOfColumns = max($columns);\n    }\n\n    private function buildTableRows(array $rows): TableRows\n    {\n        /** @var WrappableOutputFormatterInterface $formatter */\n        $formatter = $this->output->getFormatter();\n        $unmergedRows = [];\n        for ($rowKey = 0; $rowKey < \\count($rows); ++$rowKey) {\n            $rows = $this->fillNextRows($rows, $rowKey);\n\n            // Remove any new line breaks and replace it with a new line\n            foreach ($rows[$rowKey] as $column => $cell) {\n                $colspan = $cell instanceof TableCell ? $cell->getColspan() : 1;\n\n                if (isset($this->columnMaxWidths[$column]) && Helper::width(Helper::removeDecoration($formatter, $cell)) > $this->columnMaxWidths[$column]) {\n                    $cell = $formatter->formatAndWrap($cell, $this->columnMaxWidths[$column] * $colspan);\n                }\n                if (!str_contains($cell ?? '', \"\\n\")) {\n                    continue;\n                }\n                $eol = str_contains($cell ?? '', \"\\r\\n\") ? \"\\r\\n\" : \"\\n\";\n                $escaped = implode($eol, array_map(OutputFormatter::escapeTrailingBackslash(...), explode($eol, $cell)));\n                $cell = $cell instanceof TableCell ? new TableCell($escaped, ['colspan' => $cell->getColspan()]) : $escaped;\n                $lines = explode($eol, str_replace($eol, '<fg=default;bg=default></>'.$eol, $cell));\n                foreach ($lines as $lineKey => $line) {\n                    if ($colspan > 1) {\n                        $line = new TableCell($line, ['colspan' => $colspan]);\n                    }\n                    if (0 === $lineKey) {\n                        $rows[$rowKey][$column] = $line;\n                    } else {\n                        if (!\\array_key_exists($rowKey, $unmergedRows) || !\\array_key_exists($lineKey, $unmergedRows[$rowKey])) {\n                            $unmergedRows[$rowKey][$lineKey] = $this->copyRow($rows, $rowKey);\n                        }\n                        $unmergedRows[$rowKey][$lineKey][$column] = $line;\n                    }\n                }\n            }\n        }\n\n        return new TableRows(function () use ($rows, $unmergedRows): \\Traversable {\n            foreach ($rows as $rowKey => $row) {\n                $rowGroup = [$row instanceof TableSeparator ? $row : $this->fillCells($row)];\n\n                if (isset($unmergedRows[$rowKey])) {\n                    foreach ($unmergedRows[$rowKey] as $row) {\n                        $rowGroup[] = $row instanceof TableSeparator ? $row : $this->fillCells($row);\n                    }\n                }\n                yield $rowGroup;\n            }\n        });\n    }\n\n    private function calculateRowCount(): int\n    {\n        $numberOfRows = \\count(iterator_to_array($this->buildTableRows(array_merge($this->headers, [new TableSeparator()], $this->rows))));\n\n        if ($this->headers) {\n            ++$numberOfRows; // Add row for header separator\n        }\n\n        if ($this->rows) {\n            ++$numberOfRows; // Add row for footer separator\n        }\n\n        return $numberOfRows;\n    }\n\n    /**\n     * fill rows that contains rowspan > 1.\n     *\n     * @throws InvalidArgumentException\n     */\n    private function fillNextRows(array $rows, int $line): array\n    {\n        $unmergedRows = [];\n        foreach ($rows[$line] as $column => $cell) {\n            if (null !== $cell && !$cell instanceof TableCell && !\\is_scalar($cell) && !$cell instanceof \\Stringable) {\n                throw new InvalidArgumentException(\\sprintf('A cell must be a TableCell, a scalar or an object implementing \"__toString()\", \"%s\" given.', get_debug_type($cell)));\n            }\n            if ($cell instanceof TableCell && $cell->getRowspan() > 1) {\n                $nbLines = $cell->getRowspan() - 1;\n                $lines = [$cell];\n                if (str_contains($cell, \"\\n\")) {\n                    $eol = str_contains($cell, \"\\r\\n\") ? \"\\r\\n\" : \"\\n\";\n                    $lines = explode($eol, str_replace($eol, '<fg=default;bg=default>'.$eol.'</>', $cell));\n                    $nbLines = \\count($lines) > $nbLines ? substr_count($cell, $eol) : $nbLines;\n\n                    $rows[$line][$column] = new TableCell($lines[0], ['colspan' => $cell->getColspan(), 'style' => $cell->getStyle()]);\n                    unset($lines[0]);\n                }\n\n                // create a two dimensional array (rowspan x colspan)\n                $unmergedRows = array_replace_recursive(array_fill($line + 1, $nbLines, []), $unmergedRows);\n                foreach ($unmergedRows as $unmergedRowKey => $unmergedRow) {\n                    $value = $lines[$unmergedRowKey - $line] ?? '';\n                    $unmergedRows[$unmergedRowKey][$column] = new TableCell($value, ['colspan' => $cell->getColspan(), 'style' => $cell->getStyle()]);\n                    if ($nbLines === $unmergedRowKey - $line) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        foreach ($unmergedRows as $unmergedRowKey => $unmergedRow) {\n            // we need to know if $unmergedRow will be merged or inserted into $rows\n            if (isset($rows[$unmergedRowKey]) && \\is_array($rows[$unmergedRowKey]) && ($this->getNumberOfColumns($rows[$unmergedRowKey]) + $this->getNumberOfColumns($unmergedRow) <= $this->numberOfColumns)) {\n                foreach ($unmergedRow as $cellKey => $cell) {\n                    // insert cell into row at cellKey position\n                    array_splice($rows[$unmergedRowKey], $cellKey, 0, [$cell]);\n                }\n            } else {\n                $row = $this->copyRow($rows, $unmergedRowKey - 1);\n                foreach ($unmergedRow as $column => $cell) {\n                    if ($cell) {\n                        $row[$column] = $cell;\n                    }\n                }\n                array_splice($rows, $unmergedRowKey, 0, [$row]);\n            }\n        }\n\n        return $rows;\n    }\n\n    /**\n     * fill cells for a row that contains colspan > 1.\n     */\n    private function fillCells(iterable $row): iterable\n    {\n        $newRow = [];\n\n        foreach ($row as $column => $cell) {\n            $newRow[] = $cell;\n            if ($cell instanceof TableCell && $cell->getColspan() > 1) {\n                foreach (range($column + 1, $column + $cell->getColspan() - 1) as $position) {\n                    // insert empty value at column position\n                    $newRow[] = '';\n                }\n            }\n        }\n\n        return $newRow ?: $row;\n    }\n\n    private function copyRow(array $rows, int $line): array\n    {\n        $row = $rows[$line];\n        foreach ($row as $cellKey => $cellValue) {\n            $row[$cellKey] = '';\n            if ($cellValue instanceof TableCell) {\n                $row[$cellKey] = new TableCell('', ['colspan' => $cellValue->getColspan()]);\n            }\n        }\n\n        return $row;\n    }\n\n    /**\n     * Gets number of columns by row.\n     */\n    private function getNumberOfColumns(array $row): int\n    {\n        $columns = \\count($row);\n        foreach ($row as $column) {\n            $columns += $column instanceof TableCell ? ($column->getColspan() - 1) : 0;\n        }\n\n        return $columns;\n    }\n\n    /**\n     * Gets list of columns for the given row.\n     */\n    private function getRowColumns(array $row): array\n    {\n        $columns = range(0, $this->numberOfColumns - 1);\n        foreach ($row as $cellKey => $cell) {\n            if ($cell instanceof TableCell && $cell->getColspan() > 1) {\n                // exclude grouped columns.\n                $columns = array_diff($columns, range($cellKey + 1, $cellKey + $cell->getColspan() - 1));\n            }\n        }\n\n        return $columns;\n    }\n\n    /**\n     * Calculates columns widths.\n     */\n    private function calculateColumnsWidth(iterable $groups): void\n    {\n        for ($column = 0; $column < $this->numberOfColumns; ++$column) {\n            $lengths = [];\n            foreach ($groups as $group) {\n                foreach ($group as $row) {\n                    if ($row instanceof TableSeparator) {\n                        continue;\n                    }\n\n                    foreach ($row as $i => $cell) {\n                        if ($cell instanceof TableCell) {\n                            $textContent = Helper::removeDecoration($this->output->getFormatter(), $cell);\n                            $textLength = Helper::width($textContent);\n                            if ($textLength > 0) {\n                                $contentColumns = mb_str_split($textContent, ceil($textLength / $cell->getColspan()));\n                                foreach ($contentColumns as $position => $content) {\n                                    $row[$i + $position] = $content;\n                                }\n                            }\n                        }\n                    }\n\n                    $lengths[] = $this->getCellWidth($row, $column);\n                }\n            }\n\n            $this->effectiveColumnWidths[$column] = max($lengths) + Helper::width($this->style->getCellRowContentFormat()) - 2;\n        }\n    }\n\n    private function getColumnSeparatorWidth(): int\n    {\n        return Helper::width(\\sprintf($this->style->getBorderFormat(), $this->style->getBorderChars()[3]));\n    }\n\n    private function getCellWidth(array $row, int $column): int\n    {\n        $cellWidth = 0;\n\n        if (isset($row[$column])) {\n            $cell = $row[$column];\n            $cellWidth = Helper::width(Helper::removeDecoration($this->output->getFormatter(), $cell));\n        }\n\n        $columnWidth = $this->columnWidths[$column] ?? 0;\n        $cellWidth = max($cellWidth, $columnWidth);\n\n        return isset($this->columnMaxWidths[$column]) ? min($this->columnMaxWidths[$column], $cellWidth) : $cellWidth;\n    }\n\n    /**\n     * Called after rendering to cleanup cache data.\n     */\n    private function cleanup(): void\n    {\n        $this->effectiveColumnWidths = [];\n        unset($this->numberOfColumns);\n    }\n\n    /**\n     * @return array<string, TableStyle>\n     */\n    private static function initStyles(): array\n    {\n        $borderless = new TableStyle();\n        $borderless\n            ->setHorizontalBorderChars('=')\n            ->setVerticalBorderChars(' ')\n            ->setDefaultCrossingChar(' ')\n        ;\n\n        $compact = new TableStyle();\n        $compact\n            ->setHorizontalBorderChars('')\n            ->setVerticalBorderChars('')\n            ->setDefaultCrossingChar('')\n            ->setCellRowContentFormat('%s ')\n        ;\n\n        $styleGuide = new TableStyle();\n        $styleGuide\n            ->setHorizontalBorderChars('-')\n            ->setVerticalBorderChars(' ')\n            ->setDefaultCrossingChar(' ')\n            ->setCellHeaderFormat('%s')\n        ;\n\n        $box = (new TableStyle())\n            ->setHorizontalBorderChars('\u2500')\n            ->setVerticalBorderChars('\u2502')\n            ->setCrossingChars('\u253c', '\u250c', '\u252c', '\u2510', '\u2524', '\u2518', '\u2534', '\u2514', '\u251c')\n        ;\n\n        $boxDouble = (new TableStyle())\n            ->setHorizontalBorderChars('\u2550', '\u2500')\n            ->setVerticalBorderChars('\u2551', '\u2502')\n            ->setCrossingChars('\u253c', '\u2554', '\u2564', '\u2557', '\u2562', '\u255d', '\u2567', '\u255a', '\u255f', '\u2560', '\u256a', '\u2563')\n        ;\n\n        return [\n            'default' => new TableStyle(),\n            'borderless' => $borderless,\n            'compact' => $compact,\n            'symfony-style-guide' => $styleGuide,\n            'box' => $box,\n            'box-double' => $boxDouble,\n        ];\n    }\n\n    private function resolveStyle(TableStyle|string $name): TableStyle\n    {\n        if ($name instanceof TableStyle) {\n            return $name;\n        }\n\n        return self::$styles[$name] ?? throw new InvalidArgumentException(\\sprintf('Style \"%s\" is not defined.', $name));\n    }\n}\n\n\n--- File Index 99: Helper/DescriptorHelper.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Descriptor\\DescriptorInterface;\nuse Symfony\\Component\\Console\\Descriptor\\JsonDescriptor;\nuse Symfony\\Component\\Console\\Descriptor\\MarkdownDescriptor;\nuse Symfony\\Component\\Console\\Descriptor\\ReStructuredTextDescriptor;\nuse Symfony\\Component\\Console\\Descriptor\\TextDescriptor;\nuse Symfony\\Component\\Console\\Descriptor\\XmlDescriptor;\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * This class adds helper method to describe objects in various formats.\n *\n * @author Jean-Fran\u00e7ois Simon <contact@jfsimon.fr>\n */\nclass DescriptorHelper extends Helper\n{\n    /**\n     * @var DescriptorInterface[]\n     */\n    private array $descriptors = [];\n\n    public function __construct()\n    {\n        $this\n            ->register('txt', new TextDescriptor())\n            ->register('xml', new XmlDescriptor())\n            ->register('json', new JsonDescriptor())\n            ->register('md', new MarkdownDescriptor())\n            ->register('rst', new ReStructuredTextDescriptor())\n        ;\n    }\n\n    /**\n     * Describes an object if supported.\n     *\n     * Available options are:\n     * * format: string, the output format name\n     * * raw_text: boolean, sets output type as raw\n     *\n     * @throws InvalidArgumentException when the given format is not supported\n     */\n    public function describe(OutputInterface $output, ?object $object, array $options = []): void\n    {\n        $options = array_merge([\n            'raw_text' => false,\n            'format' => 'txt',\n        ], $options);\n\n        if (!isset($this->descriptors[$options['format']])) {\n            throw new InvalidArgumentException(\\sprintf('Unsupported format \"%s\".', $options['format']));\n        }\n\n        $descriptor = $this->descriptors[$options['format']];\n        $descriptor->describe($output, $object, $options);\n    }\n\n    /**\n     * Registers a descriptor.\n     *\n     * @return $this\n     */\n    public function register(string $format, DescriptorInterface $descriptor): static\n    {\n        $this->descriptors[$format] = $descriptor;\n\n        return $this;\n    }\n\n    public function getName(): string\n    {\n        return 'descriptor';\n    }\n\n    public function getFormats(): array\n    {\n        return array_keys($this->descriptors);\n    }\n}\n\n\n--- File Index 100: Helper/FormatterHelper.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatter;\n\n/**\n * The Formatter class provides helpers to format messages.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass FormatterHelper extends Helper\n{\n    /**\n     * Formats a message within a section.\n     */\n    public function formatSection(string $section, string $message, string $style = 'info'): string\n    {\n        return \\sprintf('<%s>[%s]</%s> %s', $style, $section, $style, $message);\n    }\n\n    /**\n     * Formats a message as a block of text.\n     */\n    public function formatBlock(string|array $messages, string $style, bool $large = false): string\n    {\n        if (!\\is_array($messages)) {\n            $messages = [$messages];\n        }\n\n        $len = 0;\n        $lines = [];\n        foreach ($messages as $message) {\n            $message = OutputFormatter::escape($message);\n            $lines[] = \\sprintf($large ? '  %s  ' : ' %s ', $message);\n            $len = max(self::width($message) + ($large ? 4 : 2), $len);\n        }\n\n        $messages = $large ? [str_repeat(' ', $len)] : [];\n        for ($i = 0; isset($lines[$i]); ++$i) {\n            $messages[] = $lines[$i].str_repeat(' ', $len - self::width($lines[$i]));\n        }\n        if ($large) {\n            $messages[] = str_repeat(' ', $len);\n        }\n\n        for ($i = 0; isset($messages[$i]); ++$i) {\n            $messages[$i] = \\sprintf('<%s>%s</%s>', $style, $messages[$i], $style);\n        }\n\n        return implode(\"\\n\", $messages);\n    }\n\n    /**\n     * Truncates a message to the given length.\n     */\n    public function truncate(string $message, int $length, string $suffix = '...'): string\n    {\n        $computedLength = $length - self::width($suffix);\n\n        if ($computedLength > self::width($message)) {\n            return $message;\n        }\n\n        return self::substr($message, 0, $length).$suffix;\n    }\n\n    public function getName(): string\n    {\n        return 'formatter';\n    }\n}\n\n\n--- File Index 101: Helper/ProcessHelper.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Process\\Exception\\ProcessFailedException;\nuse Symfony\\Component\\Process\\Process;\n\n/**\n * The ProcessHelper class provides helpers to run external processes.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n *\n * @final\n */\nclass ProcessHelper extends Helper\n{\n    /**\n     * Runs an external process.\n     *\n     * @param array|Process $cmd      An instance of Process or an array of the command and arguments\n     * @param callable|null $callback A PHP callback to run whenever there is some\n     *                                output available on STDOUT or STDERR\n     */\n    public function run(OutputInterface $output, array|Process $cmd, ?string $error = null, ?callable $callback = null, int $verbosity = OutputInterface::VERBOSITY_VERY_VERBOSE): Process\n    {\n        if (!class_exists(Process::class)) {\n            throw new \\LogicException('The ProcessHelper cannot be run as the Process component is not installed. Try running \"compose require symfony/process\".');\n        }\n\n        if ($output instanceof ConsoleOutputInterface) {\n            $output = $output->getErrorOutput();\n        }\n\n        $formatter = $this->getHelperSet()->get('debug_formatter');\n\n        if ($cmd instanceof Process) {\n            $cmd = [$cmd];\n        }\n\n        if (\\is_string($cmd[0] ?? null)) {\n            $process = new Process($cmd);\n            $cmd = [];\n        } elseif (($cmd[0] ?? null) instanceof Process) {\n            $process = $cmd[0];\n            unset($cmd[0]);\n        } else {\n            throw new \\InvalidArgumentException(\\sprintf('Invalid command provided to \"%s()\": the command should be an array whose first element is either the path to the binary to run or a \"Process\" object.', __METHOD__));\n        }\n\n        if ($verbosity <= $output->getVerbosity()) {\n            $output->write($formatter->start(spl_object_hash($process), $this->escapeString($process->getCommandLine())));\n        }\n\n        if ($output->isDebug()) {\n            $callback = $this->wrapCallback($output, $process, $callback);\n        }\n\n        $process->run($callback, $cmd);\n\n        if ($verbosity <= $output->getVerbosity()) {\n            $message = $process->isSuccessful() ? 'Command ran successfully' : \\sprintf('%s Command did not run successfully', $process->getExitCode());\n            $output->write($formatter->stop(spl_object_hash($process), $message, $process->isSuccessful()));\n        }\n\n        if (!$process->isSuccessful() && null !== $error) {\n            $output->writeln(\\sprintf('<error>%s</error>', $this->escapeString($error)));\n        }\n\n        return $process;\n    }\n\n    /**\n     * Runs the process.\n     *\n     * This is identical to run() except that an exception is thrown if the process\n     * exits with a non-zero exit code.\n     *\n     * @param array|Process $cmd      An instance of Process or a command to run\n     * @param callable|null $callback A PHP callback to run whenever there is some\n     *                                output available on STDOUT or STDERR\n     *\n     * @throws ProcessFailedException\n     *\n     * @see run()\n     */\n    public function mustRun(OutputInterface $output, array|Process $cmd, ?string $error = null, ?callable $callback = null, int $verbosity = OutputInterface::VERBOSITY_VERY_VERBOSE): Process\n    {\n        $process = $this->run($output, $cmd, $error, $callback, $verbosity);\n\n        if (!$process->isSuccessful()) {\n            throw new ProcessFailedException($process);\n        }\n\n        return $process;\n    }\n\n    /**\n     * Wraps a Process callback to add debugging output.\n     */\n    public function wrapCallback(OutputInterface $output, Process $process, ?callable $callback = null): callable\n    {\n        if ($output instanceof ConsoleOutputInterface) {\n            $output = $output->getErrorOutput();\n        }\n\n        $formatter = $this->getHelperSet()->get('debug_formatter');\n\n        return function ($type, $buffer) use ($output, $process, $callback, $formatter) {\n            $output->write($formatter->progress(spl_object_hash($process), $this->escapeString($buffer), Process::ERR === $type));\n\n            if (null !== $callback) {\n                $callback($type, $buffer);\n            }\n        };\n    }\n\n    private function escapeString(string $str): string\n    {\n        return str_replace('<', '\\\\<', $str);\n    }\n\n    public function getName(): string\n    {\n        return 'process';\n    }\n}\n\n\n--- File Index 102: Helper/TableCell.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\n\n/**\n * @author Abdellatif Ait boudad <a.aitboudad@gmail.com>\n */\nclass TableCell\n{\n    private array $options = [\n        'rowspan' => 1,\n        'colspan' => 1,\n        'style' => null,\n    ];\n\n    public function __construct(\n        private string $value = '',\n        array $options = [],\n    ) {\n        // check option names\n        if ($diff = array_diff(array_keys($options), array_keys($this->options))) {\n            throw new InvalidArgumentException(\\sprintf('The TableCell does not support the following options: \\'%s\\'.', implode('\\', \\'', $diff)));\n        }\n\n        if (isset($options['style']) && !$options['style'] instanceof TableCellStyle) {\n            throw new InvalidArgumentException('The style option must be an instance of \"TableCellStyle\".');\n        }\n\n        $this->options = array_merge($this->options, $options);\n    }\n\n    /**\n     * Returns the cell value.\n     */\n    public function __toString(): string\n    {\n        return $this->value;\n    }\n\n    /**\n     * Gets number of colspan.\n     */\n    public function getColspan(): int\n    {\n        return (int) $this->options['colspan'];\n    }\n\n    /**\n     * Gets number of rowspan.\n     */\n    public function getRowspan(): int\n    {\n        return (int) $this->options['rowspan'];\n    }\n\n    public function getStyle(): ?TableCellStyle\n    {\n        return $this->options['style'];\n    }\n}\n\n\n--- File Index 103: Helper/QuestionHelper.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Cursor;\nuse Symfony\\Component\\Console\\Exception\\MissingInputException;\nuse Symfony\\Component\\Console\\Exception\\RuntimeException;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatter;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\StreamableInputInterface;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Symfony\\Component\\Console\\Output\\ConsoleSectionOutput;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\nuse Symfony\\Component\\Console\\Terminal;\n\nuse function Symfony\\Component\\String\\s;\n\n/**\n * The QuestionHelper class provides helpers to interact with the user.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass QuestionHelper extends Helper\n{\n    private static bool $stty = true;\n    private static bool $stdinIsInteractive;\n\n    /**\n     * Asks a question to the user.\n     *\n     * @return mixed The user answer\n     *\n     * @throws RuntimeException If there is no data to read in the input stream\n     */\n    public function ask(InputInterface $input, OutputInterface $output, Question $question): mixed\n    {\n        if ($output instanceof ConsoleOutputInterface) {\n            $output = $output->getErrorOutput();\n        }\n\n        if (!$input->isInteractive()) {\n            return $this->getDefaultAnswer($question);\n        }\n\n        $inputStream = $input instanceof StreamableInputInterface ? $input->getStream() : null;\n        $inputStream ??= STDIN;\n\n        try {\n            if (!$question->getValidator()) {\n                return $this->doAsk($inputStream, $output, $question);\n            }\n\n            $interviewer = fn () => $this->doAsk($inputStream, $output, $question);\n\n            return $this->validateAttempts($interviewer, $output, $question);\n        } catch (MissingInputException $exception) {\n            $input->setInteractive(false);\n\n            if (null === $fallbackOutput = $this->getDefaultAnswer($question)) {\n                throw $exception;\n            }\n\n            return $fallbackOutput;\n        }\n    }\n\n    public function getName(): string\n    {\n        return 'question';\n    }\n\n    /**\n     * Prevents usage of stty.\n     */\n    public static function disableStty(): void\n    {\n        self::$stty = false;\n    }\n\n    /**\n     * Asks the question to the user.\n     *\n     * @param resource $inputStream\n     *\n     * @throws RuntimeException In case the fallback is deactivated and the response cannot be hidden\n     */\n    private function doAsk($inputStream, OutputInterface $output, Question $question): mixed\n    {\n        $this->writePrompt($output, $question);\n\n        $autocomplete = $question->getAutocompleterCallback();\n\n        if (null === $autocomplete || !self::$stty || !Terminal::hasSttyAvailable()) {\n            $ret = false;\n            if ($question->isHidden()) {\n                try {\n                    $hiddenResponse = $this->getHiddenResponse($output, $inputStream, $question->isTrimmable());\n                    $ret = $question->isTrimmable() ? trim($hiddenResponse) : $hiddenResponse;\n                } catch (RuntimeException $e) {\n                    if (!$question->isHiddenFallback()) {\n                        throw $e;\n                    }\n                }\n            }\n\n            if (false === $ret) {\n                $isBlocked = stream_get_meta_data($inputStream)['blocked'] ?? true;\n\n                if (!$isBlocked) {\n                    stream_set_blocking($inputStream, true);\n                }\n\n                $ret = $this->readInput($inputStream, $question);\n\n                if (!$isBlocked) {\n                    stream_set_blocking($inputStream, false);\n                }\n\n                if (false === $ret) {\n                    throw new MissingInputException('Aborted.');\n                }\n                if ($question->isTrimmable()) {\n                    $ret = trim($ret);\n                }\n            }\n        } else {\n            $autocomplete = $this->autocomplete($output, $question, $inputStream, $autocomplete);\n            $ret = $question->isTrimmable() ? trim($autocomplete) : $autocomplete;\n        }\n\n        if ($output instanceof ConsoleSectionOutput) {\n            $output->addContent(''); // add EOL to the question\n            $output->addContent($ret);\n        }\n\n        $ret = \\strlen($ret) > 0 ? $ret : $question->getDefault();\n\n        if ($normalizer = $question->getNormalizer()) {\n            return $normalizer($ret);\n        }\n\n        return $ret;\n    }\n\n    private function getDefaultAnswer(Question $question): mixed\n    {\n        $default = $question->getDefault();\n\n        if (null === $default) {\n            return $default;\n        }\n\n        if ($validator = $question->getValidator()) {\n            return \\call_user_func($validator, $default);\n        } elseif ($question instanceof ChoiceQuestion) {\n            $choices = $question->getChoices();\n\n            if (!$question->isMultiselect()) {\n                return $choices[$default] ?? $default;\n            }\n\n            $default = explode(',', $default);\n            foreach ($default as $k => $v) {\n                $v = $question->isTrimmable() ? trim($v) : $v;\n                $default[$k] = $choices[$v] ?? $v;\n            }\n        }\n\n        return $default;\n    }\n\n    /**\n     * Outputs the question prompt.\n     */\n    protected function writePrompt(OutputInterface $output, Question $question): void\n    {\n        $message = $question->getQuestion();\n\n        if ($question instanceof ChoiceQuestion) {\n            $output->writeln(array_merge([\n                $question->getQuestion(),\n            ], $this->formatChoiceQuestionChoices($question, 'info')));\n\n            $message = $question->getPrompt();\n        }\n\n        $output->write($message);\n    }\n\n    /**\n     * @return string[]\n     */\n    protected function formatChoiceQuestionChoices(ChoiceQuestion $question, string $tag): array\n    {\n        $messages = [];\n\n        $maxWidth = max(array_map([__CLASS__, 'width'], array_keys($choices = $question->getChoices())));\n\n        foreach ($choices as $key => $value) {\n            $padding = str_repeat(' ', $maxWidth - self::width($key));\n\n            $messages[] = \\sprintf(\"  [<$tag>%s$padding</$tag>] %s\", $key, $value);\n        }\n\n        return $messages;\n    }\n\n    /**\n     * Outputs an error message.\n     */\n    protected function writeError(OutputInterface $output, \\Exception $error): void\n    {\n        if (null !== $this->getHelperSet() && $this->getHelperSet()->has('formatter')) {\n            $message = $this->getHelperSet()->get('formatter')->formatBlock($error->getMessage(), 'error');\n        } else {\n            $message = '<error>'.$error->getMessage().'</error>';\n        }\n\n        $output->writeln($message);\n    }\n\n    /**\n     * Autocompletes a question.\n     *\n     * @param resource $inputStream\n     */\n    private function autocomplete(OutputInterface $output, Question $question, $inputStream, callable $autocomplete): string\n    {\n        $cursor = new Cursor($output, $inputStream);\n\n        $fullChoice = '';\n        $ret = '';\n\n        $i = 0;\n        $ofs = -1;\n        $matches = $autocomplete($ret);\n        $numMatches = \\count($matches);\n\n        $sttyMode = shell_exec('stty -g');\n        $isStdin = 'php://stdin' === (stream_get_meta_data($inputStream)['uri'] ?? null);\n        $r = [$inputStream];\n        $w = [];\n\n        // Disable icanon (so we can fread each keypress) and echo (we'll do echoing here instead)\n        shell_exec('stty -icanon -echo');\n\n        // Add highlighted text style\n        $output->getFormatter()->setStyle('hl', new OutputFormatterStyle('black', 'white'));\n\n        // Read a keypress\n        while (!feof($inputStream)) {\n            while ($isStdin && 0 === @stream_select($r, $w, $w, 0, 100)) {\n                // Give signal handlers a chance to run\n                $r = [$inputStream];\n            }\n            $c = fread($inputStream, 1);\n\n            // as opposed to fgets(), fread() returns an empty string when the stream content is empty, not false.\n            if (false === $c || ('' === $ret && '' === $c && null === $question->getDefault())) {\n                shell_exec('stty '.$sttyMode);\n                throw new MissingInputException('Aborted.');\n            } elseif (\"\\177\" === $c) { // Backspace Character\n                if (0 === $numMatches && 0 !== $i) {\n                    --$i;\n                    $cursor->moveLeft(s($fullChoice)->slice(-1)->width(false));\n\n                    $fullChoice = self::substr($fullChoice, 0, $i);\n                }\n\n                if (0 === $i) {\n                    $ofs = -1;\n                    $matches = $autocomplete($ret);\n                    $numMatches = \\count($matches);\n                } else {\n                    $numMatches = 0;\n                }\n\n                // Pop the last character off the end of our string\n                $ret = self::substr($ret, 0, $i);\n            } elseif (\"\\033\" === $c) {\n                // Did we read an escape sequence?\n                $c .= fread($inputStream, 2);\n\n                // A = Up Arrow. B = Down Arrow\n                if (isset($c[2]) && ('A' === $c[2] || 'B' === $c[2])) {\n                    if ('A' === $c[2] && -1 === $ofs) {\n                        $ofs = 0;\n                    }\n\n                    if (0 === $numMatches) {\n                        continue;\n                    }\n\n                    $ofs += ('A' === $c[2]) ? -1 : 1;\n                    $ofs = ($numMatches + $ofs) % $numMatches;\n                }\n            } elseif (\\ord($c) < 32) {\n                if (\"\\t\" === $c || \"\\n\" === $c) {\n                    if ($numMatches > 0 && -1 !== $ofs) {\n                        $ret = (string) $matches[$ofs];\n                        // Echo out remaining chars for current match\n                        $remainingCharacters = substr($ret, \\strlen(trim($this->mostRecentlyEnteredValue($fullChoice))));\n                        $output->write($remainingCharacters);\n                        $fullChoice .= $remainingCharacters;\n                        $i = (false === $encoding = mb_detect_encoding($fullChoice, null, true)) ? \\strlen($fullChoice) : mb_strlen($fullChoice, $encoding);\n\n                        $matches = array_filter(\n                            $autocomplete($ret),\n                            fn ($match) => '' === $ret || str_starts_with($match, $ret)\n                        );\n                        $numMatches = \\count($matches);\n                        $ofs = -1;\n                    }\n\n                    if (\"\\n\" === $c) {\n                        $output->write($c);\n                        break;\n                    }\n\n                    $numMatches = 0;\n                }\n\n                continue;\n            } else {\n                if (\"\\x80\" <= $c) {\n                    $c .= fread($inputStream, [\"\\xC0\" => 1, \"\\xD0\" => 1, \"\\xE0\" => 2, \"\\xF0\" => 3][$c & \"\\xF0\"]);\n                }\n\n                $output->write($c);\n                $ret .= $c;\n                $fullChoice .= $c;\n                ++$i;\n\n                $tempRet = $ret;\n\n                if ($question instanceof ChoiceQuestion && $question->isMultiselect()) {\n                    $tempRet = $this->mostRecentlyEnteredValue($fullChoice);\n                }\n\n                $numMatches = 0;\n                $ofs = 0;\n\n                foreach ($autocomplete($ret) as $value) {\n                    // If typed characters match the beginning chunk of value (e.g. [AcmeDe]moBundle)\n                    if (str_starts_with($value, $tempRet)) {\n                        $matches[$numMatches++] = $value;\n                    }\n                }\n            }\n\n            $cursor->clearLineAfter();\n\n            if ($numMatches > 0 && -1 !== $ofs) {\n                $cursor->savePosition();\n                // Write highlighted text, complete the partially entered response\n                $charactersEntered = \\strlen(trim($this->mostRecentlyEnteredValue($fullChoice)));\n                $output->write('<hl>'.OutputFormatter::escapeTrailingBackslash(substr($matches[$ofs], $charactersEntered)).'</hl>');\n                $cursor->restorePosition();\n            }\n        }\n\n        // Reset stty so it behaves normally again\n        shell_exec('stty '.$sttyMode);\n\n        return $fullChoice;\n    }\n\n    private function mostRecentlyEnteredValue(string $entered): string\n    {\n        // Determine the most recent value that the user entered\n        if (!str_contains($entered, ',')) {\n            return $entered;\n        }\n\n        $choices = explode(',', $entered);\n        if ('' !== $lastChoice = trim($choices[\\count($choices) - 1])) {\n            return $lastChoice;\n        }\n\n        return $entered;\n    }\n\n    /**\n     * Gets a hidden response from user.\n     *\n     * @param resource $inputStream The handler resource\n     * @param bool     $trimmable   Is the answer trimmable\n     *\n     * @throws RuntimeException In case the fallback is deactivated and the response cannot be hidden\n     */\n    private function getHiddenResponse(OutputInterface $output, $inputStream, bool $trimmable = true): string\n    {\n        if ('\\\\' === \\DIRECTORY_SEPARATOR) {\n            $exe = __DIR__.'/../Resources/bin/hiddeninput.exe';\n\n            // handle code running from a phar\n            if (str_starts_with(__FILE__, 'phar:')) {\n                $tmpExe = sys_get_temp_dir().'/hiddeninput.exe';\n                copy($exe, $tmpExe);\n                $exe = $tmpExe;\n            }\n\n            $sExec = shell_exec('\"'.$exe.'\"');\n            $value = $trimmable ? rtrim($sExec) : $sExec;\n            $output->writeln('');\n\n            if (isset($tmpExe)) {\n                unlink($tmpExe);\n            }\n\n            return $value;\n        }\n\n        if (self::$stty && Terminal::hasSttyAvailable()) {\n            $sttyMode = shell_exec('stty -g');\n            shell_exec('stty -echo');\n        } elseif ($this->isInteractiveInput($inputStream)) {\n            throw new RuntimeException('Unable to hide the response.');\n        }\n\n        $value = fgets($inputStream, 4096);\n\n        if (4095 === \\strlen($value)) {\n            $errOutput = $output instanceof ConsoleOutputInterface ? $output->getErrorOutput() : $output;\n            $errOutput->warning('The value was possibly truncated by your shell or terminal emulator');\n        }\n\n        if (self::$stty && Terminal::hasSttyAvailable()) {\n            shell_exec('stty '.$sttyMode);\n        }\n\n        if (false === $value) {\n            throw new MissingInputException('Aborted.');\n        }\n        if ($trimmable) {\n            $value = trim($value);\n        }\n        $output->writeln('');\n\n        return $value;\n    }\n\n    /**\n     * Validates an attempt.\n     *\n     * @param callable $interviewer A callable that will ask for a question and return the result\n     *\n     * @throws \\Exception In case the max number of attempts has been reached and no valid response has been given\n     */\n    private function validateAttempts(callable $interviewer, OutputInterface $output, Question $question): mixed\n    {\n        $error = null;\n        $attempts = $question->getMaxAttempts();\n\n        while (null === $attempts || $attempts--) {\n            if (null !== $error) {\n                $this->writeError($output, $error);\n            }\n\n            try {\n                return $question->getValidator()($interviewer());\n            } catch (RuntimeException $e) {\n                throw $e;\n            } catch (\\Exception $error) {\n            }\n        }\n\n        throw $error;\n    }\n\n    private function isInteractiveInput($inputStream): bool\n    {\n        if ('php://stdin' !== (stream_get_meta_data($inputStream)['uri'] ?? null)) {\n            return false;\n        }\n\n        if (isset(self::$stdinIsInteractive)) {\n            return self::$stdinIsInteractive;\n        }\n\n        return self::$stdinIsInteractive = @stream_isatty(fopen('php://stdin', 'r'));\n    }\n\n    /**\n     * Reads one or more lines of input and returns what is read.\n     *\n     * @param resource $inputStream The handler resource\n     * @param Question $question    The question being asked\n     */\n    private function readInput($inputStream, Question $question): string|false\n    {\n        if (!$question->isMultiline()) {\n            $cp = $this->setIOCodepage();\n            $ret = fgets($inputStream, 4096);\n\n            return $this->resetIOCodepage($cp, $ret);\n        }\n\n        $multiLineStreamReader = $this->cloneInputStream($inputStream);\n        if (null === $multiLineStreamReader) {\n            return false;\n        }\n\n        $ret = '';\n        $cp = $this->setIOCodepage();\n        while (false !== ($char = fgetc($multiLineStreamReader))) {\n            if (\\PHP_EOL === \"{$ret}{$char}\") {\n                break;\n            }\n            $ret .= $char;\n        }\n\n        return $this->resetIOCodepage($cp, $ret);\n    }\n\n    private function setIOCodepage(): int\n    {\n        if (\\function_exists('sapi_windows_cp_set')) {\n            $cp = sapi_windows_cp_get();\n            sapi_windows_cp_set(sapi_windows_cp_get('oem'));\n\n            return $cp;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Sets console I/O to the specified code page and converts the user input.\n     */\n    private function resetIOCodepage(int $cp, string|false $input): string|false\n    {\n        if (0 !== $cp) {\n            sapi_windows_cp_set($cp);\n\n            if (false !== $input && '' !== $input) {\n                $input = sapi_windows_cp_conv(sapi_windows_cp_get('oem'), $cp, $input);\n            }\n        }\n\n        return $input;\n    }\n\n    /**\n     * Clones an input stream in order to act on one instance of the same\n     * stream without affecting the other instance.\n     *\n     * @param resource $inputStream The handler resource\n     *\n     * @return resource|null The cloned resource, null in case it could not be cloned\n     */\n    private function cloneInputStream($inputStream)\n    {\n        $streamMetaData = stream_get_meta_data($inputStream);\n        $seekable = $streamMetaData['seekable'] ?? false;\n        $mode = $streamMetaData['mode'] ?? 'rb';\n        $uri = $streamMetaData['uri'] ?? null;\n\n        if (null === $uri) {\n            return null;\n        }\n\n        $cloneStream = fopen($uri, $mode);\n\n        // For seekable and writable streams, add all the same data to the\n        // cloned stream and then seek to the same offset.\n        if (true === $seekable && !\\in_array($mode, ['r', 'rb', 'rt'])) {\n            $offset = ftell($inputStream);\n            rewind($inputStream);\n            stream_copy_to_stream($inputStream, $cloneStream);\n            fseek($inputStream, $offset);\n            fseek($cloneStream, $offset);\n        }\n\n        return $cloneStream;\n    }\n}\n\n\n--- File Index 104: Helper/Helper.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\nuse Symfony\\Component\\String\\UnicodeString;\n\n/**\n * Helper is the base class for all helper classes.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nabstract class Helper implements HelperInterface\n{\n    protected ?HelperSet $helperSet = null;\n\n    public function setHelperSet(?HelperSet $helperSet): void\n    {\n        $this->helperSet = $helperSet;\n    }\n\n    public function getHelperSet(): ?HelperSet\n    {\n        return $this->helperSet;\n    }\n\n    /**\n     * Returns the width of a string, using mb_strwidth if it is available.\n     * The width is how many characters positions the string will use.\n     */\n    public static function width(?string $string): int\n    {\n        $string ??= '';\n\n        if (preg_match('//u', $string)) {\n            return (new UnicodeString($string))->width(false);\n        }\n\n        if (false === $encoding = mb_detect_encoding($string, null, true)) {\n            return \\strlen($string);\n        }\n\n        return mb_strwidth($string, $encoding);\n    }\n\n    /**\n     * Returns the length of a string, using mb_strlen if it is available.\n     * The length is related to how many bytes the string will use.\n     */\n    public static function length(?string $string): int\n    {\n        $string ??= '';\n\n        if (preg_match('//u', $string)) {\n            return (new UnicodeString($string))->length();\n        }\n\n        if (false === $encoding = mb_detect_encoding($string, null, true)) {\n            return \\strlen($string);\n        }\n\n        return mb_strlen($string, $encoding);\n    }\n\n    /**\n     * Returns the subset of a string, using mb_substr if it is available.\n     */\n    public static function substr(?string $string, int $from, ?int $length = null): string\n    {\n        $string ??= '';\n\n        if (false === $encoding = mb_detect_encoding($string, null, true)) {\n            return substr($string, $from, $length);\n        }\n\n        return mb_substr($string, $from, $length, $encoding);\n    }\n\n    public static function formatTime(int|float $secs, int $precision = 1): string\n    {\n        $secs = (int) floor($secs);\n\n        if (0 === $secs) {\n            return '< 1 sec';\n        }\n\n        static $timeFormats = [\n            [1, '1 sec', 'secs'],\n            [60, '1 min', 'mins'],\n            [3600, '1 hr', 'hrs'],\n            [86400, '1 day', 'days'],\n        ];\n\n        $times = [];\n        foreach ($timeFormats as $index => $format) {\n            $seconds = isset($timeFormats[$index + 1]) ? $secs % $timeFormats[$index + 1][0] : $secs;\n\n            if (isset($times[$index - $precision])) {\n                unset($times[$index - $precision]);\n            }\n\n            if (0 === $seconds) {\n                continue;\n            }\n\n            $unitCount = ($seconds / $format[0]);\n            $times[$index] = 1 === $unitCount ? $format[1] : $unitCount.' '.$format[2];\n\n            if ($secs === $seconds) {\n                break;\n            }\n\n            $secs -= $seconds;\n        }\n\n        return implode(', ', array_reverse($times));\n    }\n\n    public static function formatMemory(int $memory): string\n    {\n        if ($memory >= 1024 * 1024 * 1024) {\n            return \\sprintf('%.1f GiB', $memory / 1024 / 1024 / 1024);\n        }\n\n        if ($memory >= 1024 * 1024) {\n            return \\sprintf('%.1f MiB', $memory / 1024 / 1024);\n        }\n\n        if ($memory >= 1024) {\n            return \\sprintf('%d KiB', $memory / 1024);\n        }\n\n        return \\sprintf('%d B', $memory);\n    }\n\n    public static function removeDecoration(OutputFormatterInterface $formatter, ?string $string): string\n    {\n        $isDecorated = $formatter->isDecorated();\n        $formatter->setDecorated(false);\n        // remove <...> formatting\n        $string = $formatter->format($string ?? '');\n        // remove already formatted characters\n        $string = preg_replace(\"/\\033\\[[^m]*m/\", '', $string ?? '');\n        // remove terminal hyperlinks\n        $string = preg_replace('/\\\\033]8;[^;]*;[^\\\\033]*\\\\033\\\\\\\\/', '', $string ?? '');\n        $formatter->setDecorated($isDecorated);\n\n        return $string;\n    }\n}\n\n\n--- File Index 105: Helper/ProgressBar.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Cursor;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Symfony\\Component\\Console\\Output\\ConsoleSectionOutput;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Terminal;\n\n/**\n * The ProgressBar provides helpers to display progress output.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n * @author Chris Jones <leeked@gmail.com>\n */\nfinal class ProgressBar\n{\n    public const FORMAT_VERBOSE = 'verbose';\n    public const FORMAT_VERY_VERBOSE = 'very_verbose';\n    public const FORMAT_DEBUG = 'debug';\n    public const FORMAT_NORMAL = 'normal';\n\n    private const FORMAT_VERBOSE_NOMAX = 'verbose_nomax';\n    private const FORMAT_VERY_VERBOSE_NOMAX = 'very_verbose_nomax';\n    private const FORMAT_DEBUG_NOMAX = 'debug_nomax';\n    private const FORMAT_NORMAL_NOMAX = 'normal_nomax';\n\n    private int $barWidth = 28;\n    private string $barChar;\n    private string $emptyBarChar = '-';\n    private string $progressChar = '>';\n    private ?string $format = null;\n    private ?string $internalFormat = null;\n    private ?int $redrawFreq = 1;\n    private int $writeCount = 0;\n    private float $lastWriteTime = 0;\n    private float $minSecondsBetweenRedraws = 0;\n    private float $maxSecondsBetweenRedraws = 1;\n    private OutputInterface $output;\n    private int $step = 0;\n    private int $startingStep = 0;\n    private ?int $max = null;\n    private int $startTime;\n    private int $stepWidth;\n    private float $percent = 0.0;\n    private array $messages = [];\n    private bool $overwrite = true;\n    private Terminal $terminal;\n    private ?string $previousMessage = null;\n    private Cursor $cursor;\n    private array $placeholders = [];\n\n    private static array $formatters;\n    private static array $formats;\n\n    /**\n     * @param int $max Maximum steps (0 if unknown)\n     */\n    public function __construct(OutputInterface $output, int $max = 0, float $minSecondsBetweenRedraws = 1 / 25)\n    {\n        if ($output instanceof ConsoleOutputInterface) {\n            $output = $output->getErrorOutput();\n        }\n\n        $this->output = $output;\n        $this->setMaxSteps($max);\n        $this->terminal = new Terminal();\n\n        if (0 < $minSecondsBetweenRedraws) {\n            $this->redrawFreq = null;\n            $this->minSecondsBetweenRedraws = $minSecondsBetweenRedraws;\n        }\n\n        if (!$this->output->isDecorated()) {\n            // disable overwrite when output does not support ANSI codes.\n            $this->overwrite = false;\n\n            // set a reasonable redraw frequency so output isn't flooded\n            $this->redrawFreq = null;\n        }\n\n        $this->startTime = time();\n        $this->cursor = new Cursor($output);\n    }\n\n    /**\n     * Sets a placeholder formatter for a given name, globally for all instances of ProgressBar.\n     *\n     * This method also allow you to override an existing placeholder.\n     *\n     * @param string                       $name     The placeholder name (including the delimiter char like %)\n     * @param callable(ProgressBar):string $callable A PHP callable\n     */\n    public static function setPlaceholderFormatterDefinition(string $name, callable $callable): void\n    {\n        self::$formatters ??= self::initPlaceholderFormatters();\n\n        self::$formatters[$name] = $callable;\n    }\n\n    /**\n     * Gets the placeholder formatter for a given name.\n     *\n     * @param string $name The placeholder name (including the delimiter char like %)\n     */\n    public static function getPlaceholderFormatterDefinition(string $name): ?callable\n    {\n        self::$formatters ??= self::initPlaceholderFormatters();\n\n        return self::$formatters[$name] ?? null;\n    }\n\n    /**\n     * Sets a placeholder formatter for a given name, for this instance only.\n     *\n     * @param callable(ProgressBar):string $callable A PHP callable\n     */\n    public function setPlaceholderFormatter(string $name, callable $callable): void\n    {\n        $this->placeholders[$name] = $callable;\n    }\n\n    /**\n     * Gets the placeholder formatter for a given name.\n     *\n     * @param string $name The placeholder name (including the delimiter char like %)\n     */\n    public function getPlaceholderFormatter(string $name): ?callable\n    {\n        return $this->placeholders[$name] ?? $this::getPlaceholderFormatterDefinition($name);\n    }\n\n    /**\n     * Sets a format for a given name.\n     *\n     * This method also allow you to override an existing format.\n     *\n     * @param string $name   The format name\n     * @param string $format A format string\n     */\n    public static function setFormatDefinition(string $name, string $format): void\n    {\n        self::$formats ??= self::initFormats();\n\n        self::$formats[$name] = $format;\n    }\n\n    /**\n     * Gets the format for a given name.\n     *\n     * @param string $name The format name\n     */\n    public static function getFormatDefinition(string $name): ?string\n    {\n        self::$formats ??= self::initFormats();\n\n        return self::$formats[$name] ?? null;\n    }\n\n    /**\n     * Associates a text with a named placeholder.\n     *\n     * The text is displayed when the progress bar is rendered but only\n     * when the corresponding placeholder is part of the custom format line\n     * (by wrapping the name with %).\n     *\n     * @param string $message The text to associate with the placeholder\n     * @param string $name    The name of the placeholder\n     */\n    public function setMessage(string $message, string $name = 'message'): void\n    {\n        $this->messages[$name] = $message;\n    }\n\n    public function getMessage(string $name = 'message'): ?string\n    {\n        return $this->messages[$name] ?? null;\n    }\n\n    public function getStartTime(): int\n    {\n        return $this->startTime;\n    }\n\n    public function getMaxSteps(): int\n    {\n        return $this->max ?? 0;\n    }\n\n    public function getProgress(): int\n    {\n        return $this->step;\n    }\n\n    private function getStepWidth(): int\n    {\n        return $this->stepWidth;\n    }\n\n    public function getProgressPercent(): float\n    {\n        return $this->percent;\n    }\n\n    public function getBarOffset(): float\n    {\n        return floor(null !== $this->max ? $this->percent * $this->barWidth : (null === $this->redrawFreq ? (int) (min(5, $this->barWidth / 15) * $this->writeCount) : $this->step) % $this->barWidth);\n    }\n\n    public function getEstimated(): float\n    {\n        if (0 === $this->step || $this->step === $this->startingStep) {\n            return 0;\n        }\n\n        return round((time() - $this->startTime) / ($this->step - $this->startingStep) * $this->max);\n    }\n\n    public function getRemaining(): float\n    {\n        if (0 === $this->step || $this->step === $this->startingStep) {\n            return 0;\n        }\n\n        return round((time() - $this->startTime) / ($this->step - $this->startingStep) * ($this->max - $this->step));\n    }\n\n    public function setBarWidth(int $size): void\n    {\n        $this->barWidth = max(1, $size);\n    }\n\n    public function getBarWidth(): int\n    {\n        return $this->barWidth;\n    }\n\n    public function setBarCharacter(string $char): void\n    {\n        $this->barChar = $char;\n    }\n\n    public function getBarCharacter(): string\n    {\n        return $this->barChar ?? (null !== $this->max ? '=' : $this->emptyBarChar);\n    }\n\n    public function setEmptyBarCharacter(string $char): void\n    {\n        $this->emptyBarChar = $char;\n    }\n\n    public function getEmptyBarCharacter(): string\n    {\n        return $this->emptyBarChar;\n    }\n\n    public function setProgressCharacter(string $char): void\n    {\n        $this->progressChar = $char;\n    }\n\n    public function getProgressCharacter(): string\n    {\n        return $this->progressChar;\n    }\n\n    public function setFormat(string $format): void\n    {\n        $this->format = null;\n        $this->internalFormat = $format;\n    }\n\n    /**\n     * Sets the redraw frequency.\n     *\n     * @param int|null $freq The frequency in steps\n     */\n    public function setRedrawFrequency(?int $freq): void\n    {\n        $this->redrawFreq = null !== $freq ? max(1, $freq) : null;\n    }\n\n    public function minSecondsBetweenRedraws(float $seconds): void\n    {\n        $this->minSecondsBetweenRedraws = $seconds;\n    }\n\n    public function maxSecondsBetweenRedraws(float $seconds): void\n    {\n        $this->maxSecondsBetweenRedraws = $seconds;\n    }\n\n    /**\n     * Returns an iterator that will automatically update the progress bar when iterated.\n     *\n     * @template TKey\n     * @template TValue\n     *\n     * @param iterable<TKey, TValue> $iterable\n     * @param int|null               $max      Number of steps to complete the bar (0 if indeterminate), if null it will be inferred from $iterable\n     *\n     * @return iterable<TKey, TValue>\n     */\n    public function iterate(iterable $iterable, ?int $max = null): iterable\n    {\n        if (0 === $max) {\n            $max = null;\n        }\n\n        $max ??= is_countable($iterable) ? \\count($iterable) : null;\n\n        if (0 === $max) {\n            $this->max = 0;\n            $this->stepWidth = 2;\n            $this->finish();\n\n            return;\n        }\n\n        $this->start($max);\n\n        foreach ($iterable as $key => $value) {\n            yield $key => $value;\n\n            $this->advance();\n        }\n\n        $this->finish();\n    }\n\n    /**\n     * Starts the progress output.\n     *\n     * @param int|null $max     Number of steps to complete the bar (0 if indeterminate), null to leave unchanged\n     * @param int      $startAt The starting point of the bar (useful e.g. when resuming a previously started bar)\n     */\n    public function start(?int $max = null, int $startAt = 0): void\n    {\n        $this->startTime = time();\n        $this->step = $startAt;\n        $this->startingStep = $startAt;\n\n        $startAt > 0 ? $this->setProgress($startAt) : $this->percent = 0.0;\n\n        if (null !== $max) {\n            $this->setMaxSteps($max);\n        }\n\n        $this->display();\n    }\n\n    /**\n     * Advances the progress output X steps.\n     *\n     * @param int $step Number of steps to advance\n     */\n    public function advance(int $step = 1): void\n    {\n        $this->setProgress($this->step + $step);\n    }\n\n    /**\n     * Sets whether to overwrite the progressbar, false for new line.\n     */\n    public function setOverwrite(bool $overwrite): void\n    {\n        $this->overwrite = $overwrite;\n    }\n\n    public function setProgress(int $step): void\n    {\n        if ($this->max && $step > $this->max) {\n            $this->max = $step;\n        } elseif ($step < 0) {\n            $step = 0;\n        }\n\n        $redrawFreq = $this->redrawFreq ?? (($this->max ?? 10) / 10);\n        $prevPeriod = $redrawFreq ? (int) ($this->step / $redrawFreq) : 0;\n        $currPeriod = $redrawFreq ? (int) ($step / $redrawFreq) : 0;\n        $this->step = $step;\n        $this->percent = match ($this->max) {\n            null => 0,\n            0 => 1,\n            default => (float) $this->step / $this->max,\n        };\n        $timeInterval = microtime(true) - $this->lastWriteTime;\n\n        // Draw regardless of other limits\n        if ($this->max === $step) {\n            $this->display();\n\n            return;\n        }\n\n        // Throttling\n        if ($timeInterval < $this->minSecondsBetweenRedraws) {\n            return;\n        }\n\n        // Draw each step period, but not too late\n        if ($prevPeriod !== $currPeriod || $timeInterval >= $this->maxSecondsBetweenRedraws) {\n            $this->display();\n        }\n    }\n\n    public function setMaxSteps(?int $max): void\n    {\n        if (0 === $max) {\n            $max = null;\n        }\n\n        $this->format = null;\n        if (null === $max) {\n            $this->max = null;\n            $this->stepWidth = 4;\n        } else {\n            $this->max = max(0, $max);\n            $this->stepWidth = Helper::width((string) $this->max);\n        }\n    }\n\n    /**\n     * Finishes the progress output.\n     */\n    public function finish(): void\n    {\n        if (null === $this->max) {\n            $this->max = $this->step;\n        }\n\n        if (($this->step === $this->max || null === $this->max) && !$this->overwrite) {\n            // prevent double 100% output\n            return;\n        }\n\n        $this->setProgress($this->max ?? $this->step);\n    }\n\n    /**\n     * Outputs the current progress string.\n     */\n    public function display(): void\n    {\n        if (OutputInterface::VERBOSITY_QUIET === $this->output->getVerbosity()) {\n            return;\n        }\n\n        if (null === $this->format) {\n            $this->setRealFormat($this->internalFormat ?: $this->determineBestFormat());\n        }\n\n        $this->overwrite($this->buildLine());\n    }\n\n    /**\n     * Removes the progress bar from the current line.\n     *\n     * This is useful if you wish to write some output\n     * while a progress bar is running.\n     * Call display() to show the progress bar again.\n     */\n    public function clear(): void\n    {\n        if (!$this->overwrite) {\n            return;\n        }\n\n        if (null === $this->format) {\n            $this->setRealFormat($this->internalFormat ?: $this->determineBestFormat());\n        }\n\n        $this->overwrite('');\n    }\n\n    private function setRealFormat(string $format): void\n    {\n        // try to use the _nomax variant if available\n        if (!$this->max && null !== self::getFormatDefinition($format.'_nomax')) {\n            $this->format = self::getFormatDefinition($format.'_nomax');\n        } elseif (null !== self::getFormatDefinition($format)) {\n            $this->format = self::getFormatDefinition($format);\n        } else {\n            $this->format = $format;\n        }\n    }\n\n    /**\n     * Overwrites a previous message to the output.\n     */\n    private function overwrite(string $message): void\n    {\n        if ($this->previousMessage === $message) {\n            return;\n        }\n\n        $originalMessage = $message;\n\n        if ($this->overwrite) {\n            if (null !== $this->previousMessage) {\n                if ($this->output instanceof ConsoleSectionOutput) {\n                    $messageLines = explode(\"\\n\", $this->previousMessage);\n                    $lineCount = \\count($messageLines);\n\n                    $lastLineWithoutDecoration = Helper::removeDecoration($this->output->getFormatter(), end($messageLines) ?? '');\n\n                    // When the last previous line is empty (without formatting) it is already cleared by the section output, so we don't need to clear it again\n                    if ('' === $lastLineWithoutDecoration) {\n                        --$lineCount;\n                    }\n\n                    foreach ($messageLines as $messageLine) {\n                        $messageLineLength = Helper::width(Helper::removeDecoration($this->output->getFormatter(), $messageLine));\n                        if ($messageLineLength > $this->terminal->getWidth()) {\n                            $lineCount += floor($messageLineLength / $this->terminal->getWidth());\n                        }\n                    }\n\n                    $this->output->clear($lineCount);\n                } else {\n                    $lineCount = substr_count($this->previousMessage, \"\\n\");\n                    for ($i = 0; $i < $lineCount; ++$i) {\n                        $this->cursor->moveToColumn(1);\n                        $this->cursor->clearLine();\n                        $this->cursor->moveUp();\n                    }\n\n                    $this->cursor->moveToColumn(1);\n                    $this->cursor->clearLine();\n                }\n            }\n        } elseif ($this->step > 0) {\n            $message = \\PHP_EOL.$message;\n        }\n\n        $this->previousMessage = $originalMessage;\n        $this->lastWriteTime = microtime(true);\n\n        $this->output->write($message);\n        ++$this->writeCount;\n    }\n\n    private function determineBestFormat(): string\n    {\n        return match ($this->output->getVerbosity()) {\n            // OutputInterface::VERBOSITY_QUIET: display is disabled anyway\n            OutputInterface::VERBOSITY_VERBOSE => $this->max ? self::FORMAT_VERBOSE : self::FORMAT_VERBOSE_NOMAX,\n            OutputInterface::VERBOSITY_VERY_VERBOSE => $this->max ? self::FORMAT_VERY_VERBOSE : self::FORMAT_VERY_VERBOSE_NOMAX,\n            OutputInterface::VERBOSITY_DEBUG => $this->max ? self::FORMAT_DEBUG : self::FORMAT_DEBUG_NOMAX,\n            default => $this->max ? self::FORMAT_NORMAL : self::FORMAT_NORMAL_NOMAX,\n        };\n    }\n\n    private static function initPlaceholderFormatters(): array\n    {\n        return [\n            'bar' => function (self $bar, OutputInterface $output) {\n                $completeBars = $bar->getBarOffset();\n                $display = str_repeat($bar->getBarCharacter(), $completeBars);\n                if ($completeBars < $bar->getBarWidth()) {\n                    $emptyBars = $bar->getBarWidth() - $completeBars - Helper::length(Helper::removeDecoration($output->getFormatter(), $bar->getProgressCharacter()));\n                    $display .= $bar->getProgressCharacter().str_repeat($bar->getEmptyBarCharacter(), $emptyBars);\n                }\n\n                return $display;\n            },\n            'elapsed' => fn (self $bar) => Helper::formatTime(time() - $bar->getStartTime(), 2),\n            'remaining' => function (self $bar) {\n                if (null === $bar->getMaxSteps()) {\n                    throw new LogicException('Unable to display the remaining time if the maximum number of steps is not set.');\n                }\n\n                return Helper::formatTime($bar->getRemaining(), 2);\n            },\n            'estimated' => function (self $bar) {\n                if (null === $bar->getMaxSteps()) {\n                    throw new LogicException('Unable to display the estimated time if the maximum number of steps is not set.');\n                }\n\n                return Helper::formatTime($bar->getEstimated(), 2);\n            },\n            'memory' => fn (self $bar) => Helper::formatMemory(memory_get_usage(true)),\n            'current' => fn (self $bar) => str_pad($bar->getProgress(), $bar->getStepWidth(), ' ', \\STR_PAD_LEFT),\n            'max' => fn (self $bar) => $bar->getMaxSteps(),\n            'percent' => fn (self $bar) => floor($bar->getProgressPercent() * 100),\n        ];\n    }\n\n    private static function initFormats(): array\n    {\n        return [\n            self::FORMAT_NORMAL => ' %current%/%max% [%bar%] %percent:3s%%',\n            self::FORMAT_NORMAL_NOMAX => ' %current% [%bar%]',\n\n            self::FORMAT_VERBOSE => ' %current%/%max% [%bar%] %percent:3s%% %elapsed:6s%',\n            self::FORMAT_VERBOSE_NOMAX => ' %current% [%bar%] %elapsed:6s%',\n\n            self::FORMAT_VERY_VERBOSE => ' %current%/%max% [%bar%] %percent:3s%% %elapsed:6s%/%estimated:-6s%',\n            self::FORMAT_VERY_VERBOSE_NOMAX => ' %current% [%bar%] %elapsed:6s%',\n\n            self::FORMAT_DEBUG => ' %current%/%max% [%bar%] %percent:3s%% %elapsed:6s%/%estimated:-6s% %memory:6s%',\n            self::FORMAT_DEBUG_NOMAX => ' %current% [%bar%] %elapsed:6s% %memory:6s%',\n        ];\n    }\n\n    private function buildLine(): string\n    {\n        \\assert(null !== $this->format);\n\n        $regex = '{%([a-z\\-_]+)(?:\\:([^%]+))?%}i';\n        $callback = function ($matches) {\n            if ($formatter = $this->getPlaceholderFormatter($matches[1])) {\n                $text = $formatter($this, $this->output);\n            } elseif (isset($this->messages[$matches[1]])) {\n                $text = $this->messages[$matches[1]];\n            } else {\n                return $matches[0];\n            }\n\n            if (isset($matches[2])) {\n                $text = \\sprintf('%'.$matches[2], $text);\n            }\n\n            return $text;\n        };\n        $line = preg_replace_callback($regex, $callback, $this->format);\n\n        // gets string length for each sub line with multiline format\n        $linesLength = array_map(fn ($subLine) => Helper::width(Helper::removeDecoration($this->output->getFormatter(), rtrim($subLine, \"\\r\"))), explode(\"\\n\", $line));\n\n        $linesWidth = max($linesLength);\n\n        $terminalWidth = $this->terminal->getWidth();\n        if ($linesWidth <= $terminalWidth) {\n            return $line;\n        }\n\n        $this->setBarWidth($this->barWidth - $linesWidth + $terminalWidth);\n\n        return preg_replace_callback($regex, $callback, $this->format);\n    }\n}\n\n\n--- File Index 106: Helper/DebugFormatterHelper.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\n/**\n * Helps outputting debug information when running an external program from a command.\n *\n * An external program can be a Process, an HTTP request, or anything else.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass DebugFormatterHelper extends Helper\n{\n    private const COLORS = ['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'default'];\n    private array $started = [];\n    private int $count = -1;\n\n    /**\n     * Starts a debug formatting session.\n     */\n    public function start(string $id, string $message, string $prefix = 'RUN'): string\n    {\n        $this->started[$id] = ['border' => ++$this->count % \\count(self::COLORS)];\n\n        return \\sprintf(\"%s<bg=blue;fg=white> %s </> <fg=blue>%s</>\\n\", $this->getBorder($id), $prefix, $message);\n    }\n\n    /**\n     * Adds progress to a formatting session.\n     */\n    public function progress(string $id, string $buffer, bool $error = false, string $prefix = 'OUT', string $errorPrefix = 'ERR'): string\n    {\n        $message = '';\n\n        if ($error) {\n            if (isset($this->started[$id]['out'])) {\n                $message .= \"\\n\";\n                unset($this->started[$id]['out']);\n            }\n            if (!isset($this->started[$id]['err'])) {\n                $message .= \\sprintf('%s<bg=red;fg=white> %s </> ', $this->getBorder($id), $errorPrefix);\n                $this->started[$id]['err'] = true;\n            }\n\n            $message .= str_replace(\"\\n\", \\sprintf(\"\\n%s<bg=red;fg=white> %s </> \", $this->getBorder($id), $errorPrefix), $buffer);\n        } else {\n            if (isset($this->started[$id]['err'])) {\n                $message .= \"\\n\";\n                unset($this->started[$id]['err']);\n            }\n            if (!isset($this->started[$id]['out'])) {\n                $message .= \\sprintf('%s<bg=green;fg=white> %s </> ', $this->getBorder($id), $prefix);\n                $this->started[$id]['out'] = true;\n            }\n\n            $message .= str_replace(\"\\n\", \\sprintf(\"\\n%s<bg=green;fg=white> %s </> \", $this->getBorder($id), $prefix), $buffer);\n        }\n\n        return $message;\n    }\n\n    /**\n     * Stops a formatting session.\n     */\n    public function stop(string $id, string $message, bool $successful, string $prefix = 'RES'): string\n    {\n        $trailingEOL = isset($this->started[$id]['out']) || isset($this->started[$id]['err']) ? \"\\n\" : '';\n\n        if ($successful) {\n            return \\sprintf(\"%s%s<bg=green;fg=white> %s </> <fg=green>%s</>\\n\", $trailingEOL, $this->getBorder($id), $prefix, $message);\n        }\n\n        $message = \\sprintf(\"%s%s<bg=red;fg=white> %s </> <fg=red>%s</>\\n\", $trailingEOL, $this->getBorder($id), $prefix, $message);\n\n        unset($this->started[$id]['out'], $this->started[$id]['err']);\n\n        return $message;\n    }\n\n    private function getBorder(string $id): string\n    {\n        return \\sprintf('<bg=%s> </>', self::COLORS[$this->started[$id]['border']]);\n    }\n\n    public function getName(): string\n    {\n        return 'debug_formatter';\n    }\n}\n\n\n--- File Index 107: Helper/ProgressIndicator.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * @author Kevin Bond <kevinbond@gmail.com>\n */\nclass ProgressIndicator\n{\n    private const FORMATS = [\n        'normal' => ' %indicator% %message%',\n        'normal_no_ansi' => ' %message%',\n\n        'verbose' => ' %indicator% %message% (%elapsed:6s%)',\n        'verbose_no_ansi' => ' %message% (%elapsed:6s%)',\n\n        'very_verbose' => ' %indicator% %message% (%elapsed:6s%, %memory:6s%)',\n        'very_verbose_no_ansi' => ' %message% (%elapsed:6s%, %memory:6s%)',\n    ];\n\n    private int $startTime;\n    private ?string $format = null;\n    private ?string $message = null;\n    private array $indicatorValues;\n    private int $indicatorCurrent;\n    private string $finishedIndicatorValue;\n    private float $indicatorUpdateTime;\n    private bool $started = false;\n    private bool $finished = false;\n\n    /**\n     * @var array<string, callable>\n     */\n    private static array $formatters;\n\n    /**\n     * @param int        $indicatorChangeInterval Change interval in milliseconds\n     * @param array|null $indicatorValues         Animated indicator characters\n     */\n    public function __construct(\n        private OutputInterface $output,\n        ?string $format = null,\n        private int $indicatorChangeInterval = 100,\n        ?array $indicatorValues = null,\n        ?string $finishedIndicatorValue = null,\n    ) {\n        $format ??= $this->determineBestFormat();\n        $indicatorValues ??= ['-', '\\\\', '|', '/'];\n        $indicatorValues = array_values($indicatorValues);\n        $finishedIndicatorValue ??= '\u2714';\n\n        if (2 > \\count($indicatorValues)) {\n            throw new InvalidArgumentException('Must have at least 2 indicator value characters.');\n        }\n\n        $this->format = self::getFormatDefinition($format);\n        $this->indicatorValues = $indicatorValues;\n        $this->finishedIndicatorValue = $finishedIndicatorValue;\n        $this->startTime = time();\n    }\n\n    /**\n     * Sets the current indicator message.\n     */\n    public function setMessage(?string $message): void\n    {\n        $this->message = $message;\n\n        $this->display();\n    }\n\n    /**\n     * Starts the indicator output.\n     */\n    public function start(string $message): void\n    {\n        if ($this->started) {\n            throw new LogicException('Progress indicator already started.');\n        }\n\n        $this->message = $message;\n        $this->started = true;\n        $this->finished = false;\n        $this->startTime = time();\n        $this->indicatorUpdateTime = $this->getCurrentTimeInMilliseconds() + $this->indicatorChangeInterval;\n        $this->indicatorCurrent = 0;\n\n        $this->display();\n    }\n\n    /**\n     * Advances the indicator.\n     */\n    public function advance(): void\n    {\n        if (!$this->started) {\n            throw new LogicException('Progress indicator has not yet been started.');\n        }\n\n        if (!$this->output->isDecorated()) {\n            return;\n        }\n\n        $currentTime = $this->getCurrentTimeInMilliseconds();\n\n        if ($currentTime < $this->indicatorUpdateTime) {\n            return;\n        }\n\n        $this->indicatorUpdateTime = $currentTime + $this->indicatorChangeInterval;\n        ++$this->indicatorCurrent;\n\n        $this->display();\n    }\n\n    /**\n     * Finish the indicator with message.\n     *\n     * @param ?string $finishedIndicator\n     */\n    public function finish(string $message/* , ?string $finishedIndicator = null */): void\n    {\n        $finishedIndicator = 1 < \\func_num_args() ? func_get_arg(1) : null;\n        if (null !== $finishedIndicator && !\\is_string($finishedIndicator)) {\n            throw new \\TypeError(\\sprintf('Argument 2 passed to \"%s()\" must be of the type string or null, \"%s\" given.', __METHOD__, get_debug_type($finishedIndicator)));\n        }\n\n        if (!$this->started) {\n            throw new LogicException('Progress indicator has not yet been started.');\n        }\n\n        if (null !== $finishedIndicator) {\n            $this->finishedIndicatorValue = $finishedIndicator;\n        }\n\n        $this->finished = true;\n        $this->message = $message;\n        $this->display();\n        $this->output->writeln('');\n        $this->started = false;\n    }\n\n    /**\n     * Gets the format for a given name.\n     */\n    public static function getFormatDefinition(string $name): ?string\n    {\n        return self::FORMATS[$name] ?? null;\n    }\n\n    /**\n     * Sets a placeholder formatter for a given name.\n     *\n     * This method also allow you to override an existing placeholder.\n     */\n    public static function setPlaceholderFormatterDefinition(string $name, callable $callable): void\n    {\n        self::$formatters ??= self::initPlaceholderFormatters();\n\n        self::$formatters[$name] = $callable;\n    }\n\n    /**\n     * Gets the placeholder formatter for a given name (including the delimiter char like %).\n     */\n    public static function getPlaceholderFormatterDefinition(string $name): ?callable\n    {\n        self::$formatters ??= self::initPlaceholderFormatters();\n\n        return self::$formatters[$name] ?? null;\n    }\n\n    private function display(): void\n    {\n        if (OutputInterface::VERBOSITY_QUIET === $this->output->getVerbosity()) {\n            return;\n        }\n\n        $this->overwrite(preg_replace_callback('{%([a-z\\-_]+)(?:\\:([^%]+))?%}i', function ($matches) {\n            if ($formatter = self::getPlaceholderFormatterDefinition($matches[1])) {\n                return $formatter($this);\n            }\n\n            return $matches[0];\n        }, $this->format ?? ''));\n    }\n\n    private function determineBestFormat(): string\n    {\n        return match ($this->output->getVerbosity()) {\n            // OutputInterface::VERBOSITY_QUIET: display is disabled anyway\n            OutputInterface::VERBOSITY_VERBOSE => $this->output->isDecorated() ? 'verbose' : 'verbose_no_ansi',\n            OutputInterface::VERBOSITY_VERY_VERBOSE,\n            OutputInterface::VERBOSITY_DEBUG => $this->output->isDecorated() ? 'very_verbose' : 'very_verbose_no_ansi',\n            default => $this->output->isDecorated() ? 'normal' : 'normal_no_ansi',\n        };\n    }\n\n    /**\n     * Overwrites a previous message to the output.\n     */\n    private function overwrite(string $message): void\n    {\n        if ($this->output->isDecorated()) {\n            $this->output->write(\"\\x0D\\x1B[2K\");\n            $this->output->write($message);\n        } else {\n            $this->output->writeln($message);\n        }\n    }\n\n    private function getCurrentTimeInMilliseconds(): float\n    {\n        return round(microtime(true) * 1000);\n    }\n\n    /**\n     * @return array<string, \\Closure>\n     */\n    private static function initPlaceholderFormatters(): array\n    {\n        return [\n            'indicator' => fn (self $indicator) => $indicator->finished ? $indicator->finishedIndicatorValue : $indicator->indicatorValues[$indicator->indicatorCurrent % \\count($indicator->indicatorValues)],\n            'message' => fn (self $indicator) => $indicator->message,\n            'elapsed' => fn (self $indicator) => Helper::formatTime(time() - $indicator->startTime, 2),\n            'memory' => fn () => Helper::formatMemory(memory_get_usage(true)),\n        ];\n    }\n}\n\n\n--- File Index 108: Helper/SymfonyQuestionHelper.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatter;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion;\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\nuse Symfony\\Component\\Console\\Style\\SymfonyStyle;\n\n/**\n * Symfony Style Guide compliant question helper.\n *\n * @author Kevin Bond <kevinbond@gmail.com>\n */\nclass SymfonyQuestionHelper extends QuestionHelper\n{\n    protected function writePrompt(OutputInterface $output, Question $question): void\n    {\n        $text = OutputFormatter::escapeTrailingBackslash($question->getQuestion());\n        $default = $question->getDefault();\n\n        if ($question->isMultiline()) {\n            $text .= \\sprintf(' (press %s to continue)', $this->getEofShortcut());\n        }\n\n        switch (true) {\n            case null === $default:\n                $text = \\sprintf(' <info>%s</info>:', $text);\n\n                break;\n\n            case $question instanceof ConfirmationQuestion:\n                $text = \\sprintf(' <info>%s (yes/no)</info> [<comment>%s</comment>]:', $text, $default ? 'yes' : 'no');\n\n                break;\n\n            case $question instanceof ChoiceQuestion && $question->isMultiselect():\n                $choices = $question->getChoices();\n                $default = explode(',', $default);\n\n                foreach ($default as $key => $value) {\n                    $default[$key] = $choices[trim($value)];\n                }\n\n                $text = \\sprintf(' <info>%s</info> [<comment>%s</comment>]:', $text, OutputFormatter::escape(implode(', ', $default)));\n\n                break;\n\n            case $question instanceof ChoiceQuestion:\n                $choices = $question->getChoices();\n                $text = \\sprintf(' <info>%s</info> [<comment>%s</comment>]:', $text, OutputFormatter::escape($choices[$default] ?? $default));\n\n                break;\n\n            default:\n                $text = \\sprintf(' <info>%s</info> [<comment>%s</comment>]:', $text, OutputFormatter::escape($default));\n        }\n\n        $output->writeln($text);\n\n        $prompt = ' > ';\n\n        if ($question instanceof ChoiceQuestion) {\n            $output->writeln($this->formatChoiceQuestionChoices($question, 'comment'));\n\n            $prompt = $question->getPrompt();\n        }\n\n        $output->write($prompt);\n    }\n\n    protected function writeError(OutputInterface $output, \\Exception $error): void\n    {\n        if ($output instanceof SymfonyStyle) {\n            $output->newLine();\n            $output->error($error->getMessage());\n\n            return;\n        }\n\n        parent::writeError($output, $error);\n    }\n\n    private function getEofShortcut(): string\n    {\n        if ('Windows' === \\PHP_OS_FAMILY) {\n            return '<comment>Ctrl+Z</comment> then <comment>Enter</comment>';\n        }\n\n        return '<comment>Ctrl+D</comment>';\n    }\n}\n\n\n--- File Index 109: Helper/TableRows.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\n/**\n * @internal\n */\nclass TableRows implements \\IteratorAggregate\n{\n    public function __construct(\n        private \\Closure $generator,\n    ) {\n    }\n\n    public function getIterator(): \\Traversable\n    {\n        return ($this->generator)();\n    }\n}\n\n\n--- File Index 110: Helper/Dumper.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\VarDumper\\Cloner\\ClonerInterface;\nuse Symfony\\Component\\VarDumper\\Cloner\\VarCloner;\nuse Symfony\\Component\\VarDumper\\Dumper\\CliDumper;\n\n/**\n * @author Roland Franssen <franssen.roland@gmail.com>\n */\nfinal class Dumper\n{\n    private \\Closure $handler;\n\n    public function __construct(\n        private OutputInterface $output,\n        private ?CliDumper $dumper = null,\n        private ?ClonerInterface $cloner = null,\n    ) {\n        if (class_exists(CliDumper::class)) {\n            $this->handler = function ($var): string {\n                $dumper = $this->dumper ??= new CliDumper(null, null, CliDumper::DUMP_LIGHT_ARRAY | CliDumper::DUMP_COMMA_SEPARATOR);\n                $dumper->setColors($this->output->isDecorated());\n\n                return rtrim($dumper->dump(($this->cloner ??= new VarCloner())->cloneVar($var)->withRefHandles(false), true));\n            };\n        } else {\n            $this->handler = fn ($var): string => match (true) {\n                null === $var => 'null',\n                true === $var => 'true',\n                false === $var => 'false',\n                \\is_string($var) => '\"'.$var.'\"',\n                default => rtrim(print_r($var, true)),\n            };\n        }\n    }\n\n    public function __invoke(mixed $var): string\n    {\n        return ($this->handler)($var);\n    }\n}\n\n\n--- File Index 111: Helper/OutputWrapper.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\n/**\n * Simple output wrapper for \"tagged outputs\" instead of wordwrap(). This solution is based on a StackOverflow\n * answer: https://stackoverflow.com/a/20434776/1476819 from user557597 (alias SLN).\n *\n *  (?:\n *       # -- Words/Characters\n *       (                       # (1 start)\n *            (?>                     # Atomic Group - Match words with valid breaks\n *                 .{1,16}                 #  1-N characters\n *                                         #  Followed by one of 4 prioritized, non-linebreak whitespace\n *                 (?:                     #  break types:\n *                      (?<= [^\\S\\r\\n] )        # 1. - Behind a non-linebreak whitespace\n *                      [^\\S\\r\\n]?              #      ( optionally accept an extra non-linebreak whitespace )\n *                   |  (?= \\r? \\n )            # 2. - Ahead a linebreak\n *                   |  $                       # 3. - EOS\n *                   |  [^\\S\\r\\n]               # 4. - Accept an extra non-linebreak whitespace\n *                 )\n *            )                       # End atomic group\n *         |\n *            .{1,16}                 # No valid word breaks, just break on the N'th character\n *       )                       # (1 end)\n *       (?: \\r? \\n )?           # Optional linebreak after Words/Characters\n *    |\n *       # -- Or, Linebreak\n *       (?: \\r? \\n | $ )        # Stand alone linebreak or at EOS\n *  )\n *\n * @author Kriszti\u00e1n Ferenczi <ferenczi.krisztian@gmail.com>\n *\n * @see https://stackoverflow.com/a/20434776/1476819\n */\nfinal class OutputWrapper\n{\n    private const TAG_OPEN_REGEX_SEGMENT = '[a-z](?:[^\\\\\\\\<>]*+ | \\\\\\\\.)*';\n    private const TAG_CLOSE_REGEX_SEGMENT = '[a-z][^<>]*+';\n    private const URL_PATTERN = 'https?://\\S+';\n\n    public function __construct(\n        private bool $allowCutUrls = false,\n    ) {\n    }\n\n    public function wrap(string $text, int $width, string $break = \"\\n\"): string\n    {\n        if (!$width) {\n            return $text;\n        }\n\n        $tagPattern = \\sprintf('<(?:(?:%s)|/(?:%s)?)>', self::TAG_OPEN_REGEX_SEGMENT, self::TAG_CLOSE_REGEX_SEGMENT);\n        $limitPattern = \"{1,$width}\";\n        $patternBlocks = [$tagPattern];\n        if (!$this->allowCutUrls) {\n            $patternBlocks[] = self::URL_PATTERN;\n        }\n        $patternBlocks[] = '.';\n        $blocks = implode('|', $patternBlocks);\n        $rowPattern = \"(?:$blocks)$limitPattern\";\n        $pattern = \\sprintf('#(?:((?>(%1$s)((?<=[^\\S\\r\\n])[^\\S\\r\\n]?|(?=\\r?\\n)|$|[^\\S\\r\\n]))|(%1$s))(?:\\r?\\n)?|(?:\\r?\\n|$))#imux', $rowPattern);\n        $output = rtrim(preg_replace($pattern, '\\\\1'.$break, $text), $break);\n\n        return str_replace(' '.$break, $break, $output);\n    }\n}\n\n\n--- File Index 112: Helper/TableStyle.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\n\n/**\n * Defines the styles for a Table.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n * @author \u0421\u0430\u0448\u0430 \u0421\u0442\u0430\u043c\u0435\u043d\u043a\u043e\u0432\u0438\u045b <umpirsky@gmail.com>\n * @author Dany Maillard <danymaillard93b@gmail.com>\n */\nclass TableStyle\n{\n    private string $paddingChar = ' ';\n    private string $horizontalOutsideBorderChar = '-';\n    private string $horizontalInsideBorderChar = '-';\n    private string $verticalOutsideBorderChar = '|';\n    private string $verticalInsideBorderChar = '|';\n    private string $crossingChar = '+';\n    private string $crossingTopRightChar = '+';\n    private string $crossingTopMidChar = '+';\n    private string $crossingTopLeftChar = '+';\n    private string $crossingMidRightChar = '+';\n    private string $crossingBottomRightChar = '+';\n    private string $crossingBottomMidChar = '+';\n    private string $crossingBottomLeftChar = '+';\n    private string $crossingMidLeftChar = '+';\n    private string $crossingTopLeftBottomChar = '+';\n    private string $crossingTopMidBottomChar = '+';\n    private string $crossingTopRightBottomChar = '+';\n    private string $headerTitleFormat = '<fg=black;bg=white;options=bold> %s </>';\n    private string $footerTitleFormat = '<fg=black;bg=white;options=bold> %s </>';\n    private string $cellHeaderFormat = '<info>%s</info>';\n    private string $cellRowFormat = '%s';\n    private string $cellRowContentFormat = ' %s ';\n    private string $borderFormat = '%s';\n    private int $padType = \\STR_PAD_RIGHT;\n\n    /**\n     * Sets padding character, used for cell padding.\n     *\n     * @return $this\n     */\n    public function setPaddingChar(string $paddingChar): static\n    {\n        if (!$paddingChar) {\n            throw new LogicException('The padding char must not be empty.');\n        }\n\n        $this->paddingChar = $paddingChar;\n\n        return $this;\n    }\n\n    /**\n     * Gets padding character, used for cell padding.\n     */\n    public function getPaddingChar(): string\n    {\n        return $this->paddingChar;\n    }\n\n    /**\n     * Sets horizontal border characters.\n     *\n     * <code>\n     * \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n     * 1 ISBN          2 Title                    \u2502 Author           \u2551\n     * \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n     * \u2551 99921-58-10-7 \u2502 Divine Comedy            \u2502 Dante Alighieri  \u2551\n     * \u2551 9971-5-0210-0 \u2502 A Tale of Two Cities     \u2502 Charles Dickens  \u2551\n     * \u2551 960-425-059-0 \u2502 The Lord of the Rings    \u2502 J. R. R. Tolkien \u2551\n     * \u2551 80-902734-1-6 \u2502 And Then There Were None \u2502 Agatha Christie  \u2551\n     * \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n     * </code>\n     *\n     * @return $this\n     */\n    public function setHorizontalBorderChars(string $outside, ?string $inside = null): static\n    {\n        $this->horizontalOutsideBorderChar = $outside;\n        $this->horizontalInsideBorderChar = $inside ?? $outside;\n\n        return $this;\n    }\n\n    /**\n     * Sets vertical border characters.\n     *\n     * <code>\n     * \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n     * \u2551 ISBN          \u2502 Title                    \u2502 Author           \u2551\n     * \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u25501\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n     * \u2551 99921-58-10-7 \u2502 Divine Comedy            \u2502 Dante Alighieri  \u2551\n     * \u2551 9971-5-0210-0 \u2502 A Tale of Two Cities     \u2502 Charles Dickens  \u2551\n     * \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u25002\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562\n     * \u2551 960-425-059-0 \u2502 The Lord of the Rings    \u2502 J. R. R. Tolkien \u2551\n     * \u2551 80-902734-1-6 \u2502 And Then There Were None \u2502 Agatha Christie  \u2551\n     * \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n     * </code>\n     *\n     * @return $this\n     */\n    public function setVerticalBorderChars(string $outside, ?string $inside = null): static\n    {\n        $this->verticalOutsideBorderChar = $outside;\n        $this->verticalInsideBorderChar = $inside ?? $outside;\n\n        return $this;\n    }\n\n    /**\n     * Gets border characters.\n     *\n     * @internal\n     */\n    public function getBorderChars(): array\n    {\n        return [\n            $this->horizontalOutsideBorderChar,\n            $this->verticalOutsideBorderChar,\n            $this->horizontalInsideBorderChar,\n            $this->verticalInsideBorderChar,\n        ];\n    }\n\n    /**\n     * Sets crossing characters.\n     *\n     * Example:\n     * <code>\n     * 1\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25502\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25502\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25503\n     * \u2551 ISBN          \u2502 Title                    \u2502 Author           \u2551\n     * 8'\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25500'\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25500'\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25504'\n     * \u2551 99921-58-10-7 \u2502 Divine Comedy            \u2502 Dante Alighieri  \u2551\n     * \u2551 9971-5-0210-0 \u2502 A Tale of Two Cities     \u2502 Charles Dickens  \u2551\n     * 8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25000\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25000\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25004\n     * \u2551 960-425-059-0 \u2502 The Lord of the Rings    \u2502 J. R. R. Tolkien \u2551\n     * \u2551 80-902734-1-6 \u2502 And Then There Were None \u2502 Agatha Christie  \u2551\n     * 7\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25506\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25506\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25505\n     * </code>\n     *\n     * @param string      $cross          Crossing char (see #0 of example)\n     * @param string      $topLeft        Top left char (see #1 of example)\n     * @param string      $topMid         Top mid char (see #2 of example)\n     * @param string      $topRight       Top right char (see #3 of example)\n     * @param string      $midRight       Mid right char (see #4 of example)\n     * @param string      $bottomRight    Bottom right char (see #5 of example)\n     * @param string      $bottomMid      Bottom mid char (see #6 of example)\n     * @param string      $bottomLeft     Bottom left char (see #7 of example)\n     * @param string      $midLeft        Mid left char (see #8 of example)\n     * @param string|null $topLeftBottom  Top left bottom char (see #8' of example), equals to $midLeft if null\n     * @param string|null $topMidBottom   Top mid bottom char (see #0' of example), equals to $cross if null\n     * @param string|null $topRightBottom Top right bottom char (see #4' of example), equals to $midRight if null\n     *\n     * @return $this\n     */\n    public function setCrossingChars(string $cross, string $topLeft, string $topMid, string $topRight, string $midRight, string $bottomRight, string $bottomMid, string $bottomLeft, string $midLeft, ?string $topLeftBottom = null, ?string $topMidBottom = null, ?string $topRightBottom = null): static\n    {\n        $this->crossingChar = $cross;\n        $this->crossingTopLeftChar = $topLeft;\n        $this->crossingTopMidChar = $topMid;\n        $this->crossingTopRightChar = $topRight;\n        $this->crossingMidRightChar = $midRight;\n        $this->crossingBottomRightChar = $bottomRight;\n        $this->crossingBottomMidChar = $bottomMid;\n        $this->crossingBottomLeftChar = $bottomLeft;\n        $this->crossingMidLeftChar = $midLeft;\n        $this->crossingTopLeftBottomChar = $topLeftBottom ?? $midLeft;\n        $this->crossingTopMidBottomChar = $topMidBottom ?? $cross;\n        $this->crossingTopRightBottomChar = $topRightBottom ?? $midRight;\n\n        return $this;\n    }\n\n    /**\n     * Sets default crossing character used for each cross.\n     *\n     * @see {@link setCrossingChars()} for setting each crossing individually.\n     */\n    public function setDefaultCrossingChar(string $char): self\n    {\n        return $this->setCrossingChars($char, $char, $char, $char, $char, $char, $char, $char, $char);\n    }\n\n    /**\n     * Gets crossing character.\n     */\n    public function getCrossingChar(): string\n    {\n        return $this->crossingChar;\n    }\n\n    /**\n     * Gets crossing characters.\n     *\n     * @internal\n     */\n    public function getCrossingChars(): array\n    {\n        return [\n            $this->crossingChar,\n            $this->crossingTopLeftChar,\n            $this->crossingTopMidChar,\n            $this->crossingTopRightChar,\n            $this->crossingMidRightChar,\n            $this->crossingBottomRightChar,\n            $this->crossingBottomMidChar,\n            $this->crossingBottomLeftChar,\n            $this->crossingMidLeftChar,\n            $this->crossingTopLeftBottomChar,\n            $this->crossingTopMidBottomChar,\n            $this->crossingTopRightBottomChar,\n        ];\n    }\n\n    /**\n     * Sets header cell format.\n     *\n     * @return $this\n     */\n    public function setCellHeaderFormat(string $cellHeaderFormat): static\n    {\n        $this->cellHeaderFormat = $cellHeaderFormat;\n\n        return $this;\n    }\n\n    /**\n     * Gets header cell format.\n     */\n    public function getCellHeaderFormat(): string\n    {\n        return $this->cellHeaderFormat;\n    }\n\n    /**\n     * Sets row cell format.\n     *\n     * @return $this\n     */\n    public function setCellRowFormat(string $cellRowFormat): static\n    {\n        $this->cellRowFormat = $cellRowFormat;\n\n        return $this;\n    }\n\n    /**\n     * Gets row cell format.\n     */\n    public function getCellRowFormat(): string\n    {\n        return $this->cellRowFormat;\n    }\n\n    /**\n     * Sets row cell content format.\n     *\n     * @return $this\n     */\n    public function setCellRowContentFormat(string $cellRowContentFormat): static\n    {\n        $this->cellRowContentFormat = $cellRowContentFormat;\n\n        return $this;\n    }\n\n    /**\n     * Gets row cell content format.\n     */\n    public function getCellRowContentFormat(): string\n    {\n        return $this->cellRowContentFormat;\n    }\n\n    /**\n     * Sets table border format.\n     *\n     * @return $this\n     */\n    public function setBorderFormat(string $borderFormat): static\n    {\n        $this->borderFormat = $borderFormat;\n\n        return $this;\n    }\n\n    /**\n     * Gets table border format.\n     */\n    public function getBorderFormat(): string\n    {\n        return $this->borderFormat;\n    }\n\n    /**\n     * Sets cell padding type.\n     *\n     * @return $this\n     */\n    public function setPadType(int $padType): static\n    {\n        if (!\\in_array($padType, [\\STR_PAD_LEFT, \\STR_PAD_RIGHT, \\STR_PAD_BOTH], true)) {\n            throw new InvalidArgumentException('Invalid padding type. Expected one of (STR_PAD_LEFT, STR_PAD_RIGHT, STR_PAD_BOTH).');\n        }\n\n        $this->padType = $padType;\n\n        return $this;\n    }\n\n    /**\n     * Gets cell padding type.\n     */\n    public function getPadType(): int\n    {\n        return $this->padType;\n    }\n\n    public function getHeaderTitleFormat(): string\n    {\n        return $this->headerTitleFormat;\n    }\n\n    /**\n     * @return $this\n     */\n    public function setHeaderTitleFormat(string $format): static\n    {\n        $this->headerTitleFormat = $format;\n\n        return $this;\n    }\n\n    public function getFooterTitleFormat(): string\n    {\n        return $this->footerTitleFormat;\n    }\n\n    /**\n     * @return $this\n     */\n    public function setFooterTitleFormat(string $format): static\n    {\n        $this->footerTitleFormat = $format;\n\n        return $this;\n    }\n}\n\n\n--- File Index 113: Event/ConsoleSignalEvent.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * @author marie <marie@users.noreply.github.com>\n */\nfinal class ConsoleSignalEvent extends ConsoleEvent\n{\n    public function __construct(\n        Command $command,\n        InputInterface $input,\n        OutputInterface $output,\n        private int $handlingSignal,\n        private int|false $exitCode = 0,\n    ) {\n        parent::__construct($command, $input, $output);\n    }\n\n    public function getHandlingSignal(): int\n    {\n        return $this->handlingSignal;\n    }\n\n    public function setExitCode(int $exitCode): void\n    {\n        if ($exitCode < 0 || $exitCode > 255) {\n            throw new \\InvalidArgumentException('Exit code must be between 0 and 255.');\n        }\n\n        $this->exitCode = $exitCode;\n    }\n\n    public function abortExit(): void\n    {\n        $this->exitCode = false;\n    }\n\n    public function getExitCode(): int|false\n    {\n        return $this->exitCode;\n    }\n}\n\n\n--- File Index 114: Event/ConsoleEvent.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\n/**\n * Allows to inspect input and output of a command.\n *\n * @author Francesco Levorato <git@flevour.net>\n */\nclass ConsoleEvent extends Event\n{\n    public function __construct(\n        protected ?Command $command,\n        private InputInterface $input,\n        private OutputInterface $output,\n    ) {\n    }\n\n    /**\n     * Gets the command that is executed.\n     */\n    public function getCommand(): ?Command\n    {\n        return $this->command;\n    }\n\n    /**\n     * Gets the input instance.\n     */\n    public function getInput(): InputInterface\n    {\n        return $this->input;\n    }\n\n    /**\n     * Gets the output instance.\n     */\n    public function getOutput(): OutputInterface\n    {\n        return $this->output;\n    }\n}\n\n\n--- File Index 115: Event/ConsoleErrorEvent.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Allows to handle throwables thrown while running a command.\n *\n * @author Wouter de Jong <wouter@wouterj.nl>\n */\nfinal class ConsoleErrorEvent extends ConsoleEvent\n{\n    private int $exitCode;\n\n    public function __construct(\n        InputInterface $input,\n        OutputInterface $output,\n        private \\Throwable $error,\n        ?Command $command = null,\n    ) {\n        parent::__construct($command, $input, $output);\n    }\n\n    public function getError(): \\Throwable\n    {\n        return $this->error;\n    }\n\n    public function setError(\\Throwable $error): void\n    {\n        $this->error = $error;\n    }\n\n    public function setExitCode(int $exitCode): void\n    {\n        $this->exitCode = $exitCode;\n\n        $r = new \\ReflectionProperty($this->error, 'code');\n        $r->setValue($this->error, $this->exitCode);\n    }\n\n    public function getExitCode(): int\n    {\n        return $this->exitCode ?? (\\is_int($this->error->getCode()) && 0 !== $this->error->getCode() ? $this->error->getCode() : 1);\n    }\n}\n\n\n--- File Index 116: Event/ConsoleAlarmEvent.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nfinal class ConsoleAlarmEvent extends ConsoleEvent\n{\n    public function __construct(\n        Command $command,\n        InputInterface $input,\n        OutputInterface $output,\n        private int|false $exitCode = 0,\n    ) {\n        parent::__construct($command, $input, $output);\n    }\n\n    public function setExitCode(int $exitCode): void\n    {\n        if ($exitCode < 0 || $exitCode > 255) {\n            throw new \\InvalidArgumentException('Exit code must be between 0 and 255.');\n        }\n\n        $this->exitCode = $exitCode;\n    }\n\n    public function abortExit(): void\n    {\n        $this->exitCode = false;\n    }\n\n    public function getExitCode(): int|false\n    {\n        return $this->exitCode;\n    }\n}\n\n\n--- File Index 117: Event/ConsoleTerminateEvent.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Allows to manipulate the exit code of a command after its execution.\n *\n * @author Francesco Levorato <git@flevour.net>\n * @author Jules Pietri <jules@heahprod.com>\n */\nfinal class ConsoleTerminateEvent extends ConsoleEvent\n{\n    public function __construct(\n        Command $command,\n        InputInterface $input,\n        OutputInterface $output,\n        private int $exitCode,\n        private readonly ?int $interruptingSignal = null,\n    ) {\n        parent::__construct($command, $input, $output);\n    }\n\n    public function setExitCode(int $exitCode): void\n    {\n        $this->exitCode = $exitCode;\n    }\n\n    public function getExitCode(): int\n    {\n        return $this->exitCode;\n    }\n\n    public function getInterruptingSignal(): ?int\n    {\n        return $this->interruptingSignal;\n    }\n}\n\n\n--- File Index 118: Event/ConsoleCommandEvent.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Event;\n\n/**\n * Allows to do things before the command is executed, like skipping the command or executing code before the command is\n * going to be executed.\n *\n * Changing the input arguments will have no effect.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nfinal class ConsoleCommandEvent extends ConsoleEvent\n{\n    /**\n     * The return code for skipped commands, this will also be passed into the terminate event.\n     */\n    public const RETURN_CODE_DISABLED = 113;\n\n    /**\n     * Indicates if the command should be run or skipped.\n     */\n    private bool $commandShouldRun = true;\n\n    /**\n     * Disables the command, so it won't be run.\n     */\n    public function disableCommand(): bool\n    {\n        return $this->commandShouldRun = false;\n    }\n\n    public function enableCommand(): bool\n    {\n        return $this->commandShouldRun = true;\n    }\n\n    /**\n     * Returns true if the command is runnable, false otherwise.\n     */\n    public function commandShouldRun(): bool\n    {\n        return $this->commandShouldRun;\n    }\n}\n\n\n\n\nAnalyze the codebase context.\nIdentify the top 5-10 core most important abstractions to help those new to the codebase.\n\nFor each abstraction, provide:\n1. A concise `name`.\n2. A beginner-friendly `description` explaining what it is with a simple analogy, in around 100 words.\n3. A list of relevant `file_indices` (integers) using the format `idx # path/comment`.\n\nList of file indices and paths present in the context:\n- 0 # Color.php\n- 1 # ConsoleEvents.php\n- 2 # Cursor.php\n- 3 # Application.php\n- 4 # SingleCommandApplication.php\n- 5 # Terminal.php\n- 6 # Question/ChoiceQuestion.php\n- 7 # Question/ConfirmationQuestion.php\n- 8 # Question/Question.php\n- 9 # Exception/RuntimeException.php\n- 10 # Exception/RunCommandFailedException.php\n- 11 # Exception/CommandNotFoundException.php\n- 12 # Exception/InvalidArgumentException.php\n- 13 # Exception/InvalidOptionException.php\n- 14 # Exception/LogicException.php\n- 15 # Exception/NamespaceNotFoundException.php\n- 16 # Exception/ExceptionInterface.php\n- 17 # Exception/MissingInputException.php\n- 18 # Logger/ConsoleLogger.php\n- 19 # Descriptor/TextDescriptor.php\n- 20 # Descriptor/ApplicationDescription.php\n- 21 # Descriptor/MarkdownDescriptor.php\n- 22 # Descriptor/ReStructuredTextDescriptor.php\n- 23 # Descriptor/XmlDescriptor.php\n- 24 # Descriptor/Descriptor.php\n- 25 # Descriptor/JsonDescriptor.php\n- 26 # Descriptor/DescriptorInterface.php\n- 27 # CommandLoader/ContainerCommandLoader.php\n- 28 # CommandLoader/CommandLoaderInterface.php\n- 29 # CommandLoader/FactoryCommandLoader.php\n- 30 # Completion/CompletionInput.php\n- 31 # Completion/CompletionSuggestions.php\n- 32 # Completion/Suggestion.php\n- 33 # Completion/Output/FishCompletionOutput.php\n- 34 # Completion/Output/CompletionOutputInterface.php\n- 35 # Completion/Output/BashCompletionOutput.php\n- 36 # Completion/Output/ZshCompletionOutput.php\n- 37 # CI/GithubActionReporter.php\n- 38 # EventListener/ErrorListener.php\n- 39 # DataCollector/CommandDataCollector.php\n- 40 # Output/ConsoleSectionOutput.php\n- 41 # Output/ConsoleOutput.php\n- 42 # Output/AnsiColorMode.php\n- 43 # Output/OutputInterface.php\n- 44 # Output/ConsoleOutputInterface.php\n- 45 # Output/StreamOutput.php\n- 46 # Output/TrimmedBufferOutput.php\n- 47 # Output/NullOutput.php\n- 48 # Output/BufferedOutput.php\n- 49 # Output/Output.php\n- 50 # Debug/CliRequest.php\n- 51 # Attribute/AsCommand.php\n- 52 # Formatter/NullOutputFormatterStyle.php\n- 53 # Formatter/OutputFormatterInterface.php\n- 54 # Formatter/OutputFormatter.php\n- 55 # Formatter/WrappableOutputFormatterInterface.php\n- 56 # Formatter/OutputFormatterStyleStack.php\n- 57 # Formatter/OutputFormatterStyleInterface.php\n- 58 # Formatter/NullOutputFormatter.php\n- 59 # Formatter/OutputFormatterStyle.php\n- 60 # DependencyInjection/AddConsoleCommandPass.php\n- 61 # Input/InputOption.php\n- 62 # Input/ArgvInput.php\n- 63 # Input/InputDefinition.php\n- 64 # Input/Input.php\n- 65 # Input/StringInput.php\n- 66 # Input/InputAwareInterface.php\n- 67 # Input/StreamableInputInterface.php\n- 68 # Input/InputArgument.php\n- 69 # Input/InputInterface.php\n- 70 # Input/ArrayInput.php\n- 71 # SignalRegistry/SignalMap.php\n- 72 # SignalRegistry/SignalRegistry.php\n- 73 # Command/LockableTrait.php\n- 74 # Command/HelpCommand.php\n- 75 # Command/Command.php\n- 76 # Command/LazyCommand.php\n- 77 # Command/SignalableCommandInterface.php\n- 78 # Command/DumpCompletionCommand.php\n- 79 # Command/ListCommand.php\n- 80 # Command/CompleteCommand.php\n- 81 # Command/TraceableCommand.php\n- 82 # Tester/ApplicationTester.php\n- 83 # Tester/CommandCompletionTester.php\n- 84 # Tester/CommandTester.php\n- 85 # Tester/TesterTrait.php\n- 86 # Tester/Constraint/CommandIsSuccessful.php\n- 87 # Messenger/RunCommandMessage.php\n- 88 # Messenger/RunCommandMessageHandler.php\n- 89 # Messenger/RunCommandContext.php\n- 90 # Style/OutputStyle.php\n- 91 # Style/SymfonyStyle.php\n- 92 # Style/StyleInterface.php\n- 93 # Helper/InputAwareHelper.php\n- 94 # Helper/HelperSet.php\n- 95 # Helper/TableSeparator.php\n- 96 # Helper/HelperInterface.php\n- 97 # Helper/TableCellStyle.php\n- 98 # Helper/Table.php\n- 99 # Helper/DescriptorHelper.php\n- 100 # Helper/FormatterHelper.php\n- 101 # Helper/ProcessHelper.php\n- 102 # Helper/TableCell.php\n- 103 # Helper/QuestionHelper.php\n- 104 # Helper/Helper.php\n- 105 # Helper/ProgressBar.php\n- 106 # Helper/DebugFormatterHelper.php\n- 107 # Helper/ProgressIndicator.php\n- 108 # Helper/SymfonyQuestionHelper.php\n- 109 # Helper/TableRows.php\n- 110 # Helper/Dumper.php\n- 111 # Helper/OutputWrapper.php\n- 112 # Helper/TableStyle.php\n- 113 # Event/ConsoleSignalEvent.php\n- 114 # Event/ConsoleEvent.php\n- 115 # Event/ConsoleErrorEvent.php\n- 116 # Event/ConsoleAlarmEvent.php\n- 117 # Event/ConsoleTerminateEvent.php\n- 118 # Event/ConsoleCommandEvent.php\n\nFormat the output as a YAML list of dictionaries:\n\n```yaml\n- name: |\n    Query Processing\n  description: |\n    Explains what the abstraction does.\n    It's like a central dispatcher routing requests.\n  file_indices:\n    - 0 # path/to/file1.py\n    - 3 # path/to/related.py\n- name: |\n    Query Optimization\n  description: |\n    Another core concept, similar to a blueprint for objects.\n  file_indices:\n    - 5 # path/to/another.js\n# ... up to 10 abstractions\n```": "```yaml\n- name: |\n    Command Execution Flow\n  description: |\n    This abstraction handles the lifecycle of executing commands in a structured manner. It's like orchestrating a symphony where each command is a musician playing their part, and events are the conductors directing the execution flow.\n  file_indices:\n    - 1 # ConsoleEvents.php\n    - 3 # Application.php\n    - 4 # SingleCommandApplication.php\n    - 115 # Event/ConsoleErrorEvent.php\n    - 116 # Event/ConsoleAlarmEvent.php\n\n- name: |\n    Input Handling and Validation\n  description: |\n    This abstraction manages the input provided to commands, ensuring it's valid before execution. It\u2019s like a gatekeeper at an event, checking IDs and only allowing entry if they meet specific criteria.\n  file_indices:\n    - 6 # Question/ChoiceQuestion.php\n    - 7 # Question/ConfirmationQuestion.php\n    - 8 # Question/Question.php\n    - 12 # Exception/InvalidArgumentException.php\n    - 13 # Exception/InvalidOptionException.php\n\n- name: |\n    Output and Formatting\n  description: |\n    This abstraction controls how information is displayed to the user, ensuring it\u2019s formatted correctly. It's like a chef preparing food for a banquet, making sure each dish is presented beautifully.\n  file_indices:\n    - 40 # Output/ConsoleSectionOutput.php\n    - 42 # Output/AnsiColorMode.php\n    - 53 # Formatter/OutputFormatterInterface.php\n    - 108 # Helper/SymfonyQuestionHelper.php\n    - 112 # Helper/TableStyle.php\n\n- name: |\n    Event Handling and Dispatching\n  description: |\n    This abstraction manages the dispatch of events throughout the application, similar to how traffic signals control the flow of vehicles on a road. It ensures that appropriate actions are taken based on specific events.\n  file_indices:\n    - 114 # Event/ConsoleEvent.php\n    - 115 # Event/ConsoleErrorEvent.php\n    - 116 # Event/ConsoleAlarmEvent.php\n    - 117 # Event/ConsoleTerminateEvent.php\n\n- name: |\n    Signal Handling\n  description: |\n    This abstraction manages signals that can be received during command execution, acting as a listener for external events. It's like a security guard watching for alarms and taking appropriate actions.\n  file_indices:\n    - 113 # Event/ConsoleSignalEvent.php\n    - 59 # Formatter/OutputFormatterStyle.php\n    - 60 # DependencyInjection/AddConsoleCommandPass.php\n\n- name: |\n    Command Discovery and Loading\n  description: |\n    This abstraction is responsible for discovering and loading commands, similar to how a library catalog finds books. It ensures that all available commands are known and can be executed.\n  file_indices:\n    - 27 # CommandLoader/ContainerCommandLoader.php\n    - 29 # CommandLoader/FactoryCommandLoader.php\n    - 104 # Helper/Helper.php\n\n- name: |\n    Input Definition and Validation\n  description: |\n    This abstraction defines how input should be structured and validates it to ensure commands are executed with the correct parameters. It\u2019s like defining rules for a game and checking that players follow them.\n  file_indices:\n    - 61 # Input/InputOption.php\n    - 62 # Input/ArgvInput.php\n    - 63 # Input/InputDefinition.php\n\n- name: |\n    Logging and Debugging\n  description: |\n    This abstraction provides mechanisms for logging and debugging, similar to how a detective collects evidence. It helps in tracing the flow of execution and identifying issues.\n  file_indices:\n    - 18 # Logger/ConsoleLogger.php\n\n- name: |\n    Command Testing\n  description: |\n    This abstraction facilitates testing commands by providing test classes and methods. It\u2019s like having a practice room where developers can test their musical compositions before performing them in public.\n  file_indices:\n    - 82 # Tester/ApplicationTester.php\n    - 83 # Tester/CommandCompletionTester.php\n\n- name: |\n    Output Wrapping\n  description: |\n    This abstraction handles the wrapping of text to ensure it fits within terminal width, similar to how a tailor measures and adjusts clothing for different body types. It ensures that output is neatly formatted.\n  file_indices:\n    - 109 # Helper/TableRows.php\n    - 111 # Helper/OutputWrapper.php\n```",
    "\nBased on the following abstractions and relevant code snippets from the project `console`:\n\nList of Abstraction Indices and Names:\n0 # Command Execution Flow\n\n1 # Input Handling and Validation\n\n2 # Output and Formatting\n\n3 # Event Handling and Dispatching\n\n4 # Signal Handling\n\n5 # Command Discovery and Loading\n\n6 # Input Definition and Validation\n\n7 # Logging and Debugging\n\n8 # Command Testing\n\n9 # Output Wrapping\n\n\nContext (Abstractions, Descriptions, Code):\nIdentified Abstractions:\n- Index 0: Command Execution Flow\n (Relevant file indices: [1, 3, 4, 115, 116])\n  Description: This abstraction handles the lifecycle of executing commands in a structured manner. It's like orchestrating a symphony where each command is a musician playing their part, and events are the conductors directing the execution flow.\n\n- Index 1: Input Handling and Validation\n (Relevant file indices: [6, 7, 8, 12, 13])\n  Description: This abstraction manages the input provided to commands, ensuring it's valid before execution. It\u2019s like a gatekeeper at an event, checking IDs and only allowing entry if they meet specific criteria.\n\n- Index 2: Output and Formatting\n (Relevant file indices: [40, 42, 53, 108, 112])\n  Description: This abstraction controls how information is displayed to the user, ensuring it\u2019s formatted correctly. It's like a chef preparing food for a banquet, making sure each dish is presented beautifully.\n\n- Index 3: Event Handling and Dispatching\n (Relevant file indices: [114, 115, 116, 117])\n  Description: This abstraction manages the dispatch of events throughout the application, similar to how traffic signals control the flow of vehicles on a road. It ensures that appropriate actions are taken based on specific events.\n\n- Index 4: Signal Handling\n (Relevant file indices: [59, 60, 113])\n  Description: This abstraction manages signals that can be received during command execution, acting as a listener for external events. It's like a security guard watching for alarms and taking appropriate actions.\n\n- Index 5: Command Discovery and Loading\n (Relevant file indices: [27, 29, 104])\n  Description: This abstraction is responsible for discovering and loading commands, similar to how a library catalog finds books. It ensures that all available commands are known and can be executed.\n\n- Index 6: Input Definition and Validation\n (Relevant file indices: [61, 62, 63])\n  Description: This abstraction defines how input should be structured and validates it to ensure commands are executed with the correct parameters. It\u2019s like defining rules for a game and checking that players follow them.\n\n- Index 7: Logging and Debugging\n (Relevant file indices: [18])\n  Description: This abstraction provides mechanisms for logging and debugging, similar to how a detective collects evidence. It helps in tracing the flow of execution and identifying issues.\n\n- Index 8: Command Testing\n (Relevant file indices: [82, 83])\n  Description: This abstraction facilitates testing commands by providing test classes and methods. It\u2019s like having a practice room where developers can test their musical compositions before performing them in public.\n\n- Index 9: Output Wrapping\n (Relevant file indices: [109, 111])\n  Description: This abstraction handles the wrapping of text to ensure it fits within terminal width, similar to how a tailor measures and adjusts clothing for different body types. It ensures that output is neatly formatted.\n\n\nRelevant File Snippets (Referenced by Index and Path):\n--- File: 1 # ConsoleEvents.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console;\n\nuse Symfony\\Component\\Console\\Event\\ConsoleCommandEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleErrorEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleSignalEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent;\n\n/**\n * Contains all events dispatched by an Application.\n *\n * @author Francesco Levorato <git@flevour.net>\n */\nfinal class ConsoleEvents\n{\n    /**\n     * The COMMAND event allows you to attach listeners before any command is\n     * executed by the console. It also allows you to modify the command, input and output\n     * before they are handed to the command.\n     *\n     * @Event(\"Symfony\\Component\\Console\\Event\\ConsoleCommandEvent\")\n     */\n    public const COMMAND = 'console.command';\n\n    /**\n     * The SIGNAL event allows you to perform some actions\n     * after the command execution was interrupted.\n     *\n     * @Event(\"Symfony\\Component\\Console\\Event\\ConsoleSignalEvent\")\n     */\n    public const SIGNAL = 'console.signal';\n\n    /**\n     * The TERMINATE event allows you to attach listeners after a command is\n     * executed by the console.\n     *\n     * @Event(\"Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent\")\n     */\n    public const TERMINATE = 'console.terminate';\n\n    /**\n     * The ERROR event occurs when an uncaught exception or error appears.\n     *\n     * This event allows you to deal with the exception/error or\n     * to modify the thrown exception.\n     *\n     * @Event(\"Symfony\\Component\\Console\\Event\\ConsoleErrorEvent\")\n     */\n    public const ERROR = 'console.error';\n\n    /**\n     * Event aliases.\n     *\n     * These aliases can be consumed by RegisterListenersPass.\n     */\n    public const ALIASES = [\n        ConsoleCommandEvent::class => self::COMMAND,\n        ConsoleErrorEvent::class => self::ERROR,\n        ConsoleSignalEvent::class => self::SIGNAL,\n        ConsoleTerminateEvent::class => self::TERMINATE,\n    ];\n}\n\n\n--- File: 3 # Application.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Command\\CompleteCommand;\nuse Symfony\\Component\\Console\\Command\\DumpCompletionCommand;\nuse Symfony\\Component\\Console\\Command\\HelpCommand;\nuse Symfony\\Component\\Console\\Command\\LazyCommand;\nuse Symfony\\Component\\Console\\Command\\ListCommand;\nuse Symfony\\Component\\Console\\Command\\SignalableCommandInterface;\nuse Symfony\\Component\\Console\\CommandLoader\\CommandLoaderInterface;\nuse Symfony\\Component\\Console\\Completion\\CompletionInput;\nuse Symfony\\Component\\Console\\Completion\\CompletionSuggestions;\nuse Symfony\\Component\\Console\\Completion\\Suggestion;\nuse Symfony\\Component\\Console\\Event\\ConsoleAlarmEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleCommandEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleErrorEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleSignalEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent;\nuse Symfony\\Component\\Console\\Exception\\CommandNotFoundException;\nuse Symfony\\Component\\Console\\Exception\\ExceptionInterface;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\nuse Symfony\\Component\\Console\\Exception\\NamespaceNotFoundException;\nuse Symfony\\Component\\Console\\Exception\\RuntimeException;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatter;\nuse Symfony\\Component\\Console\\Helper\\DebugFormatterHelper;\nuse Symfony\\Component\\Console\\Helper\\DescriptorHelper;\nuse Symfony\\Component\\Console\\Helper\\FormatterHelper;\nuse Symfony\\Component\\Console\\Helper\\Helper;\nuse Symfony\\Component\\Console\\Helper\\HelperSet;\nuse Symfony\\Component\\Console\\Helper\\ProcessHelper;\nuse Symfony\\Component\\Console\\Helper\\QuestionHelper;\nuse Symfony\\Component\\Console\\Input\\ArgvInput;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputAwareInterface;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutput;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\SignalRegistry\\SignalRegistry;\nuse Symfony\\Component\\Console\\Style\\SymfonyStyle;\nuse Symfony\\Component\\ErrorHandler\\ErrorHandler;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Contracts\\Service\\ResetInterface;\n\n/**\n * An Application is the container for a collection of commands.\n *\n * It is the main entry point of a Console application.\n *\n * This class is optimized for a standard CLI environment.\n *\n * Usage:\n *\n *     $app = new Application('myapp', '1.0 (stable)');\n *     $app->add(new SimpleCommand());\n *     $app->run();\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass Application implements ResetInterface\n{\n    private array $commands = [];\n    private bool $wantHelps = false;\n    private ?Command $runningCommand = null;\n    private ?CommandLoaderInterface $commandLoader = null;\n    private bool $catchExceptions = true;\n    private bool $catchErrors = false;\n    private bool $autoExit = true;\n    private InputDefinition $definition;\n    private HelperSet $helperSet;\n    private ?EventDispatcherInterface $dispatcher = null;\n    private Terminal $terminal;\n    private string $defaultCommand;\n    private bool $singleCommand = false;\n    private bool $initialized = false;\n    private ?SignalRegistry $signalRegistry = null;\n    private array $signalsToDispatchEvent = [];\n    private ?int $alarmInterval = null;\n\n    public function __construct(\n        private string $name = 'UNKNOWN',\n        private string $version = 'UNKNOWN',\n    ) {\n        $this->terminal = new Terminal();\n        $this->defaultCommand = 'list';\n        if (\\defined('SIGINT') && SignalRegistry::isSupported()) {\n            $this->signalRegistry = new SignalRegistry();\n            $this->signalsToDispatchEvent = [\\SIGINT, \\SIGQUIT, \\SIGTERM, \\SIGUSR1, \\SIGUSR2, \\SIGALRM];\n        }\n    }\n\n    /**\n     * @final\n     */\n    public function setDispatcher(EventDispatcherInterface $dispatcher): void\n    {\n        $this->dispatcher = $dispatcher;\n    }\n\n    public function setCommandLoader(CommandLoaderInterface $commandLoader): void\n    {\n        $this->commandLoader = $commandLoader;\n    }\n\n    public function getSignalRegistry(): SignalRegistry\n    {\n        if (!$this->signalRegistry) {\n            throw new RuntimeException('Signals are not supported. Make sure that the \"pcntl\" extension is installed and that \"pcntl_*\" functions are not disabled by your php.ini\\'s \"disable_functions\" directive.');\n        }\n\n        return $this->signalRegistry;\n    }\n\n    public function setSignalsToDispatchEvent(int ...$signalsToDispatchEvent): void\n    {\n        $this->signalsToDispatchEvent = $signalsToDispatchEvent;\n    }\n\n    /**\n     * Sets the interval to schedule a SIGALRM signal in seconds.\n     */\n    public function setAlarmInterval(?int $seconds): void\n    {\n        $this->alarmInterval = $seconds;\n        $this->scheduleAlarm();\n    }\n\n    /**\n     * Gets the interval in seconds on which a SIGALRM signal is dispatched.\n     */\n    public function getAlarmInterval(): ?int\n    {\n        return $this->alarmInterval;\n    }\n\n    private function scheduleAlarm(): void\n    {\n        if (null !== $this->alarmInterval) {\n            $this->getSignalRegistry()->scheduleAlarm($this->alarmInterval);\n        }\n    }\n\n    /**\n     * Runs the current application.\n     *\n     * @return int 0 if everything went fine, or an error code\n     *\n     * @throws \\Exception When running fails. Bypass this when {@link setCatchExceptions()}.\n     */\n    public function run(?InputInterface $input = null, ?OutputInterface $output = null): int\n    {\n        if (\\function_exists('putenv')) {\n            @putenv('LINES='.$this->terminal->getHeight());\n            @putenv('COLUMNS='.$this->terminal->getWidth());\n        }\n\n        $input ??= new ArgvInput();\n        $output ??= new ConsoleOutput();\n\n        $renderException = function (\\Throwable $e) use ($output) {\n            if ($output instanceof ConsoleOutputInterface) {\n                $this->renderThrowable($e, $output->getErrorOutput());\n            } else {\n                $this->renderThrowable($e, $output);\n            }\n        };\n        if ($phpHandler = set_exception_handler($renderException)) {\n            restore_exception_handler();\n            if (!\\is_array($phpHandler) || !$phpHandler[0] instanceof ErrorHandler) {\n                $errorHandler = true;\n            } elseif ($errorHandler = $phpHandler[0]->setExceptionHandler($renderException)) {\n                $phpHandler[0]->setExceptionHandler($errorHandler);\n            }\n        }\n\n        try {\n            $this->configureIO($input, $output);\n\n            $exitCode = $this->doRun($input, $output);\n        } catch (\\Throwable $e) {\n            if ($e instanceof \\Exception && !$this->catchExceptions) {\n                throw $e;\n            }\n            if (!$e instanceof \\Exception && !$this->catchErrors) {\n                throw $e;\n            }\n\n            $renderException($e);\n\n            $exitCode = $e->getCode();\n            if (is_numeric($exitCode)) {\n                $exitCode = (int) $exitCode;\n                if ($exitCode <= 0) {\n                    $exitCode = 1;\n                }\n            } else {\n                $exitCode = 1;\n            }\n        } finally {\n            // if the exception handler changed, keep it\n            // otherwise, unregister $renderException\n            if (!$phpHandler) {\n                if (set_exception_handler($renderException) === $renderException) {\n                    restore_exception_handler();\n                }\n                restore_exception_handler();\n            } elseif (!$errorHandler) {\n                $finalHandler = $phpHandler[0]->setExceptionHandler(null);\n                if ($finalHandler !== $renderException) {\n                    $phpHandler[0]->setExceptionHandler($finalHandler);\n                }\n            }\n        }\n\n        if ($this->autoExit) {\n            if ($exitCode > 255) {\n                $exitCode = 255;\n            }\n\n            exit($exitCode);\n        }\n\n        return $exitCode;\n    }\n\n    /**\n     * Runs the current application.\n     *\n     * @return int 0 if everything went fine, or an error code\n     */\n    public function doRun(InputInterface $input, OutputInterface $output): int\n    {\n        if (true === $input->hasParameterOption(['--version', '-V'], true)) {\n            $output->writeln($this->getLongVersion());\n\n            return 0;\n        }\n\n        try {\n            // Makes ArgvInput::getFirstArgument() able to distinguish an option from an argument.\n            $input->bind($this->getDefinition());\n        } catch (ExceptionInterface) {\n            // Errors must be ignored, full binding/validation happens later when the command is known.\n        }\n\n        $name = $this->getCommandName($input);\n        if (true === $input->hasParameterOption(['--help', '-h'], true)) {\n            if (!$name) {\n                $name = 'help';\n                $input = new ArrayInput(['command_name' => $this->defaultCommand]);\n            } else {\n                $this->wantHelps = true;\n            }\n        }\n\n        if (!$name) {\n            $name = $this->defaultCommand;\n            $definition = $this->getDefinition();\n            $definition->setArguments(array_merge(\n                $definition->getArguments(),\n                [\n                    'command' => new InputArgument('command', InputArgument::OPTIONAL, $definition->getArgument('command')->getDescription(), $name),\n                ]\n            ));\n        }\n\n        try {\n            $this->runningCommand = null;\n            // the command name MUST be the first element of the input\n            $command = $this->find($name);\n        } catch (\\Throwable $e) {\n            if (($e instanceof CommandNotFoundException && !$e instanceof NamespaceNotFoundException) && 1 === \\count($alternatives = $e->getAlternatives()) && $input->isInteractive()) {\n                $alternative = $alternatives[0];\n\n                $style = new SymfonyStyle($input, $output);\n                $output->writeln('');\n                $formattedBlock = (new FormatterHelper())->formatBlock(\\sprintf('Command \"%s\" is not defined.', $name), 'error', true);\n                $output->writeln($formattedBlock);\n                if (!$style->confirm(\\sprintf('Do you want to run \"%s\" instead? ', $alternative), false)) {\n                    if (null !== $this->dispatcher) {\n                        $event = new ConsoleErrorEvent($input, $output, $e);\n                        $this->dispatcher->dispatch($event, ConsoleEvents::ERROR);\n\n                        return $event->getExitCode();\n                    }\n\n                    return 1;\n                }\n\n                $command = $this->find($alternative);\n            } else {\n                if (null !== $this->dispatcher) {\n                    $event = new ConsoleErrorEvent($input, $output, $e);\n                    $this->dispatcher->dispatch($event, ConsoleEvents::ERROR);\n\n                    if (0 === $event->getExitCode()) {\n                        return 0;\n                    }\n\n                    $e = $event->getError();\n                }\n\n                try {\n                    if ($e instanceof CommandNotFoundException && $namespace = $this->findNamespace($name)) {\n                        $helper = new DescriptorHelper();\n                        $helper->describe($output instanceof ConsoleOutputInterface ? $output->getErrorOutput() : $output, $this, [\n                            'format' => 'txt',\n                            'raw_text' => false,\n                            'namespace' => $namespace,\n                            'short' => false,\n                        ]);\n\n                        return isset($event) ? $event->getExitCode() : 1;\n                    }\n\n                    throw $e;\n                } catch (NamespaceNotFoundException) {\n                    throw $e;\n                }\n            }\n        }\n\n        if ($command instanceof LazyCommand) {\n            $command = $command->getCommand();\n        }\n\n        $this->runningCommand = $command;\n        $exitCode = $this->doRunCommand($command, $input, $output);\n        $this->runningCommand = null;\n\n        return $exitCode;\n    }\n\n    public function reset(): void\n    {\n    }\n\n    public function setHelperSet(HelperSet $helperSet): void\n    {\n        $this->helperSet = $helperSet;\n    }\n\n    /**\n     * Get the helper set associated with the command.\n     */\n    public function getHelperSet(): HelperSet\n    {\n        return $this->helperSet ??= $this->getDefaultHelperSet();\n    }\n\n    public function setDefinition(InputDefinition $definition): void\n    {\n        $this->definition = $definition;\n    }\n\n    /**\n     * Gets the InputDefinition related to this Application.\n     */\n    public function getDefinition(): InputDefinition\n    {\n        $this->definition ??= $this->getDefaultInputDefinition();\n\n        if ($this->singleCommand) {\n            $inputDefinition = $this->definition;\n            $inputDefinition->setArguments();\n\n            return $inputDefinition;\n        }\n\n        return $this->definition;\n    }\n\n    /**\n     * Adds suggestions to $suggestions for the current completion input (e.g. option or argument).\n     */\n    public function complete(CompletionInput $input, CompletionSuggestions $suggestions): void\n    {\n        if (\n            CompletionInput::TYPE_ARGUMENT_VALUE === $input->getCompletionType()\n            && 'command' === $input->getCompletionName()\n        ) {\n            foreach ($this->all() as $name => $command) {\n                // skip hidden commands and aliased commands as they already get added below\n                if ($command->isHidden() || $command->getName() !== $name) {\n                    continue;\n                }\n                $suggestions->suggestValue(new Suggestion($command->getName(), $command->getDescription()));\n                foreach ($command->getAliases() as $name) {\n                    $suggestions->suggestValue(new Suggestion($name, $command->getDescription()));\n                }\n            }\n\n            return;\n        }\n\n        if (CompletionInput::TYPE_OPTION_NAME === $input->getCompletionType()) {\n            $suggestions->suggestOptions($this->getDefinition()->getOptions());\n        }\n    }\n\n    /**\n     * Gets the help message.\n     */\n    public function getHelp(): string\n    {\n        return $this->getLongVersion();\n    }\n\n    /**\n     * Gets whether to catch exceptions or not during commands execution.\n     */\n    public function areExceptionsCaught(): bool\n    {\n        return $this->catchExceptions;\n    }\n\n    /**\n     * Sets whether to catch exceptions or not during commands execution.\n     */\n    public function setCatchExceptions(bool $boolean): void\n    {\n        $this->catchExceptions = $boolean;\n    }\n\n    /**\n     * Sets whether to catch errors or not during commands execution.\n     */\n    public function setCatchErrors(bool $catchErrors = true): void\n    {\n        $this->catchErrors = $catchErrors;\n    }\n\n    /**\n     * Gets whether to automatically exit after a command execution or not.\n     */\n    public function isAutoExitEnabled(): bool\n    {\n        return $this->autoExit;\n    }\n\n    /**\n     * Sets whether to automatically exit after a command execution or not.\n     */\n    public function setAutoExit(bool $boolean): void\n    {\n        $this->autoExit = $boolean;\n    }\n\n    /**\n     * Gets the name of the application.\n     */\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    /**\n     * Sets the application name.\n     */\n    public function setName(string $name): void\n    {\n        $this->name = $name;\n    }\n\n    /**\n     * Gets the application version.\n     */\n    public function getVersion(): string\n    {\n        return $this->version;\n    }\n\n    /**\n     * Sets the application version.\n     */\n    public function setVersion(string $version): void\n    {\n        $this->version = $version;\n    }\n\n    /**\n     * Returns the long version of the application.\n     */\n    public function getLongVersion(): string\n    {\n        if ('UNKNOWN' !== $this->getName()) {\n            if ('UNKNOWN' !== $this->getVersion()) {\n                return \\sprintf('%s <info>%s</info>', $this->getName(), $this->getVersion());\n            }\n\n            return $this->getName();\n        }\n\n        return 'Console Tool';\n    }\n\n    /**\n     * Registers a new command.\n     */\n    public function register(string $name): Command\n    {\n        return $this->add(new Command($name));\n    }\n\n    /**\n     * Adds an array of command objects.\n     *\n     * If a Command is not enabled it will not be added.\n     *\n     * @param Command[] $commands An array of commands\n     */\n    public function addCommands(array $commands): void\n    {\n        foreach ($commands as $command) {\n            $this->add($command);\n        }\n    }\n\n    /**\n     * Adds a command object.\n     *\n     * If a command with the same name already exists, it will be overridden.\n     * If the command is not enabled it will not be added.\n     */\n    public function add(Command $command): ?Command\n    {\n        $this->init();\n\n        $command->setApplication($this);\n\n        if (!$command->isEnabled()) {\n            $command->setApplication(null);\n\n            return null;\n        }\n\n        if (!$command instanceof LazyCommand) {\n            // Will throw if the command is not correctly initialized.\n            $command->getDefinition();\n        }\n\n        if (!$command->getName()) {\n            throw new LogicException(\\sprintf('The command defined in \"%s\" cannot have an empty name.', get_debug_type($command)));\n        }\n\n        $this->commands[$command->getName()] = $command;\n\n        foreach ($command->getAliases() as $alias) {\n            $this->commands[$alias] = $command;\n        }\n\n        return $command;\n    }\n\n    /**\n     * Returns a registered command by name or alias.\n     *\n     * @throws CommandNotFoundException When given command name does not exist\n     */\n    public function get(string $name): Command\n    {\n        $this->init();\n\n        if (!$this->has($name)) {\n            throw new CommandNotFoundException(\\sprintf('The command \"%s\" does not exist.', $name));\n        }\n\n        // When the command has a different name than the one used at the command loader level\n        if (!isset($this->commands[$name])) {\n            throw new CommandNotFoundException(\\sprintf('The \"%s\" command cannot be found because it is registered under multiple names. Make sure you don\\'t set a different name via constructor or \"setName()\".', $name));\n        }\n\n        $command = $this->commands[$name];\n\n        if ($this->wantHelps) {\n            $this->wantHelps = false;\n\n            $helpCommand = $this->get('help');\n            $helpCommand->setCommand($command);\n\n            return $helpCommand;\n        }\n\n        return $command;\n    }\n\n    /**\n     * Returns true if the command exists, false otherwise.\n     */\n    public function has(string $name): bool\n    {\n        $this->init();\n\n        return isset($this->commands[$name]) || ($this->commandLoader?->has($name) && $this->add($this->commandLoader->get($name)));\n    }\n\n    /**\n     * Returns an array of all unique namespaces used by currently registered commands.\n     *\n     * It does not return the global namespace which always exists.\n     *\n     * @return string[]\n     */\n    public function getNamespaces(): array\n    {\n        $namespaces = [];\n        foreach ($this->all() as $command) {\n            if ($command->isHidden()) {\n                continue;\n            }\n\n            $namespaces[] = $this->extractAllNamespaces($command->getName());\n\n            foreach ($command->getAliases() as $alias) {\n                $namespaces[] = $this->extractAllNamespaces($alias);\n            }\n        }\n\n        return array_values(array_unique(array_filter(array_merge([], ...$namespaces))));\n    }\n\n    /**\n     * Finds a registered namespace by a name or an abbreviation.\n     *\n     * @throws NamespaceNotFoundException When namespace is incorrect or ambiguous\n     */\n    public function findNamespace(string $namespace): string\n    {\n        $allNamespaces = $this->getNamespaces();\n        $expr = implode('[^:]*:', array_map('preg_quote', explode(':', $namespace))).'[^:]*';\n        $namespaces = preg_grep('{^'.$expr.'}', $allNamespaces);\n\n        if (!$namespaces) {\n            $message = \\sprintf('There are no commands defined in the \"%s\" namespace.', $namespace);\n\n            if ($alternatives = $this->findAlternatives($namespace, $allNamespaces)) {\n                if (1 == \\count($alternatives)) {\n                    $message .= \"\\n\\nDid you mean this?\\n    \";\n                } else {\n                    $message .= \"\\n\\nDid you mean one of these?\\n    \";\n                }\n\n                $message .= implode(\"\\n    \", $alternatives);\n            }\n\n            throw new NamespaceNotFoundException($message, $alternatives);\n        }\n\n        $exact = \\in_array($namespace, $namespaces, true);\n        if (\\count($namespaces) > 1 && !$exact) {\n            throw new NamespaceNotFoundException(\\sprintf(\"The namespace \\\"%s\\\" is ambiguous.\\nDid you mean one of these?\\n%s.\", $namespace, $this->getAbbreviationSuggestions(array_values($namespaces))), array_values($namespaces));\n        }\n\n        return $exact ? $namespace : reset($namespaces);\n    }\n\n    /**\n     * Finds a command by name or alias.\n     *\n     * Contrary to get, this command tries to find the best\n     * match if you give it an abbreviation of a name or alias.\n     *\n     * @throws CommandNotFoundException When command name is incorrect or ambiguous\n     */\n    public function find(string $name): Command\n    {\n        $this->init();\n\n        $aliases = [];\n\n        foreach ($this->commands as $command) {\n            foreach ($command->getAliases() as $alias) {\n                if (!$this->has($alias)) {\n                    $this->commands[$alias] = $command;\n                }\n            }\n        }\n\n        if ($this->has($name)) {\n            return $this->get($name);\n        }\n\n        $allCommands = $this->commandLoader ? array_merge($this->commandLoader->getNames(), array_keys($this->commands)) : array_keys($this->commands);\n        $expr = implode('[^:]*:', array_map('preg_quote', explode(':', $name))).'[^:]*';\n        $commands = preg_grep('{^'.$expr.'}', $allCommands);\n\n        if (!$commands) {\n            $commands = preg_grep('{^'.$expr.'}i', $allCommands);\n        }\n\n        // if no commands matched or we just matched namespaces\n        if (!$commands || \\count(preg_grep('{^'.$expr.'$}i', $commands)) < 1) {\n            if (false !== $pos = strrpos($name, ':')) {\n                // check if a namespace exists and contains commands\n                $this->findNamespace(substr($name, 0, $pos));\n            }\n\n            $message = \\sprintf('Command \"%s\" is not defined.', $name);\n\n            if ($alternatives = $this->findAlternatives($name, $allCommands)) {\n                // remove hidden commands\n                $alternatives = array_filter($alternatives, fn ($name) => !$this->get($name)->isHidden());\n\n                if (1 == \\count($alternatives)) {\n                    $message .= \"\\n\\nDid you mean this?\\n    \";\n                } else {\n                    $message .= \"\\n\\nDid you mean one of these?\\n    \";\n                }\n                $message .= implode(\"\\n    \", $alternatives);\n            }\n\n            throw new CommandNotFoundException($message, array_values($alternatives));\n        }\n\n        // filter out aliases for commands which are already on the list\n        if (\\count($commands) > 1) {\n            $commandList = $this->commandLoader ? array_merge(array_flip($this->commandLoader->getNames()), $this->commands) : $this->commands;\n            $commands = array_unique(array_filter($commands, function ($nameOrAlias) use (&$commandList, $commands, &$aliases) {\n                if (!$commandList[$nameOrAlias] instanceof Command) {\n                    $commandList[$nameOrAlias] = $this->commandLoader->get($nameOrAlias);\n                }\n\n                $commandName = $commandList[$nameOrAlias]->getName();\n\n                $aliases[$nameOrAlias] = $commandName;\n\n                return $commandName === $nameOrAlias || !\\in_array($commandName, $commands, true);\n            }));\n        }\n\n        if (\\count($commands) > 1) {\n            $usableWidth = $this->terminal->getWidth() - 10;\n            $abbrevs = array_values($commands);\n            $maxLen = 0;\n            foreach ($abbrevs as $abbrev) {\n                $maxLen = max(Helper::width($abbrev), $maxLen);\n            }\n            $abbrevs = array_map(function ($cmd) use ($commandList, $usableWidth, $maxLen, &$commands) {\n                if ($commandList[$cmd]->isHidden()) {\n                    unset($commands[array_search($cmd, $commands)]);\n\n                    return false;\n                }\n\n                $abbrev = str_pad($cmd, $maxLen, ' ').' '.$commandList[$cmd]->getDescription();\n\n                return Helper::width($abbrev) > $usableWidth ? Helper::substr($abbrev, 0, $usableWidth - 3).'...' : $abbrev;\n            }, array_values($commands));\n\n            if (\\count($commands) > 1) {\n                $suggestions = $this->getAbbreviationSuggestions(array_filter($abbrevs));\n\n                throw new CommandNotFoundException(\\sprintf(\"Command \\\"%s\\\" is ambiguous.\\nDid you mean one of these?\\n%s.\", $name, $suggestions), array_values($commands));\n            }\n        }\n\n        $command = $this->get(reset($commands));\n\n        if ($command->isHidden()) {\n            throw new CommandNotFoundException(\\sprintf('The command \"%s\" does not exist.', $name));\n        }\n\n        return $command;\n    }\n\n    /**\n     * Gets the commands (registered in the given namespace if provided).\n     *\n     * The array keys are the full names and the values the command instances.\n     *\n     * @return Command[]\n     */\n    public function all(?string $namespace = null): array\n    {\n        $this->init();\n\n        if (null === $namespace) {\n            if (!$this->commandLoader) {\n                return $this->commands;\n            }\n\n            $commands = $this->commands;\n            foreach ($this->commandLoader->getNames() as $name) {\n                if (!isset($commands[$name]) && $this->has($name)) {\n                    $commands[$name] = $this->get($name);\n                }\n            }\n\n            return $commands;\n        }\n\n        $commands = [];\n        foreach ($this->commands as $name => $command) {\n            if ($namespace === $this->extractNamespace($name, substr_count($namespace, ':') + 1)) {\n                $commands[$name] = $command;\n            }\n        }\n\n        if ($this->commandLoader) {\n            foreach ($this->commandLoader->getNames() as $name) {\n                if (!isset($commands[$name]) && $namespace === $this->extractNamespace($name, substr_count($namespace, ':') + 1) && $this->has($name)) {\n                    $commands[$name] = $this->get($name);\n                }\n            }\n        }\n\n        return $commands;\n    }\n\n    /**\n     * Returns an array of possible abbreviations given a set of names.\n     *\n     * @return string[][]\n     */\n    public static function getAbbreviations(array $names): array\n    {\n        $abbrevs = [];\n        foreach ($names as $name) {\n            for ($len = \\strlen($name); $len > 0; --$len) {\n                $abbrev = substr($name, 0, $len);\n                $abbrevs[$abbrev][] = $name;\n            }\n        }\n\n        return $abbrevs;\n    }\n\n    public function renderThrowable(\\Throwable $e, OutputInterface $output): void\n    {\n        $output->writeln('', OutputInterface::VERBOSITY_QUIET);\n\n        $this->doRenderThrowable($e, $output);\n\n        if (null !== $this->runningCommand) {\n            $output->writeln(\\sprintf('<info>%s</info>', OutputFormatter::escape(\\sprintf($this->runningCommand->getSynopsis(), $this->getName()))), OutputInterface::VERBOSITY_QUIET);\n            $output->writeln('', OutputInterface::VERBOSITY_QUIET);\n        }\n    }\n\n    protected function doRenderThrowable(\\Throwable $e, OutputInterface $output): void\n    {\n        do {\n            $message = trim($e->getMessage());\n            if ('' === $message || OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {\n                $class = get_debug_type($e);\n                $title = \\sprintf('  [%s%s]  ', $class, 0 !== ($code = $e->getCode()) ? ' ('.$code.')' : '');\n                $len = Helper::width($title);\n            } else {\n                $len = 0;\n            }\n\n            if (str_contains($message, \"@anonymous\\0\")) {\n                $message = preg_replace_callback('/[a-zA-Z_\\x7f-\\xff][\\\\\\\\a-zA-Z0-9_\\x7f-\\xff]*+@anonymous\\x00.*?\\.php(?:0x?|:[0-9]++\\$)?[0-9a-fA-F]++/', fn ($m) => class_exists($m[0], false) ? (get_parent_class($m[0]) ?: key(class_implements($m[0])) ?: 'class').'@anonymous' : $m[0], $message);\n            }\n\n            $width = $this->terminal->getWidth() ? $this->terminal->getWidth() - 1 : \\PHP_INT_MAX;\n            $lines = [];\n            foreach ('' !== $message ? preg_split('/\\r?\\n/', $message) : [] as $line) {\n                foreach ($this->splitStringByWidth($line, $width - 4) as $line) {\n                    // pre-format lines to get the right string length\n                    $lineLength = Helper::width($line) + 4;\n                    $lines[] = [$line, $lineLength];\n\n                    $len = max($lineLength, $len);\n                }\n            }\n\n            $messages = [];\n            if (!$e instanceof ExceptionInterface || OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {\n                $messages[] = \\sprintf('<comment>%s</comment>', OutputFormatter::escape(\\sprintf('In %s line %s:', basename($e->getFile()) ?: 'n/a', $e->getLine() ?: 'n/a')));\n            }\n            $messages[] = $emptyLine = \\sprintf('<error>%s</error>', str_repeat(' ', $len));\n            if ('' === $message || OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {\n                $messages[] = \\sprintf('<error>%s%s</error>', $title, str_repeat(' ', max(0, $len - Helper::width($title))));\n            }\n            foreach ($lines as $line) {\n                $messages[] = \\sprintf('<error>  %s  %s</error>', OutputFormatter::escape($line[0]), str_repeat(' ', $len - $line[1]));\n            }\n            $messages[] = $emptyLine;\n            $messages[] = '';\n\n            $output->writeln($messages, OutputInterface::VERBOSITY_QUIET);\n\n            if (OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {\n                $output->writeln('<comment>Exception trace:</comment>', OutputInterface::VERBOSITY_QUIET);\n\n                // exception related properties\n                $trace = $e->getTrace();\n\n                array_unshift($trace, [\n                    'function' => '',\n                    'file' => $e->getFile() ?: 'n/a',\n                    'line' => $e->getLine() ?: 'n/a',\n                    'args' => [],\n                ]);\n\n                for ($i = 0, $count = \\count($trace); $i < $count; ++$i) {\n                    $class = $trace[$i]['class'] ?? '';\n                    $type = $trace[$i]['type'] ?? '';\n                    $function = $trace[$i]['function'] ?? '';\n                    $file = $trace[$i]['file'] ?? 'n/a';\n                    $line = $trace[$i]['line'] ?? 'n/a';\n\n                    $output->writeln(\\sprintf(' %s%s at <info>%s:%s</info>', $class, $function ? $type.$function.'()' : '', $file, $line), OutputInterface::VERBOSITY_QUIET);\n                }\n\n                $output->writeln('', OutputInterface::VERBOSITY_QUIET);\n            }\n        } while ($e = $e->getPrevious());\n    }\n\n    /**\n     * Configures the input and output instances based on the user arguments and options.\n     */\n    protected function configureIO(InputInterface $input, OutputInterface $output): void\n    {\n        if (true === $input->hasParameterOption(['--ansi'], true)) {\n            $output->setDecorated(true);\n        } elseif (true === $input->hasParameterOption(['--no-ansi'], true)) {\n            $output->setDecorated(false);\n        }\n\n        if (true === $input->hasParameterOption(['--no-interaction', '-n'], true)) {\n            $input->setInteractive(false);\n        }\n\n        switch ($shellVerbosity = (int) getenv('SHELL_VERBOSITY')) {\n            case -2:\n                $output->setVerbosity(OutputInterface::VERBOSITY_SILENT);\n                break;\n            case -1:\n                $output->setVerbosity(OutputInterface::VERBOSITY_QUIET);\n                break;\n            case 1:\n                $output->setVerbosity(OutputInterface::VERBOSITY_VERBOSE);\n                break;\n            case 2:\n                $output->setVerbosity(OutputInterface::VERBOSITY_VERY_VERBOSE);\n                break;\n            case 3:\n                $output->setVerbosity(OutputInterface::VERBOSITY_DEBUG);\n                break;\n            default:\n                $shellVerbosity = 0;\n                break;\n        }\n\n        if (true === $input->hasParameterOption(['--silent'], true)) {\n            $output->setVerbosity(OutputInterface::VERBOSITY_SILENT);\n            $shellVerbosity = -2;\n        } elseif (true === $input->hasParameterOption(['--quiet', '-q'], true)) {\n            $output->setVerbosity(OutputInterface::VERBOSITY_QUIET);\n            $shellVerbosity = -1;\n        } else {\n            if ($input->hasParameterOption('-vvv', true) || $input->hasParameterOption('--verbose=3', true) || 3 === $input->getParameterOption('--verbose', false, true)) {\n                $output->setVerbosity(OutputInterface::VERBOSITY_DEBUG);\n                $shellVerbosity = 3;\n            } elseif ($input->hasParameterOption('-vv', true) || $input->hasParameterOption('--verbose=2', true) || 2 === $input->getParameterOption('--verbose', false, true)) {\n                $output->setVerbosity(OutputInterface::VERBOSITY_VERY_VERBOSE);\n                $shellVerbosity = 2;\n            } elseif ($input->hasParameterOption('-v', true) || $input->hasParameterOption('--verbose=1', true) || $input->hasParameterOption('--verbose', true) || $input->getParameterOption('--verbose', false, true)) {\n                $output->setVerbosity(OutputInterface::VERBOSITY_VERBOSE);\n                $shellVerbosity = 1;\n            }\n        }\n\n        if (0 > $shellVerbosity) {\n            $input->setInteractive(false);\n        }\n\n        if (\\function_exists('putenv')) {\n            @putenv('SHELL_VERBOSITY='.$shellVerbosity);\n        }\n        $_ENV['SHELL_VERBOSITY'] = $shellVerbosity;\n        $_SERVER['SHELL_VERBOSITY'] = $shellVerbosity;\n    }\n\n    /**\n     * Runs the current command.\n     *\n     * If an event dispatcher has been attached to the application,\n     * events are also dispatched during the life-cycle of the command.\n     *\n     * @return int 0 if everything went fine, or an error code\n     */\n    protected function doRunCommand(Command $command, InputInterface $input, OutputInterface $output): int\n    {\n        foreach ($command->getHelperSet() as $helper) {\n            if ($helper instanceof InputAwareInterface) {\n                $helper->setInput($input);\n            }\n        }\n\n        $commandSignals = $command instanceof SignalableCommandInterface ? $command->getSubscribedSignals() : [];\n        if ($commandSignals || $this->dispatcher && $this->signalsToDispatchEvent) {\n            $signalRegistry = $this->getSignalRegistry();\n\n            if (Terminal::hasSttyAvailable()) {\n                $sttyMode = shell_exec('stty -g');\n\n                foreach ([\\SIGINT, \\SIGQUIT, \\SIGTERM] as $signal) {\n                    $signalRegistry->register($signal, static fn () => shell_exec('stty '.$sttyMode));\n                }\n            }\n\n            if ($this->dispatcher) {\n                // We register application signals, so that we can dispatch the event\n                foreach ($this->signalsToDispatchEvent as $signal) {\n                    $signalEvent = new ConsoleSignalEvent($command, $input, $output, $signal);\n                    $alarmEvent = \\SIGALRM === $signal ? new ConsoleAlarmEvent($command, $input, $output) : null;\n\n                    $signalRegistry->register($signal, function ($signal) use ($signalEvent, $alarmEvent, $command, $commandSignals, $input, $output) {\n                        $this->dispatcher->dispatch($signalEvent, ConsoleEvents::SIGNAL);\n                        $exitCode = $signalEvent->getExitCode();\n\n                        if (null !== $alarmEvent) {\n                            if (false !== $exitCode) {\n                                $alarmEvent->setExitCode($exitCode);\n                            } else {\n                                $alarmEvent->abortExit();\n                            }\n                            $this->dispatcher->dispatch($alarmEvent);\n                            $exitCode = $alarmEvent->getExitCode();\n                        }\n\n                        // If the command is signalable, we call the handleSignal() method\n                        if (\\in_array($signal, $commandSignals, true)) {\n                            $exitCode = $command->handleSignal($signal, $exitCode);\n                        }\n\n                        if (\\SIGALRM === $signal) {\n                            $this->scheduleAlarm();\n                        }\n\n                        if (false !== $exitCode) {\n                            $event = new ConsoleTerminateEvent($command, $input, $output, $exitCode, $signal);\n                            $this->dispatcher->dispatch($event, ConsoleEvents::TERMINATE);\n\n                            exit($event->getExitCode());\n                        }\n                    });\n                }\n\n                // then we register command signals, but not if already handled after the dispatcher\n                $commandSignals = array_diff($commandSignals, $this->signalsToDispatchEvent);\n            }\n\n            foreach ($commandSignals as $signal) {\n                $signalRegistry->register($signal, function (int $signal) use ($command): void {\n                    if (\\SIGALRM === $signal) {\n                        $this->scheduleAlarm();\n                    }\n\n                    if (false !== $exitCode = $command->handleSignal($signal)) {\n                        exit($exitCode);\n                    }\n                });\n            }\n        }\n\n        if (null === $this->dispatcher) {\n            return $command->run($input, $output);\n        }\n\n        // bind before the console.command event, so the listeners have access to input options/arguments\n        try {\n            $command->mergeApplicationDefinition();\n            $input->bind($command->getDefinition());\n        } catch (ExceptionInterface) {\n            // ignore invalid options/arguments for now, to allow the event listeners to customize the InputDefinition\n        }\n\n        $event = new ConsoleCommandEvent($command, $input, $output);\n        $e = null;\n\n        try {\n            $this->dispatcher->dispatch($event, ConsoleEvents::COMMAND);\n\n            if ($event->commandShouldRun()) {\n                $exitCode = $command->run($input, $output);\n            } else {\n                $exitCode = ConsoleCommandEvent::RETURN_CODE_DISABLED;\n            }\n        } catch (\\Throwable $e) {\n            $event = new ConsoleErrorEvent($input, $output, $e, $command);\n            $this->dispatcher->dispatch($event, ConsoleEvents::ERROR);\n            $e = $event->getError();\n\n            if (0 === $exitCode = $event->getExitCode()) {\n                $e = null;\n            }\n        }\n\n        $event = new ConsoleTerminateEvent($command, $input, $output, $exitCode);\n        $this->dispatcher->dispatch($event, ConsoleEvents::TERMINATE);\n\n        if (null !== $e) {\n            throw $e;\n        }\n\n        return $event->getExitCode();\n    }\n\n    /**\n     * Gets the name of the command based on input.\n     */\n    protected function getCommandName(InputInterface $input): ?string\n    {\n        return $this->singleCommand ? $this->defaultCommand : $input->getFirstArgument();\n    }\n\n    /**\n     * Gets the default input definition.\n     */\n    protected function getDefaultInputDefinition(): InputDefinition\n    {\n        return new InputDefinition([\n            new InputArgument('command', InputArgument::REQUIRED, 'The command to execute'),\n            new InputOption('--help', '-h', InputOption::VALUE_NONE, 'Display help for the given command. When no command is given display help for the <info>'.$this->defaultCommand.'</info> command'),\n            new InputOption('--silent', null, InputOption::VALUE_NONE, 'Do not output any message'),\n            new InputOption('--quiet', '-q', InputOption::VALUE_NONE, 'Only errors are displayed. All other output is suppressed'),\n            new InputOption('--verbose', '-v|vv|vvv', InputOption::VALUE_NONE, 'Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug'),\n            new InputOption('--version', '-V', InputOption::VALUE_NONE, 'Display this application version'),\n            new InputOption('--ansi', '', InputOption::VALUE_NEGATABLE, 'Force (or disable --no-ansi) ANSI output', null),\n            new InputOption('--no-interaction', '-n', InputOption::VALUE_NONE, 'Do not ask any interactive question'),\n        ]);\n    }\n\n    /**\n     * Gets the default commands that should always be available.\n     *\n     * @return Command[]\n     */\n    protected function getDefaultCommands(): array\n    {\n        return [new HelpCommand(), new ListCommand(), new CompleteCommand(), new DumpCompletionCommand()];\n    }\n\n    /**\n     * Gets the default helper set with the helpers that should always be available.\n     */\n    protected function getDefaultHelperSet(): HelperSet\n    {\n        return new HelperSet([\n            new FormatterHelper(),\n            new DebugFormatterHelper(),\n            new ProcessHelper(),\n            new QuestionHelper(),\n        ]);\n    }\n\n    /**\n     * Returns abbreviated suggestions in string format.\n     */\n    private function getAbbreviationSuggestions(array $abbrevs): string\n    {\n        return '    '.implode(\"\\n    \", $abbrevs);\n    }\n\n    /**\n     * Returns the namespace part of the command name.\n     *\n     * This method is not part of public API and should not be used directly.\n     */\n    public function extractNamespace(string $name, ?int $limit = null): string\n    {\n        $parts = explode(':', $name, -1);\n\n        return implode(':', null === $limit ? $parts : \\array_slice($parts, 0, $limit));\n    }\n\n    /**\n     * Finds alternative of $name among $collection,\n     * if nothing is found in $collection, try in $abbrevs.\n     *\n     * @return string[]\n     */\n    private function findAlternatives(string $name, iterable $collection): array\n    {\n        $threshold = 1e3;\n        $alternatives = [];\n\n        $collectionParts = [];\n        foreach ($collection as $item) {\n            $collectionParts[$item] = explode(':', $item);\n        }\n\n        foreach (explode(':', $name) as $i => $subname) {\n            foreach ($collectionParts as $collectionName => $parts) {\n                $exists = isset($alternatives[$collectionName]);\n                if (!isset($parts[$i]) && $exists) {\n                    $alternatives[$collectionName] += $threshold;\n                    continue;\n                } elseif (!isset($parts[$i])) {\n                    continue;\n                }\n\n                $lev = levenshtein($subname, $parts[$i]);\n                if ($lev <= \\strlen($subname) / 3 || '' !== $subname && str_contains($parts[$i], $subname)) {\n                    $alternatives[$collectionName] = $exists ? $alternatives[$collectionName] + $lev : $lev;\n                } elseif ($exists) {\n                    $alternatives[$collectionName] += $threshold;\n                }\n            }\n        }\n\n        foreach ($collection as $item) {\n            $lev = levenshtein($name, $item);\n            if ($lev <= \\strlen($name) / 3 || str_contains($item, $name)) {\n                $alternatives[$item] = isset($alternatives[$item]) ? $alternatives[$item] - $lev : $lev;\n            }\n        }\n\n        $alternatives = array_filter($alternatives, fn ($lev) => $lev < 2 * $threshold);\n        ksort($alternatives, \\SORT_NATURAL | \\SORT_FLAG_CASE);\n\n        return array_keys($alternatives);\n    }\n\n    /**\n     * Sets the default Command name.\n     *\n     * @return $this\n     */\n    public function setDefaultCommand(string $commandName, bool $isSingleCommand = false): static\n    {\n        $this->defaultCommand = explode('|', ltrim($commandName, '|'))[0];\n\n        if ($isSingleCommand) {\n            // Ensure the command exist\n            $this->find($commandName);\n\n            $this->singleCommand = true;\n        }\n\n        return $this;\n    }\n\n    /**\n     * @internal\n     */\n    public function isSingleCommand(): bool\n    {\n        return $this->singleCommand;\n    }\n\n    private function splitStringByWidth(string $string, int $width): array\n    {\n        // str_split is not suitable for multi-byte characters, we should use preg_split to get char array properly.\n        // additionally, array_slice() is not enough as some character has doubled width.\n        // we need a function to split string not by character count but by string width\n        if (false === $encoding = mb_detect_encoding($string, null, true)) {\n            return str_split($string, $width);\n        }\n\n        $utf8String = mb_convert_encoding($string, 'utf8', $encoding);\n        $lines = [];\n        $line = '';\n\n        $offset = 0;\n        while (preg_match('/.{1,10000}/u', $utf8String, $m, 0, $offset)) {\n            $offset += \\strlen($m[0]);\n\n            foreach (preg_split('//u', $m[0]) as $char) {\n                // test if $char could be appended to current line\n                if (mb_strwidth($line.$char, 'utf8') <= $width) {\n                    $line .= $char;\n                    continue;\n                }\n                // if not, push current line to array and make new line\n                $lines[] = str_pad($line, $width);\n                $line = $char;\n            }\n        }\n\n        $lines[] = \\count($lines) ? str_pad($line, $width) : $line;\n\n        mb_convert_variables($encoding, 'utf8', $lines);\n\n        return $lines;\n    }\n\n    /**\n     * Returns all namespaces of the command name.\n     *\n     * @return string[]\n     */\n    private function extractAllNamespaces(string $name): array\n    {\n        // -1 as third argument is needed to skip the command short name when exploding\n        $parts = explode(':', $name, -1);\n        $namespaces = [];\n\n        foreach ($parts as $part) {\n            if (\\count($namespaces)) {\n                $namespaces[] = end($namespaces).':'.$part;\n            } else {\n                $namespaces[] = $part;\n            }\n        }\n\n        return $namespaces;\n    }\n\n    private function init(): void\n    {\n        if ($this->initialized) {\n            return;\n        }\n        $this->initialized = true;\n\n        foreach ($this->getDefaultCommands() as $command) {\n            $this->add($command);\n        }\n    }\n}\n\n\n--- File: 4 # SingleCommandApplication.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * @author Gr\u00e9goire Pineau <lyrixx@lyrixx.info>\n */\nclass SingleCommandApplication extends Command\n{\n    private string $version = 'UNKNOWN';\n    private bool $autoExit = true;\n    private bool $running = false;\n\n    /**\n     * @return $this\n     */\n    public function setVersion(string $version): static\n    {\n        $this->version = $version;\n\n        return $this;\n    }\n\n    /**\n     * @final\n     *\n     * @return $this\n     */\n    public function setAutoExit(bool $autoExit): static\n    {\n        $this->autoExit = $autoExit;\n\n        return $this;\n    }\n\n    public function run(?InputInterface $input = null, ?OutputInterface $output = null): int\n    {\n        if ($this->running) {\n            return parent::run($input, $output);\n        }\n\n        // We use the command name as the application name\n        $application = new Application($this->getName() ?: 'UNKNOWN', $this->version);\n        $application->setAutoExit($this->autoExit);\n        // Fix the usage of the command displayed with \"--help\"\n        $this->setName($_SERVER['argv'][0]);\n        $application->add($this);\n        $application->setDefaultCommand($this->getName(), true);\n\n        $this->running = true;\n        try {\n            $ret = $application->run($input, $output);\n        } finally {\n            $this->running = false;\n        }\n\n        return $ret;\n    }\n}\n\n\n--- File: 6 # Question/ChoiceQuestion.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Question;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\n\n/**\n * Represents a choice question.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass ChoiceQuestion extends Question\n{\n    private bool $multiselect = false;\n    private string $prompt = ' > ';\n    private string $errorMessage = 'Value \"%s\" is invalid';\n\n    /**\n     * @param string                     $question The question to ask to the user\n     * @param array                      $choices  The list of available choices\n     * @param string|bool|int|float|null $default  The default answer to return\n     */\n    public function __construct(\n        string $question,\n        private array $choices,\n        string|bool|int|float|null $default = null,\n    ) {\n        if (!$choices) {\n            throw new \\LogicException('Choice question must have at least 1 choice available.');\n        }\n\n        parent::__construct($question, $default);\n\n        $this->setValidator($this->getDefaultValidator());\n        $this->setAutocompleterValues($choices);\n    }\n\n    /**\n     * Returns available choices.\n     */\n    public function getChoices(): array\n    {\n        return $this->choices;\n    }\n\n    /**\n     * Sets multiselect option.\n     *\n     * When multiselect is set to true, multiple choices can be answered.\n     *\n     * @return $this\n     */\n    public function setMultiselect(bool $multiselect): static\n    {\n        $this->multiselect = $multiselect;\n        $this->setValidator($this->getDefaultValidator());\n\n        return $this;\n    }\n\n    /**\n     * Returns whether the choices are multiselect.\n     */\n    public function isMultiselect(): bool\n    {\n        return $this->multiselect;\n    }\n\n    /**\n     * Gets the prompt for choices.\n     */\n    public function getPrompt(): string\n    {\n        return $this->prompt;\n    }\n\n    /**\n     * Sets the prompt for choices.\n     *\n     * @return $this\n     */\n    public function setPrompt(string $prompt): static\n    {\n        $this->prompt = $prompt;\n\n        return $this;\n    }\n\n    /**\n     * Sets the error message for invalid values.\n     *\n     * The error message has a string placeholder (%s) for the invalid value.\n     *\n     * @return $this\n     */\n    public function setErrorMessage(string $errorMessage): static\n    {\n        $this->errorMessage = $errorMessage;\n        $this->setValidator($this->getDefaultValidator());\n\n        return $this;\n    }\n\n    private function getDefaultValidator(): callable\n    {\n        $choices = $this->choices;\n        $errorMessage = $this->errorMessage;\n        $multiselect = $this->multiselect;\n        $isAssoc = $this->isAssoc($choices);\n\n        return function ($selected) use ($choices, $errorMessage, $multiselect, $isAssoc) {\n            if ($multiselect) {\n                // Check for a separated comma values\n                if (!preg_match('/^[^,]+(?:,[^,]+)*$/', (string) $selected, $matches)) {\n                    throw new InvalidArgumentException(\\sprintf($errorMessage, $selected));\n                }\n\n                $selectedChoices = explode(',', (string) $selected);\n            } else {\n                $selectedChoices = [$selected];\n            }\n\n            if ($this->isTrimmable()) {\n                foreach ($selectedChoices as $k => $v) {\n                    $selectedChoices[$k] = trim((string) $v);\n                }\n            }\n\n            $multiselectChoices = [];\n            foreach ($selectedChoices as $value) {\n                $results = [];\n                foreach ($choices as $key => $choice) {\n                    if ($choice === $value) {\n                        $results[] = $key;\n                    }\n                }\n\n                if (\\count($results) > 1) {\n                    throw new InvalidArgumentException(\\sprintf('The provided answer is ambiguous. Value should be one of \"%s\".', implode('\" or \"', $results)));\n                }\n\n                $result = array_search($value, $choices);\n\n                if (!$isAssoc) {\n                    if (false !== $result) {\n                        $result = $choices[$result];\n                    } elseif (isset($choices[$value])) {\n                        $result = $choices[$value];\n                    }\n                } elseif (false === $result && isset($choices[$value])) {\n                    $result = $value;\n                }\n\n                if (false === $result) {\n                    throw new InvalidArgumentException(\\sprintf($errorMessage, $value));\n                }\n\n                // For associative choices, consistently return the key as string:\n                $multiselectChoices[] = $isAssoc ? (string) $result : $result;\n            }\n\n            if ($multiselect) {\n                return $multiselectChoices;\n            }\n\n            return current($multiselectChoices);\n        };\n    }\n}\n\n\n--- File: 7 # Question/ConfirmationQuestion.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Question;\n\n/**\n * Represents a yes/no question.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass ConfirmationQuestion extends Question\n{\n    /**\n     * @param string $question        The question to ask to the user\n     * @param bool   $default         The default answer to return, true or false\n     * @param string $trueAnswerRegex A regex to match the \"yes\" answer\n     */\n    public function __construct(\n        string $question,\n        bool $default = true,\n        private string $trueAnswerRegex = '/^y/i',\n    ) {\n        parent::__construct($question, $default);\n\n        $this->setNormalizer($this->getDefaultNormalizer());\n    }\n\n    /**\n     * Returns the default answer normalizer.\n     */\n    private function getDefaultNormalizer(): callable\n    {\n        $default = $this->getDefault();\n        $regex = $this->trueAnswerRegex;\n\n        return function ($answer) use ($default, $regex) {\n            if (\\is_bool($answer)) {\n                return $answer;\n            }\n\n            $answerIsTrue = (bool) preg_match($regex, $answer);\n            if (false === $default) {\n                return $answer && $answerIsTrue;\n            }\n\n            return '' === $answer || $answerIsTrue;\n        };\n    }\n}\n\n\n--- File: 8 # Question/Question.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Question;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\n\n/**\n * Represents a Question.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass Question\n{\n    private ?int $attempts = null;\n    private bool $hidden = false;\n    private bool $hiddenFallback = true;\n    private ?\\Closure $autocompleterCallback = null;\n    private ?\\Closure $validator = null;\n    private ?\\Closure $normalizer = null;\n    private bool $trimmable = true;\n    private bool $multiline = false;\n\n    /**\n     * @param string                     $question The question to ask to the user\n     * @param string|bool|int|float|null $default  The default answer to return if the user enters nothing\n     */\n    public function __construct(\n        private string $question,\n        private string|bool|int|float|null $default = null,\n    ) {\n    }\n\n    /**\n     * Returns the question.\n     */\n    public function getQuestion(): string\n    {\n        return $this->question;\n    }\n\n    /**\n     * Returns the default answer.\n     */\n    public function getDefault(): string|bool|int|float|null\n    {\n        return $this->default;\n    }\n\n    /**\n     * Returns whether the user response accepts newline characters.\n     */\n    public function isMultiline(): bool\n    {\n        return $this->multiline;\n    }\n\n    /**\n     * Sets whether the user response should accept newline characters.\n     *\n     * @return $this\n     */\n    public function setMultiline(bool $multiline): static\n    {\n        $this->multiline = $multiline;\n\n        return $this;\n    }\n\n    /**\n     * Returns whether the user response must be hidden.\n     */\n    public function isHidden(): bool\n    {\n        return $this->hidden;\n    }\n\n    /**\n     * Sets whether the user response must be hidden or not.\n     *\n     * @return $this\n     *\n     * @throws LogicException In case the autocompleter is also used\n     */\n    public function setHidden(bool $hidden): static\n    {\n        if ($this->autocompleterCallback) {\n            throw new LogicException('A hidden question cannot use the autocompleter.');\n        }\n\n        $this->hidden = $hidden;\n\n        return $this;\n    }\n\n    /**\n     * In case the response cannot be hidden, whether to fallback on non-hidden question or not.\n     */\n    public function isHiddenFallback(): bool\n    {\n        return $this->hiddenFallback;\n    }\n\n    /**\n     * Sets whether to fallback on non-hidden question if the response cannot be hidden.\n     *\n     * @return $this\n     */\n    public function setHiddenFallback(bool $fallback): static\n    {\n        $this->hiddenFallback = $fallback;\n\n        return $this;\n    }\n\n    /**\n     * Gets values for the autocompleter.\n     */\n    public function getAutocompleterValues(): ?iterable\n    {\n        $callback = $this->getAutocompleterCallback();\n\n        return $callback ? $callback('') : null;\n    }\n\n    /**\n     * Sets values for the autocompleter.\n     *\n     * @return $this\n     *\n     * @throws LogicException\n     */\n    public function setAutocompleterValues(?iterable $values): static\n    {\n        if (\\is_array($values)) {\n            $values = $this->isAssoc($values) ? array_merge(array_keys($values), array_values($values)) : array_values($values);\n\n            $callback = static fn () => $values;\n        } elseif ($values instanceof \\Traversable) {\n            $callback = static function () use ($values) {\n                static $valueCache;\n\n                return $valueCache ??= iterator_to_array($values, false);\n            };\n        } else {\n            $callback = null;\n        }\n\n        return $this->setAutocompleterCallback($callback);\n    }\n\n    /**\n     * Gets the callback function used for the autocompleter.\n     */\n    public function getAutocompleterCallback(): ?callable\n    {\n        return $this->autocompleterCallback;\n    }\n\n    /**\n     * Sets the callback function used for the autocompleter.\n     *\n     * The callback is passed the user input as argument and should return an iterable of corresponding suggestions.\n     *\n     * @return $this\n     */\n    public function setAutocompleterCallback(?callable $callback): static\n    {\n        if ($this->hidden && null !== $callback) {\n            throw new LogicException('A hidden question cannot use the autocompleter.');\n        }\n\n        $this->autocompleterCallback = null === $callback ? null : $callback(...);\n\n        return $this;\n    }\n\n    /**\n     * Sets a validator for the question.\n     *\n     * @return $this\n     */\n    public function setValidator(?callable $validator): static\n    {\n        $this->validator = null === $validator ? null : $validator(...);\n\n        return $this;\n    }\n\n    /**\n     * Gets the validator for the question.\n     */\n    public function getValidator(): ?callable\n    {\n        return $this->validator;\n    }\n\n    /**\n     * Sets the maximum number of attempts.\n     *\n     * Null means an unlimited number of attempts.\n     *\n     * @return $this\n     *\n     * @throws InvalidArgumentException in case the number of attempts is invalid\n     */\n    public function setMaxAttempts(?int $attempts): static\n    {\n        if (null !== $attempts && $attempts < 1) {\n            throw new InvalidArgumentException('Maximum number of attempts must be a positive value.');\n        }\n\n        $this->attempts = $attempts;\n\n        return $this;\n    }\n\n    /**\n     * Gets the maximum number of attempts.\n     *\n     * Null means an unlimited number of attempts.\n     */\n    public function getMaxAttempts(): ?int\n    {\n        return $this->attempts;\n    }\n\n    /**\n     * Sets a normalizer for the response.\n     *\n     * The normalizer can be a callable (a string), a closure or a class implementing __invoke.\n     *\n     * @return $this\n     */\n    public function setNormalizer(callable $normalizer): static\n    {\n        $this->normalizer = $normalizer(...);\n\n        return $this;\n    }\n\n    /**\n     * Gets the normalizer for the response.\n     *\n     * The normalizer can ba a callable (a string), a closure or a class implementing __invoke.\n     */\n    public function getNormalizer(): ?callable\n    {\n        return $this->normalizer;\n    }\n\n    protected function isAssoc(array $array): bool\n    {\n        return (bool) \\count(array_filter(array_keys($array), 'is_string'));\n    }\n\n    public function isTrimmable(): bool\n    {\n        return $this->trimmable;\n    }\n\n    /**\n     * @return $this\n     */\n    public function setTrimmable(bool $trimmable): static\n    {\n        $this->trimmable = $trimmable;\n\n        return $this;\n    }\n}\n\n\n--- File: 12 # Exception/InvalidArgumentException.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Exception;\n\n/**\n * @author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>\n */\nclass InvalidArgumentException extends \\InvalidArgumentException implements ExceptionInterface\n{\n}\n\n\n--- File: 13 # Exception/InvalidOptionException.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Exception;\n\n/**\n * Represents an incorrect option name or value typed in the console.\n *\n * @author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>\n */\nclass InvalidOptionException extends \\InvalidArgumentException implements ExceptionInterface\n{\n}\n\n\n--- File: 18 # Logger/ConsoleLogger.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Logger;\n\nuse Psr\\Log\\AbstractLogger;\nuse Psr\\Log\\InvalidArgumentException;\nuse Psr\\Log\\LogLevel;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * PSR-3 compliant console logger.\n *\n * @author K\u00e9vin Dunglas <dunglas@gmail.com>\n *\n * @see https://www.php-fig.org/psr/psr-3/\n */\nclass ConsoleLogger extends AbstractLogger\n{\n    public const INFO = 'info';\n    public const ERROR = 'error';\n\n    private array $verbosityLevelMap = [\n        LogLevel::EMERGENCY => OutputInterface::VERBOSITY_NORMAL,\n        LogLevel::ALERT => OutputInterface::VERBOSITY_NORMAL,\n        LogLevel::CRITICAL => OutputInterface::VERBOSITY_NORMAL,\n        LogLevel::ERROR => OutputInterface::VERBOSITY_NORMAL,\n        LogLevel::WARNING => OutputInterface::VERBOSITY_NORMAL,\n        LogLevel::NOTICE => OutputInterface::VERBOSITY_VERBOSE,\n        LogLevel::INFO => OutputInterface::VERBOSITY_VERY_VERBOSE,\n        LogLevel::DEBUG => OutputInterface::VERBOSITY_DEBUG,\n    ];\n    private array $formatLevelMap = [\n        LogLevel::EMERGENCY => self::ERROR,\n        LogLevel::ALERT => self::ERROR,\n        LogLevel::CRITICAL => self::ERROR,\n        LogLevel::ERROR => self::ERROR,\n        LogLevel::WARNING => self::INFO,\n        LogLevel::NOTICE => self::INFO,\n        LogLevel::INFO => self::INFO,\n        LogLevel::DEBUG => self::INFO,\n    ];\n    private bool $errored = false;\n\n    public function __construct(\n        private OutputInterface $output,\n        array $verbosityLevelMap = [],\n        array $formatLevelMap = [],\n    ) {\n        $this->verbosityLevelMap = $verbosityLevelMap + $this->verbosityLevelMap;\n        $this->formatLevelMap = $formatLevelMap + $this->formatLevelMap;\n    }\n\n    public function log($level, $message, array $context = []): void\n    {\n        if (!isset($this->verbosityLevelMap[$level])) {\n            throw new InvalidArgumentException(\\sprintf('The log level \"%s\" does not exist.', $level));\n        }\n\n        $output = $this->output;\n\n        // Write to the error output if necessary and available\n        if (self::ERROR === $this->formatLevelMap[$level]) {\n            if ($this->output instanceof ConsoleOutputInterface) {\n                $output = $output->getErrorOutput();\n            }\n            $this->errored = true;\n        }\n\n        // the if condition check isn't necessary -- it's the same one that $output will do internally anyway.\n        // We only do it for efficiency here as the message formatting is relatively expensive.\n        if ($output->getVerbosity() >= $this->verbosityLevelMap[$level]) {\n            $output->writeln(\\sprintf('<%1$s>[%2$s] %3$s</%1$s>', $this->formatLevelMap[$level], $level, $this->interpolate($message, $context)), $this->verbosityLevelMap[$level]);\n        }\n    }\n\n    /**\n     * Returns true when any messages have been logged at error levels.\n     */\n    public function hasErrored(): bool\n    {\n        return $this->errored;\n    }\n\n    /**\n     * Interpolates context values into the message placeholders.\n     *\n     * @author PHP Framework Interoperability Group\n     */\n    private function interpolate(string $message, array $context): string\n    {\n        if (!str_contains($message, '{')) {\n            return $message;\n        }\n\n        $replacements = [];\n        foreach ($context as $key => $val) {\n            if (null === $val || \\is_scalar($val) || $val instanceof \\Stringable) {\n                $replacements[\"{{$key}}\"] = $val;\n            } elseif ($val instanceof \\DateTimeInterface) {\n                $replacements[\"{{$key}}\"] = $val->format(\\DateTimeInterface::RFC3339);\n            } elseif (\\is_object($val)) {\n                $replacements[\"{{$key}}\"] = '[object '.$val::class.']';\n            } else {\n                $replacements[\"{{$key}}\"] = '['.\\gettype($val).']';\n            }\n        }\n\n        return strtr($message, $replacements);\n    }\n}\n\n\n--- File: 27 # CommandLoader/ContainerCommandLoader.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\CommandLoader;\n\nuse Psr\\Container\\ContainerInterface;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Exception\\CommandNotFoundException;\n\n/**\n * Loads commands from a PSR-11 container.\n *\n * @author Robin Chalas <robin.chalas@gmail.com>\n */\nclass ContainerCommandLoader implements CommandLoaderInterface\n{\n    /**\n     * @param array $commandMap An array with command names as keys and service ids as values\n     */\n    public function __construct(\n        private ContainerInterface $container,\n        private array $commandMap,\n    ) {\n    }\n\n    public function get(string $name): Command\n    {\n        if (!$this->has($name)) {\n            throw new CommandNotFoundException(\\sprintf('Command \"%s\" does not exist.', $name));\n        }\n\n        return $this->container->get($this->commandMap[$name]);\n    }\n\n    public function has(string $name): bool\n    {\n        return isset($this->commandMap[$name]) && $this->container->has($this->commandMap[$name]);\n    }\n\n    public function getNames(): array\n    {\n        return array_keys($this->commandMap);\n    }\n}\n\n\n--- File: 29 # CommandLoader/FactoryCommandLoader.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\CommandLoader;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Exception\\CommandNotFoundException;\n\n/**\n * A simple command loader using factories to instantiate commands lazily.\n *\n * @author Maxime Steinhausser <maxime.steinhausser@gmail.com>\n */\nclass FactoryCommandLoader implements CommandLoaderInterface\n{\n    /**\n     * @param callable[] $factories Indexed by command names\n     */\n    public function __construct(\n        private array $factories,\n    ) {\n    }\n\n    public function has(string $name): bool\n    {\n        return isset($this->factories[$name]);\n    }\n\n    public function get(string $name): Command\n    {\n        if (!isset($this->factories[$name])) {\n            throw new CommandNotFoundException(\\sprintf('Command \"%s\" does not exist.', $name));\n        }\n\n        $factory = $this->factories[$name];\n\n        return $factory();\n    }\n\n    public function getNames(): array\n    {\n        return array_keys($this->factories);\n    }\n}\n\n\n--- File: 40 # Output/ConsoleSectionOutput.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\nuse Symfony\\Component\\Console\\Helper\\Helper;\nuse Symfony\\Component\\Console\\Terminal;\n\n/**\n * @author Pierre du Plessis <pdples@gmail.com>\n * @author Gabriel Ostroluck\u00fd <gabriel.ostrolucky@gmail.com>\n */\nclass ConsoleSectionOutput extends StreamOutput\n{\n    private array $content = [];\n    private int $lines = 0;\n    private array $sections;\n    private Terminal $terminal;\n    private int $maxHeight = 0;\n\n    /**\n     * @param resource               $stream\n     * @param ConsoleSectionOutput[] $sections\n     */\n    public function __construct($stream, array &$sections, int $verbosity, bool $decorated, OutputFormatterInterface $formatter)\n    {\n        parent::__construct($stream, $verbosity, $decorated, $formatter);\n        array_unshift($sections, $this);\n        $this->sections = &$sections;\n        $this->terminal = new Terminal();\n    }\n\n    /**\n     * Defines a maximum number of lines for this section.\n     *\n     * When more lines are added, the section will automatically scroll to the\n     * end (i.e. remove the first lines to comply with the max height).\n     */\n    public function setMaxHeight(int $maxHeight): void\n    {\n        // when changing max height, clear output of current section and redraw again with the new height\n        $previousMaxHeight = $this->maxHeight;\n        $this->maxHeight = $maxHeight;\n        $existingContent = $this->popStreamContentUntilCurrentSection($previousMaxHeight ? min($previousMaxHeight, $this->lines) : $this->lines);\n\n        parent::doWrite($this->getVisibleContent(), false);\n        parent::doWrite($existingContent, false);\n    }\n\n    /**\n     * Clears previous output for this section.\n     *\n     * @param int $lines Number of lines to clear. If null, then the entire output of this section is cleared\n     */\n    public function clear(?int $lines = null): void\n    {\n        if (!$this->content || !$this->isDecorated()) {\n            return;\n        }\n\n        if ($lines) {\n            array_splice($this->content, -$lines);\n        } else {\n            $lines = $this->lines;\n            $this->content = [];\n        }\n\n        $this->lines -= $lines;\n\n        parent::doWrite($this->popStreamContentUntilCurrentSection($this->maxHeight ? min($this->maxHeight, $lines) : $lines), false);\n    }\n\n    /**\n     * Overwrites the previous output with a new message.\n     */\n    public function overwrite(string|iterable $message): void\n    {\n        $this->clear();\n        $this->writeln($message);\n    }\n\n    public function getContent(): string\n    {\n        return implode('', $this->content);\n    }\n\n    public function getVisibleContent(): string\n    {\n        if (0 === $this->maxHeight) {\n            return $this->getContent();\n        }\n\n        return implode('', \\array_slice($this->content, -$this->maxHeight));\n    }\n\n    /**\n     * @internal\n     */\n    public function addContent(string $input, bool $newline = true): int\n    {\n        $width = $this->terminal->getWidth();\n        $lines = explode(\\PHP_EOL, $input);\n        $linesAdded = 0;\n        $count = \\count($lines) - 1;\n        foreach ($lines as $i => $lineContent) {\n            // re-add the line break (that has been removed in the above `explode()` for\n            // - every line that is not the last line\n            // - if $newline is required, also add it to the last line\n            if ($i < $count || $newline) {\n                $lineContent .= \\PHP_EOL;\n            }\n\n            // skip line if there is no text (or newline for that matter)\n            if ('' === $lineContent) {\n                continue;\n            }\n\n            // For the first line, check if the previous line (last entry of `$this->content`)\n            // needs to be continued (i.e. does not end with a line break).\n            if (0 === $i\n                && (false !== $lastLine = end($this->content))\n                && !str_ends_with($lastLine, \\PHP_EOL)\n            ) {\n                // deduct the line count of the previous line\n                $this->lines -= (int) ceil($this->getDisplayLength($lastLine) / $width) ?: 1;\n                // concatenate previous and new line\n                $lineContent = $lastLine.$lineContent;\n                // replace last entry of `$this->content` with the new expanded line\n                array_splice($this->content, -1, 1, $lineContent);\n            } else {\n                // otherwise just add the new content\n                $this->content[] = $lineContent;\n            }\n\n            $linesAdded += (int) ceil($this->getDisplayLength($lineContent) / $width) ?: 1;\n        }\n\n        $this->lines += $linesAdded;\n\n        return $linesAdded;\n    }\n\n    /**\n     * @internal\n     */\n    public function addNewLineOfInputSubmit(): void\n    {\n        $this->content[] = \\PHP_EOL;\n        ++$this->lines;\n    }\n\n    protected function doWrite(string $message, bool $newline): void\n    {\n        // Simulate newline behavior for consistent output formatting, avoiding extra logic\n        if (!$newline && str_ends_with($message, \\PHP_EOL)) {\n            $message = substr($message, 0, -\\strlen(\\PHP_EOL));\n            $newline = true;\n        }\n\n        if (!$this->isDecorated()) {\n            parent::doWrite($message, $newline);\n\n            return;\n        }\n\n        // Check if the previous line (last entry of `$this->content`) needs to be continued\n        // (i.e. does not end with a line break). In which case, it needs to be erased first.\n        $linesToClear = $deleteLastLine = ($lastLine = end($this->content) ?: '') && !str_ends_with($lastLine, \\PHP_EOL) ? 1 : 0;\n\n        $linesAdded = $this->addContent($message, $newline);\n\n        if ($lineOverflow = $this->maxHeight > 0 && $this->lines > $this->maxHeight) {\n            // on overflow, clear the whole section and redraw again (to remove the first lines)\n            $linesToClear = $this->maxHeight;\n        }\n\n        $erasedContent = $this->popStreamContentUntilCurrentSection($linesToClear);\n\n        if ($lineOverflow) {\n            // redraw existing lines of the section\n            $previousLinesOfSection = \\array_slice($this->content, $this->lines - $this->maxHeight, $this->maxHeight - $linesAdded);\n            parent::doWrite(implode('', $previousLinesOfSection), false);\n        }\n\n        // if the last line was removed, re-print its content together with the new content.\n        // otherwise, just print the new content.\n        parent::doWrite($deleteLastLine ? $lastLine.$message : $message, true);\n        parent::doWrite($erasedContent, false);\n    }\n\n    /**\n     * At initial stage, cursor is at the end of stream output. This method makes cursor crawl upwards until it hits\n     * current section. Then it erases content it crawled through. Optionally, it erases part of current section too.\n     */\n    private function popStreamContentUntilCurrentSection(int $numberOfLinesToClearFromCurrentSection = 0): string\n    {\n        $numberOfLinesToClear = $numberOfLinesToClearFromCurrentSection;\n        $erasedContent = [];\n\n        foreach ($this->sections as $section) {\n            if ($section === $this) {\n                break;\n            }\n\n            $numberOfLinesToClear += $section->maxHeight ? min($section->lines, $section->maxHeight) : $section->lines;\n            if ('' !== $sectionContent = $section->getVisibleContent()) {\n                if (!str_ends_with($sectionContent, \\PHP_EOL)) {\n                    $sectionContent .= \\PHP_EOL;\n                }\n                $erasedContent[] = $sectionContent;\n            }\n        }\n\n        if ($numberOfLinesToClear > 0) {\n            // move cursor up n lines\n            parent::doWrite(\\sprintf(\"\\x1b[%dA\", $numberOfLinesToClear), false);\n            // erase to end of screen\n            parent::doWrite(\"\\x1b[0J\", false);\n        }\n\n        return implode('', array_reverse($erasedContent));\n    }\n\n    private function getDisplayLength(string $text): int\n    {\n        return Helper::width(Helper::removeDecoration($this->getFormatter(), str_replace(\"\\t\", '        ', $text)));\n    }\n}\n\n\n--- File: 42 # Output/AnsiColorMode.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\n\n/**\n * @author Fabien Potencier <fabien@symfony.com>\n * @author Julien Boudry <julien@condorcet.vote>\n */\nenum AnsiColorMode\n{\n    /*\n     * Classical 4-bit Ansi colors, including 8 classical colors and 8 bright color. Output syntax is \"ESC[${foreGroundColorcode};${backGroundColorcode}m\"\n     * Must be compatible with all terminals and it's the minimal version supported.\n     */\n    case Ansi4;\n\n    /*\n     * 8-bit Ansi colors (240 different colors + 16 duplicate color codes, ensuring backward compatibility).\n     * Output syntax is: \"ESC[38;5;${foreGroundColorcode};48;5;${backGroundColorcode}m\"\n     * Should be compatible with most terminals.\n     */\n    case Ansi8;\n\n    /*\n     * 24-bit Ansi colors (RGB).\n     * Output syntax is: \"ESC[38;2;${foreGroundColorcodeRed};${foreGroundColorcodeGreen};${foreGroundColorcodeBlue};48;2;${backGroundColorcodeRed};${backGroundColorcodeGreen};${backGroundColorcodeBlue}m\"\n     * May be compatible with many modern terminals.\n     */\n    case Ansi24;\n\n    /**\n     * Converts an RGB hexadecimal color to the corresponding Ansi code.\n     */\n    public function convertFromHexToAnsiColorCode(string $hexColor): string\n    {\n        $hexColor = str_replace('#', '', $hexColor);\n\n        if (3 === \\strlen($hexColor)) {\n            $hexColor = $hexColor[0].$hexColor[0].$hexColor[1].$hexColor[1].$hexColor[2].$hexColor[2];\n        }\n\n        if (6 !== \\strlen($hexColor)) {\n            throw new InvalidArgumentException(\\sprintf('Invalid \"#%s\" color.', $hexColor));\n        }\n\n        $color = hexdec($hexColor);\n\n        $r = ($color >> 16) & 255;\n        $g = ($color >> 8) & 255;\n        $b = $color & 255;\n\n        return match ($this) {\n            self::Ansi4 => (string) $this->convertFromRGB($r, $g, $b),\n            self::Ansi8 => '8;5;'.$this->convertFromRGB($r, $g, $b),\n            self::Ansi24 => \\sprintf('8;2;%d;%d;%d', $r, $g, $b),\n        };\n    }\n\n    private function convertFromRGB(int $r, int $g, int $b): int\n    {\n        return match ($this) {\n            self::Ansi4 => $this->degradeHexColorToAnsi4($r, $g, $b),\n            self::Ansi8 => $this->degradeHexColorToAnsi8($r, $g, $b),\n            default => throw new InvalidArgumentException(\"RGB cannot be converted to {$this->name}.\"),\n        };\n    }\n\n    private function degradeHexColorToAnsi4(int $r, int $g, int $b): int\n    {\n        return round($b / 255) << 2 | (round($g / 255) << 1) | round($r / 255);\n    }\n\n    /**\n     * Inspired from https://github.com/ajalt/colormath/blob/e464e0da1b014976736cf97250063248fc77b8e7/colormath/src/commonMain/kotlin/com/github/ajalt/colormath/model/Ansi256.kt code (MIT license).\n     */\n    private function degradeHexColorToAnsi8(int $r, int $g, int $b): int\n    {\n        if ($r === $g && $g === $b) {\n            if ($r < 8) {\n                return 16;\n            }\n\n            if ($r > 248) {\n                return 231;\n            }\n\n            return (int) round(($r - 8) / 247 * 24) + 232;\n        }\n\n        return 16 +\n            (36 * (int) round($r / 255 * 5)) +\n            (6 * (int) round($g / 255 * 5)) +\n            (int) round($b / 255 * 5);\n    }\n}\n\n\n--- File: 53 # Formatter/OutputFormatterInterface.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Formatter;\n\n/**\n * Formatter interface for console output.\n *\n * @author Konstantin Kudryashov <ever.zet@gmail.com>\n */\ninterface OutputFormatterInterface\n{\n    /**\n     * Sets the decorated flag.\n     */\n    public function setDecorated(bool $decorated): void;\n\n    /**\n     * Whether the output will decorate messages.\n     */\n    public function isDecorated(): bool;\n\n    /**\n     * Sets a new style.\n     */\n    public function setStyle(string $name, OutputFormatterStyleInterface $style): void;\n\n    /**\n     * Checks if output formatter has style with specified name.\n     */\n    public function hasStyle(string $name): bool;\n\n    /**\n     * Gets style options from style with specified name.\n     *\n     * @throws \\InvalidArgumentException When style isn't defined\n     */\n    public function getStyle(string $name): OutputFormatterStyleInterface;\n\n    /**\n     * Formats a message according to the given styles.\n     */\n    public function format(?string $message): ?string;\n}\n\n\n--- File: 59 # Formatter/OutputFormatterStyle.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Formatter;\n\nuse Symfony\\Component\\Console\\Color;\n\n/**\n * Formatter style class for defining styles.\n *\n * @author Konstantin Kudryashov <ever.zet@gmail.com>\n */\nclass OutputFormatterStyle implements OutputFormatterStyleInterface\n{\n    private Color $color;\n    private string $foreground;\n    private string $background;\n    private array $options;\n    private ?string $href = null;\n    private bool $handlesHrefGracefully;\n\n    /**\n     * Initializes output formatter style.\n     *\n     * @param string|null $foreground The style foreground color name\n     * @param string|null $background The style background color name\n     */\n    public function __construct(?string $foreground = null, ?string $background = null, array $options = [])\n    {\n        $this->color = new Color($this->foreground = $foreground ?: '', $this->background = $background ?: '', $this->options = $options);\n    }\n\n    public function setForeground(?string $color): void\n    {\n        $this->color = new Color($this->foreground = $color ?: '', $this->background, $this->options);\n    }\n\n    public function setBackground(?string $color): void\n    {\n        $this->color = new Color($this->foreground, $this->background = $color ?: '', $this->options);\n    }\n\n    public function setHref(string $url): void\n    {\n        $this->href = $url;\n    }\n\n    public function setOption(string $option): void\n    {\n        $this->options[] = $option;\n        $this->color = new Color($this->foreground, $this->background, $this->options);\n    }\n\n    public function unsetOption(string $option): void\n    {\n        $pos = array_search($option, $this->options);\n        if (false !== $pos) {\n            unset($this->options[$pos]);\n        }\n\n        $this->color = new Color($this->foreground, $this->background, $this->options);\n    }\n\n    public function setOptions(array $options): void\n    {\n        $this->color = new Color($this->foreground, $this->background, $this->options = $options);\n    }\n\n    public function apply(string $text): string\n    {\n        $this->handlesHrefGracefully ??= 'JetBrains-JediTerm' !== getenv('TERMINAL_EMULATOR')\n            && (!getenv('KONSOLE_VERSION') || (int) getenv('KONSOLE_VERSION') > 201100)\n            && !isset($_SERVER['IDEA_INITIAL_DIRECTORY']);\n\n        if (null !== $this->href && $this->handlesHrefGracefully) {\n            $text = \"\\033]8;;$this->href\\033\\\\$text\\033]8;;\\033\\\\\";\n        }\n\n        return $this->color->apply($text);\n    }\n}\n\n\n--- File: 60 # DependencyInjection/AddConsoleCommandPass.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\DependencyInjection;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Command\\LazyCommand;\nuse Symfony\\Component\\Console\\CommandLoader\\ContainerCommandLoader;\nuse Symfony\\Component\\DependencyInjection\\Argument\\ServiceClosureArgument;\nuse Symfony\\Component\\DependencyInjection\\Compiler\\CompilerPassInterface;\nuse Symfony\\Component\\DependencyInjection\\Compiler\\ServiceLocatorTagPass;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\DependencyInjection\\Reference;\nuse Symfony\\Component\\DependencyInjection\\TypedReference;\n\n/**\n * Registers console commands.\n *\n * @author Gr\u00e9goire Pineau <lyrixx@lyrixx.info>\n */\nclass AddConsoleCommandPass implements CompilerPassInterface\n{\n    public function process(ContainerBuilder $container): void\n    {\n        $commandServices = $container->findTaggedServiceIds('console.command', true);\n        $lazyCommandMap = [];\n        $lazyCommandRefs = [];\n        $serviceIds = [];\n\n        foreach ($commandServices as $id => $tags) {\n            $definition = $container->getDefinition($id);\n            $definition->addTag('container.no_preload');\n            $class = $container->getParameterBag()->resolveValue($definition->getClass());\n\n            if (isset($tags[0]['command'])) {\n                $aliases = $tags[0]['command'];\n            } else {\n                if (!$r = $container->getReflectionClass($class)) {\n                    throw new InvalidArgumentException(\\sprintf('Class \"%s\" used for service \"%s\" cannot be found.', $class, $id));\n                }\n                if (!$r->isSubclassOf(Command::class)) {\n                    throw new InvalidArgumentException(\\sprintf('The service \"%s\" tagged \"%s\" must be a subclass of \"%s\".', $id, 'console.command', Command::class));\n                }\n                $aliases = str_replace('%', '%%', $class::getDefaultName() ?? '');\n            }\n\n            $aliases = explode('|', $aliases);\n            $commandName = array_shift($aliases);\n\n            if ($isHidden = '' === $commandName) {\n                $commandName = array_shift($aliases);\n            }\n\n            if (null === $commandName) {\n                if (!$definition->isPublic() || $definition->isPrivate() || $definition->hasTag('container.private')) {\n                    $commandId = 'console.command.public_alias.'.$id;\n                    $container->setAlias($commandId, $id)->setPublic(true);\n                    $id = $commandId;\n                }\n                $serviceIds[] = $id;\n\n                continue;\n            }\n\n            $description = $tags[0]['description'] ?? null;\n\n            unset($tags[0]);\n            $lazyCommandMap[$commandName] = $id;\n            $lazyCommandRefs[$id] = new TypedReference($id, $class);\n\n            foreach ($aliases as $alias) {\n                $lazyCommandMap[$alias] = $id;\n            }\n\n            foreach ($tags as $tag) {\n                if (isset($tag['command'])) {\n                    $aliases[] = $tag['command'];\n                    $lazyCommandMap[$tag['command']] = $id;\n                }\n\n                $description ??= $tag['description'] ?? null;\n            }\n\n            $definition->addMethodCall('setName', [$commandName]);\n\n            if ($aliases) {\n                $definition->addMethodCall('setAliases', [$aliases]);\n            }\n\n            if ($isHidden) {\n                $definition->addMethodCall('setHidden', [true]);\n            }\n\n            if (!$description) {\n                if (!$r = $container->getReflectionClass($class)) {\n                    throw new InvalidArgumentException(\\sprintf('Class \"%s\" used for service \"%s\" cannot be found.', $class, $id));\n                }\n                if (!$r->isSubclassOf(Command::class)) {\n                    throw new InvalidArgumentException(\\sprintf('The service \"%s\" tagged \"%s\" must be a subclass of \"%s\".', $id, 'console.command', Command::class));\n                }\n                $description = str_replace('%', '%%', $class::getDefaultDescription() ?? '');\n            }\n\n            if ($description) {\n                $definition->addMethodCall('setDescription', [$description]);\n\n                $container->register('.'.$id.'.lazy', LazyCommand::class)\n                    ->setArguments([$commandName, $aliases, $description, $isHidden, new ServiceClosureArgument($lazyCommandRefs[$id])]);\n\n                $lazyCommandRefs[$id] = new Reference('.'.$id.'.lazy');\n            }\n        }\n\n        $container\n            ->register('console.command_loader', ContainerCommandLoader::class)\n            ->setPublic(true)\n            ->addTag('container.no_preload')\n            ->setArguments([ServiceLocatorTagPass::register($container, $lazyCommandRefs), $lazyCommandMap]);\n\n        $container->setParameter('console.command.ids', $serviceIds);\n    }\n}\n\n\n--- File: 61 # Input/InputOption.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Input;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Completion\\CompletionInput;\nuse Symfony\\Component\\Console\\Completion\\CompletionSuggestions;\nuse Symfony\\Component\\Console\\Completion\\Suggestion;\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\n\n/**\n * Represents a command line option.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass InputOption\n{\n    /**\n     * Do not accept input for the option (e.g. --yell). This is the default behavior of options.\n     */\n    public const VALUE_NONE = 1;\n\n    /**\n     * A value must be passed when the option is used (e.g. --iterations=5 or -i5).\n     */\n    public const VALUE_REQUIRED = 2;\n\n    /**\n     * The option may or may not have a value (e.g. --yell or --yell=loud).\n     */\n    public const VALUE_OPTIONAL = 4;\n\n    /**\n     * The option accepts multiple values (e.g. --dir=/foo --dir=/bar).\n     */\n    public const VALUE_IS_ARRAY = 8;\n\n    /**\n     * The option allows passing a negated variant (e.g. --ansi or --no-ansi).\n     */\n    public const VALUE_NEGATABLE = 16;\n\n    private string $name;\n    private ?string $shortcut;\n    private int $mode;\n    private string|int|bool|array|float|null $default;\n\n    /**\n     * @param string|array|null                                                             $shortcut        The shortcuts, can be null, a string of shortcuts delimited by | or an array of shortcuts\n     * @param int-mask-of<InputOption::*>|null                                              $mode            The option mode: One of the VALUE_* constants\n     * @param string|bool|int|float|array|null                                              $default         The default value (must be null for self::VALUE_NONE)\n     * @param array|\\Closure(CompletionInput,CompletionSuggestions):list<string|Suggestion> $suggestedValues The values used for input completion\n     *\n     * @throws InvalidArgumentException If option mode is invalid or incompatible\n     */\n    public function __construct(\n        string $name,\n        string|array|null $shortcut = null,\n        ?int $mode = null,\n        private string $description = '',\n        string|bool|int|float|array|null $default = null,\n        private array|\\Closure $suggestedValues = [],\n    ) {\n        if (str_starts_with($name, '--')) {\n            $name = substr($name, 2);\n        }\n\n        if (!$name) {\n            throw new InvalidArgumentException('An option name cannot be empty.');\n        }\n\n        if ('' === $shortcut || [] === $shortcut || false === $shortcut) {\n            $shortcut = null;\n        }\n\n        if (null !== $shortcut) {\n            if (\\is_array($shortcut)) {\n                $shortcut = implode('|', $shortcut);\n            }\n            $shortcuts = preg_split('{(\\|)-?}', ltrim($shortcut, '-'));\n            $shortcuts = array_filter($shortcuts, 'strlen');\n            $shortcut = implode('|', $shortcuts);\n\n            if ('' === $shortcut) {\n                throw new InvalidArgumentException('An option shortcut cannot be empty.');\n            }\n        }\n\n        if (null === $mode) {\n            $mode = self::VALUE_NONE;\n        } elseif ($mode >= (self::VALUE_NEGATABLE << 1) || $mode < 1) {\n            throw new InvalidArgumentException(\\sprintf('Option mode \"%s\" is not valid.', $mode));\n        }\n\n        $this->name = $name;\n        $this->shortcut = $shortcut;\n        $this->mode = $mode;\n\n        if ($suggestedValues && !$this->acceptValue()) {\n            throw new LogicException('Cannot set suggested values if the option does not accept a value.');\n        }\n        if ($this->isArray() && !$this->acceptValue()) {\n            throw new InvalidArgumentException('Impossible to have an option mode VALUE_IS_ARRAY if the option does not accept a value.');\n        }\n        if ($this->isNegatable() && $this->acceptValue()) {\n            throw new InvalidArgumentException('Impossible to have an option mode VALUE_NEGATABLE if the option also accepts a value.');\n        }\n\n        $this->setDefault($default);\n    }\n\n    /**\n     * Returns the option shortcut.\n     */\n    public function getShortcut(): ?string\n    {\n        return $this->shortcut;\n    }\n\n    /**\n     * Returns the option name.\n     */\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    /**\n     * Returns true if the option accepts a value.\n     *\n     * @return bool true if value mode is not self::VALUE_NONE, false otherwise\n     */\n    public function acceptValue(): bool\n    {\n        return $this->isValueRequired() || $this->isValueOptional();\n    }\n\n    /**\n     * Returns true if the option requires a value.\n     *\n     * @return bool true if value mode is self::VALUE_REQUIRED, false otherwise\n     */\n    public function isValueRequired(): bool\n    {\n        return self::VALUE_REQUIRED === (self::VALUE_REQUIRED & $this->mode);\n    }\n\n    /**\n     * Returns true if the option takes an optional value.\n     *\n     * @return bool true if value mode is self::VALUE_OPTIONAL, false otherwise\n     */\n    public function isValueOptional(): bool\n    {\n        return self::VALUE_OPTIONAL === (self::VALUE_OPTIONAL & $this->mode);\n    }\n\n    /**\n     * Returns true if the option can take multiple values.\n     *\n     * @return bool true if mode is self::VALUE_IS_ARRAY, false otherwise\n     */\n    public function isArray(): bool\n    {\n        return self::VALUE_IS_ARRAY === (self::VALUE_IS_ARRAY & $this->mode);\n    }\n\n    /**\n     * Returns true if the option allows passing a negated variant.\n     *\n     * @return bool true if mode is self::VALUE_NEGATABLE, false otherwise\n     */\n    public function isNegatable(): bool\n    {\n        return self::VALUE_NEGATABLE === (self::VALUE_NEGATABLE & $this->mode);\n    }\n\n    /**\n     * Sets the default value.\n     */\n    public function setDefault(string|bool|int|float|array|null $default): void\n    {\n        if (self::VALUE_NONE === (self::VALUE_NONE & $this->mode) && null !== $default) {\n            throw new LogicException('Cannot set a default value when using InputOption::VALUE_NONE mode.');\n        }\n\n        if ($this->isArray()) {\n            if (null === $default) {\n                $default = [];\n            } elseif (!\\is_array($default)) {\n                throw new LogicException('A default value for an array option must be an array.');\n            }\n        }\n\n        $this->default = $this->acceptValue() || $this->isNegatable() ? $default : false;\n    }\n\n    /**\n     * Returns the default value.\n     */\n    public function getDefault(): string|bool|int|float|array|null\n    {\n        return $this->default;\n    }\n\n    /**\n     * Returns the description text.\n     */\n    public function getDescription(): string\n    {\n        return $this->description;\n    }\n\n    /**\n     * Returns true if the option has values for input completion.\n     */\n    public function hasCompletion(): bool\n    {\n        return [] !== $this->suggestedValues;\n    }\n\n    /**\n     * Supplies suggestions when command resolves possible completion options for input.\n     *\n     * @see Command::complete()\n     */\n    public function complete(CompletionInput $input, CompletionSuggestions $suggestions): void\n    {\n        $values = $this->suggestedValues;\n        if ($values instanceof \\Closure && !\\is_array($values = $values($input))) {\n            throw new LogicException(\\sprintf('Closure for option \"%s\" must return an array. Got \"%s\".', $this->name, get_debug_type($values)));\n        }\n        if ($values) {\n            $suggestions->suggestValues($values);\n        }\n    }\n\n    /**\n     * Checks whether the given option equals this one.\n     */\n    public function equals(self $option): bool\n    {\n        return $option->getName() === $this->getName()\n            && $option->getShortcut() === $this->getShortcut()\n            && $option->getDefault() === $this->getDefault()\n            && $option->isNegatable() === $this->isNegatable()\n            && $option->isArray() === $this->isArray()\n            && $option->isValueRequired() === $this->isValueRequired()\n            && $option->isValueOptional() === $this->isValueOptional()\n        ;\n    }\n}\n\n\n--- File: 62 # Input/ArgvInput.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Input;\n\nuse Symfony\\Component\\Console\\Exception\\RuntimeException;\n\n/**\n * ArgvInput represents an input coming from the CLI arguments.\n *\n * Usage:\n *\n *     $input = new ArgvInput();\n *\n * By default, the `$_SERVER['argv']` array is used for the input values.\n *\n * This can be overridden by explicitly passing the input values in the constructor:\n *\n *     $input = new ArgvInput($_SERVER['argv']);\n *\n * If you pass it yourself, don't forget that the first element of the array\n * is the name of the running application.\n *\n * When passing an argument to the constructor, be sure that it respects\n * the same rules as the argv one. It's almost always better to use the\n * `StringInput` when you want to provide your own input.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n *\n * @see http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html\n * @see http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html#tag_12_02\n */\nclass ArgvInput extends Input\n{\n    /** @var list<string> */\n    private array $tokens;\n    private array $parsed;\n\n    /** @param list<string>|null $argv */\n    public function __construct(?array $argv = null, ?InputDefinition $definition = null)\n    {\n        $argv ??= $_SERVER['argv'] ?? [];\n\n        foreach ($argv as $arg) {\n            if (!\\is_scalar($arg) && !$arg instanceof \\Stringable) {\n                throw new RuntimeException(\\sprintf('Argument values expected to be all scalars, got \"%s\".', get_debug_type($arg)));\n            }\n        }\n\n        // strip the application name\n        array_shift($argv);\n\n        $this->tokens = $argv;\n\n        parent::__construct($definition);\n    }\n\n    /** @param list<string> $tokens */\n    protected function setTokens(array $tokens): void\n    {\n        $this->tokens = $tokens;\n    }\n\n    protected function parse(): void\n    {\n        $parseOptions = true;\n        $this->parsed = $this->tokens;\n        while (null !== $token = array_shift($this->parsed)) {\n            $parseOptions = $this->parseToken($token, $parseOptions);\n        }\n    }\n\n    protected function parseToken(string $token, bool $parseOptions): bool\n    {\n        if ($parseOptions && '' == $token) {\n            $this->parseArgument($token);\n        } elseif ($parseOptions && '--' == $token) {\n            return false;\n        } elseif ($parseOptions && str_starts_with($token, '--')) {\n            $this->parseLongOption($token);\n        } elseif ($parseOptions && '-' === $token[0] && '-' !== $token) {\n            $this->parseShortOption($token);\n        } else {\n            $this->parseArgument($token);\n        }\n\n        return $parseOptions;\n    }\n\n    /**\n     * Parses a short option.\n     */\n    private function parseShortOption(string $token): void\n    {\n        $name = substr($token, 1);\n\n        if (\\strlen($name) > 1) {\n            if ($this->definition->hasShortcut($name[0]) && $this->definition->getOptionForShortcut($name[0])->acceptValue()) {\n                // an option with a value (with no space)\n                $this->addShortOption($name[0], substr($name, 1));\n            } else {\n                $this->parseShortOptionSet($name);\n            }\n        } else {\n            $this->addShortOption($name, null);\n        }\n    }\n\n    /**\n     * Parses a short option set.\n     *\n     * @throws RuntimeException When option given doesn't exist\n     */\n    private function parseShortOptionSet(string $name): void\n    {\n        $len = \\strlen($name);\n        for ($i = 0; $i < $len; ++$i) {\n            if (!$this->definition->hasShortcut($name[$i])) {\n                $encoding = mb_detect_encoding($name, null, true);\n                throw new RuntimeException(\\sprintf('The \"-%s\" option does not exist.', false === $encoding ? $name[$i] : mb_substr($name, $i, 1, $encoding)));\n            }\n\n            $option = $this->definition->getOptionForShortcut($name[$i]);\n            if ($option->acceptValue()) {\n                $this->addLongOption($option->getName(), $i === $len - 1 ? null : substr($name, $i + 1));\n\n                break;\n            }\n\n            $this->addLongOption($option->getName(), null);\n        }\n    }\n\n    /**\n     * Parses a long option.\n     */\n    private function parseLongOption(string $token): void\n    {\n        $name = substr($token, 2);\n\n        if (false !== $pos = strpos($name, '=')) {\n            if ('' === $value = substr($name, $pos + 1)) {\n                array_unshift($this->parsed, $value);\n            }\n            $this->addLongOption(substr($name, 0, $pos), $value);\n        } else {\n            $this->addLongOption($name, null);\n        }\n    }\n\n    /**\n     * Parses an argument.\n     *\n     * @throws RuntimeException When too many arguments are given\n     */\n    private function parseArgument(string $token): void\n    {\n        $c = \\count($this->arguments);\n\n        // if input is expecting another argument, add it\n        if ($this->definition->hasArgument($c)) {\n            $arg = $this->definition->getArgument($c);\n            $this->arguments[$arg->getName()] = $arg->isArray() ? [$token] : $token;\n\n        // if last argument isArray(), append token to last argument\n        } elseif ($this->definition->hasArgument($c - 1) && $this->definition->getArgument($c - 1)->isArray()) {\n            $arg = $this->definition->getArgument($c - 1);\n            $this->arguments[$arg->getName()][] = $token;\n\n        // unexpected argument\n        } else {\n            $all = $this->definition->getArguments();\n            $symfonyCommandName = null;\n            if (($inputArgument = $all[$key = array_key_first($all)] ?? null) && 'command' === $inputArgument->getName()) {\n                $symfonyCommandName = $this->arguments['command'] ?? null;\n                unset($all[$key]);\n            }\n\n            if (\\count($all)) {\n                if ($symfonyCommandName) {\n                    $message = \\sprintf('Too many arguments to \"%s\" command, expected arguments \"%s\".', $symfonyCommandName, implode('\" \"', array_keys($all)));\n                } else {\n                    $message = \\sprintf('Too many arguments, expected arguments \"%s\".', implode('\" \"', array_keys($all)));\n                }\n            } elseif ($symfonyCommandName) {\n                $message = \\sprintf('No arguments expected for \"%s\" command, got \"%s\".', $symfonyCommandName, $token);\n            } else {\n                $message = \\sprintf('No arguments expected, got \"%s\".', $token);\n            }\n\n            throw new RuntimeException($message);\n        }\n    }\n\n    /**\n     * Adds a short option value.\n     *\n     * @throws RuntimeException When option given doesn't exist\n     */\n    private function addShortOption(string $shortcut, mixed $value): void\n    {\n        if (!$this->definition->hasShortcut($shortcut)) {\n            throw new RuntimeException(\\sprintf('The \"-%s\" option does not exist.', $shortcut));\n        }\n\n        $this->addLongOption($this->definition->getOptionForShortcut($shortcut)->getName(), $value);\n    }\n\n    /**\n     * Adds a long option value.\n     *\n     * @throws RuntimeException When option given doesn't exist\n     */\n    private function addLongOption(string $name, mixed $value): void\n    {\n        if (!$this->definition->hasOption($name)) {\n            if (!$this->definition->hasNegation($name)) {\n                throw new RuntimeException(\\sprintf('The \"--%s\" option does not exist.', $name));\n            }\n\n            $optionName = $this->definition->negationToName($name);\n            if (null !== $value) {\n                throw new RuntimeException(\\sprintf('The \"--%s\" option does not accept a value.', $name));\n            }\n            $this->options[$optionName] = false;\n\n            return;\n        }\n\n        $option = $this->definition->getOption($name);\n\n        if (null !== $value && !$option->acceptValue()) {\n            throw new RuntimeException(\\sprintf('The \"--%s\" option does not accept a value.', $name));\n        }\n\n        if (\\in_array($value, ['', null], true) && $option->acceptValue() && \\count($this->parsed)) {\n            // if option accepts an optional or mandatory argument\n            // let's see if there is one provided\n            $next = array_shift($this->parsed);\n            if ((isset($next[0]) && '-' !== $next[0]) || \\in_array($next, ['', null], true)) {\n                $value = $next;\n            } else {\n                array_unshift($this->parsed, $next);\n            }\n        }\n\n        if (null === $value) {\n            if ($option->isValueRequired()) {\n                throw new RuntimeException(\\sprintf('The \"--%s\" option requires a value.', $name));\n            }\n\n            if (!$option->isArray() && !$option->isValueOptional()) {\n                $value = true;\n            }\n        }\n\n        if ($option->isArray()) {\n            $this->options[$name][] = $value;\n        } else {\n            $this->options[$name] = $value;\n        }\n    }\n\n    public function getFirstArgument(): ?string\n    {\n        $isOption = false;\n        foreach ($this->tokens as $i => $token) {\n            if ($token && '-' === $token[0]) {\n                if (str_contains($token, '=') || !isset($this->tokens[$i + 1])) {\n                    continue;\n                }\n\n                // If it's a long option, consider that everything after \"--\" is the option name.\n                // Otherwise, use the last char (if it's a short option set, only the last one can take a value with space separator)\n                $name = '-' === $token[1] ? substr($token, 2) : substr($token, -1);\n                if (!isset($this->options[$name]) && !$this->definition->hasShortcut($name)) {\n                    // noop\n                } elseif ((isset($this->options[$name]) || isset($this->options[$name = $this->definition->shortcutToName($name)])) && $this->tokens[$i + 1] === $this->options[$name]) {\n                    $isOption = true;\n                }\n\n                continue;\n            }\n\n            if ($isOption) {\n                $isOption = false;\n                continue;\n            }\n\n            return $token;\n        }\n\n        return null;\n    }\n\n    public function hasParameterOption(string|array $values, bool $onlyParams = false): bool\n    {\n        $values = (array) $values;\n\n        foreach ($this->tokens as $token) {\n            if ($onlyParams && '--' === $token) {\n                return false;\n            }\n            foreach ($values as $value) {\n                // Options with values:\n                //   For long options, test for '--option=' at beginning\n                //   For short options, test for '-o' at beginning\n                $leading = str_starts_with($value, '--') ? $value.'=' : $value;\n                if ($token === $value || '' !== $leading && str_starts_with($token, $leading)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public function getParameterOption(string|array $values, string|bool|int|float|array|null $default = false, bool $onlyParams = false): mixed\n    {\n        $values = (array) $values;\n        $tokens = $this->tokens;\n\n        while (0 < \\count($tokens)) {\n            $token = array_shift($tokens);\n            if ($onlyParams && '--' === $token) {\n                return $default;\n            }\n\n            foreach ($values as $value) {\n                if ($token === $value) {\n                    return array_shift($tokens);\n                }\n                // Options with values:\n                //   For long options, test for '--option=' at beginning\n                //   For short options, test for '-o' at beginning\n                $leading = str_starts_with($value, '--') ? $value.'=' : $value;\n                if ('' !== $leading && str_starts_with($token, $leading)) {\n                    return substr($token, \\strlen($leading));\n                }\n            }\n        }\n\n        return $default;\n    }\n\n    /**\n     * Returns un-parsed and not validated tokens.\n     *\n     * @param bool $strip Whether to return the raw parameters (false) or the values after the command name (true)\n     *\n     * @return list<string>\n     */\n    public function getRawTokens(bool $strip = false): array\n    {\n        if (!$strip) {\n            return $this->tokens;\n        }\n\n        $parameters = [];\n        $keep = false;\n        foreach ($this->tokens as $value) {\n            if (!$keep && $value === $this->getFirstArgument()) {\n                $keep = true;\n\n                continue;\n            }\n            if ($keep) {\n                $parameters[] = $value;\n            }\n        }\n\n        return $parameters;\n    }\n\n    /**\n     * Returns a stringified representation of the args passed to the command.\n     */\n    public function __toString(): string\n    {\n        $tokens = array_map(function ($token) {\n            if (preg_match('{^(-[^=]+=)(.+)}', $token, $match)) {\n                return $match[1].$this->escapeToken($match[2]);\n            }\n\n            if ($token && '-' !== $token[0]) {\n                return $this->escapeToken($token);\n            }\n\n            return $token;\n        }, $this->tokens);\n\n        return implode(' ', $tokens);\n    }\n}\n\n\n--- File: 63 # Input/InputDefinition.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Input;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\n\n/**\n * A InputDefinition represents a set of valid command line arguments and options.\n *\n * Usage:\n *\n *     $definition = new InputDefinition([\n *         new InputArgument('name', InputArgument::REQUIRED),\n *         new InputOption('foo', 'f', InputOption::VALUE_REQUIRED),\n *     ]);\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass InputDefinition\n{\n    private array $arguments = [];\n    private int $requiredCount = 0;\n    private ?InputArgument $lastArrayArgument = null;\n    private ?InputArgument $lastOptionalArgument = null;\n    private array $options = [];\n    private array $negations = [];\n    private array $shortcuts = [];\n\n    /**\n     * @param array $definition An array of InputArgument and InputOption instance\n     */\n    public function __construct(array $definition = [])\n    {\n        $this->setDefinition($definition);\n    }\n\n    /**\n     * Sets the definition of the input.\n     */\n    public function setDefinition(array $definition): void\n    {\n        $arguments = [];\n        $options = [];\n        foreach ($definition as $item) {\n            if ($item instanceof InputOption) {\n                $options[] = $item;\n            } else {\n                $arguments[] = $item;\n            }\n        }\n\n        $this->setArguments($arguments);\n        $this->setOptions($options);\n    }\n\n    /**\n     * Sets the InputArgument objects.\n     *\n     * @param InputArgument[] $arguments An array of InputArgument objects\n     */\n    public function setArguments(array $arguments = []): void\n    {\n        $this->arguments = [];\n        $this->requiredCount = 0;\n        $this->lastOptionalArgument = null;\n        $this->lastArrayArgument = null;\n        $this->addArguments($arguments);\n    }\n\n    /**\n     * Adds an array of InputArgument objects.\n     *\n     * @param InputArgument[] $arguments An array of InputArgument objects\n     */\n    public function addArguments(?array $arguments = []): void\n    {\n        if (null !== $arguments) {\n            foreach ($arguments as $argument) {\n                $this->addArgument($argument);\n            }\n        }\n    }\n\n    /**\n     * @throws LogicException When incorrect argument is given\n     */\n    public function addArgument(InputArgument $argument): void\n    {\n        if (isset($this->arguments[$argument->getName()])) {\n            throw new LogicException(\\sprintf('An argument with name \"%s\" already exists.', $argument->getName()));\n        }\n\n        if (null !== $this->lastArrayArgument) {\n            throw new LogicException(\\sprintf('Cannot add a required argument \"%s\" after an array argument \"%s\".', $argument->getName(), $this->lastArrayArgument->getName()));\n        }\n\n        if ($argument->isRequired() && null !== $this->lastOptionalArgument) {\n            throw new LogicException(\\sprintf('Cannot add a required argument \"%s\" after an optional one \"%s\".', $argument->getName(), $this->lastOptionalArgument->getName()));\n        }\n\n        if ($argument->isArray()) {\n            $this->lastArrayArgument = $argument;\n        }\n\n        if ($argument->isRequired()) {\n            ++$this->requiredCount;\n        } else {\n            $this->lastOptionalArgument = $argument;\n        }\n\n        $this->arguments[$argument->getName()] = $argument;\n    }\n\n    /**\n     * Returns an InputArgument by name or by position.\n     *\n     * @throws InvalidArgumentException When argument given doesn't exist\n     */\n    public function getArgument(string|int $name): InputArgument\n    {\n        if (!$this->hasArgument($name)) {\n            throw new InvalidArgumentException(\\sprintf('The \"%s\" argument does not exist.', $name));\n        }\n\n        $arguments = \\is_int($name) ? array_values($this->arguments) : $this->arguments;\n\n        return $arguments[$name];\n    }\n\n    /**\n     * Returns true if an InputArgument object exists by name or position.\n     */\n    public function hasArgument(string|int $name): bool\n    {\n        $arguments = \\is_int($name) ? array_values($this->arguments) : $this->arguments;\n\n        return isset($arguments[$name]);\n    }\n\n    /**\n     * Gets the array of InputArgument objects.\n     *\n     * @return InputArgument[]\n     */\n    public function getArguments(): array\n    {\n        return $this->arguments;\n    }\n\n    /**\n     * Returns the number of InputArguments.\n     */\n    public function getArgumentCount(): int\n    {\n        return null !== $this->lastArrayArgument ? \\PHP_INT_MAX : \\count($this->arguments);\n    }\n\n    /**\n     * Returns the number of required InputArguments.\n     */\n    public function getArgumentRequiredCount(): int\n    {\n        return $this->requiredCount;\n    }\n\n    /**\n     * @return array<string|bool|int|float|array|null>\n     */\n    public function getArgumentDefaults(): array\n    {\n        $values = [];\n        foreach ($this->arguments as $argument) {\n            $values[$argument->getName()] = $argument->getDefault();\n        }\n\n        return $values;\n    }\n\n    /**\n     * Sets the InputOption objects.\n     *\n     * @param InputOption[] $options An array of InputOption objects\n     */\n    public function setOptions(array $options = []): void\n    {\n        $this->options = [];\n        $this->shortcuts = [];\n        $this->negations = [];\n        $this->addOptions($options);\n    }\n\n    /**\n     * Adds an array of InputOption objects.\n     *\n     * @param InputOption[] $options An array of InputOption objects\n     */\n    public function addOptions(array $options = []): void\n    {\n        foreach ($options as $option) {\n            $this->addOption($option);\n        }\n    }\n\n    /**\n     * @throws LogicException When option given already exist\n     */\n    public function addOption(InputOption $option): void\n    {\n        if (isset($this->options[$option->getName()]) && !$option->equals($this->options[$option->getName()])) {\n            throw new LogicException(\\sprintf('An option named \"%s\" already exists.', $option->getName()));\n        }\n        if (isset($this->negations[$option->getName()])) {\n            throw new LogicException(\\sprintf('An option named \"%s\" already exists.', $option->getName()));\n        }\n\n        if ($option->getShortcut()) {\n            foreach (explode('|', $option->getShortcut()) as $shortcut) {\n                if (isset($this->shortcuts[$shortcut]) && !$option->equals($this->options[$this->shortcuts[$shortcut]])) {\n                    throw new LogicException(\\sprintf('An option with shortcut \"%s\" already exists.', $shortcut));\n                }\n            }\n        }\n\n        $this->options[$option->getName()] = $option;\n        if ($option->getShortcut()) {\n            foreach (explode('|', $option->getShortcut()) as $shortcut) {\n                $this->shortcuts[$shortcut] = $option->getName();\n            }\n        }\n\n        if ($option->isNegatable()) {\n            $negatedName = 'no-'.$option->getName();\n            if (isset($this->options[$negatedName])) {\n                throw new LogicException(\\sprintf('An option named \"%s\" already exists.', $negatedName));\n            }\n            $this->negations[$negatedName] = $option->getName();\n        }\n    }\n\n    /**\n     * Returns an InputOption by name.\n     *\n     * @throws InvalidArgumentException When option given doesn't exist\n     */\n    public function getOption(string $name): InputOption\n    {\n        if (!$this->hasOption($name)) {\n            throw new InvalidArgumentException(\\sprintf('The \"--%s\" option does not exist.', $name));\n        }\n\n        return $this->options[$name];\n    }\n\n    /**\n     * Returns true if an InputOption object exists by name.\n     *\n     * This method can't be used to check if the user included the option when\n     * executing the command (use getOption() instead).\n     */\n    public function hasOption(string $name): bool\n    {\n        return isset($this->options[$name]);\n    }\n\n    /**\n     * Gets the array of InputOption objects.\n     *\n     * @return InputOption[]\n     */\n    public function getOptions(): array\n    {\n        return $this->options;\n    }\n\n    /**\n     * Returns true if an InputOption object exists by shortcut.\n     */\n    public function hasShortcut(string $name): bool\n    {\n        return isset($this->shortcuts[$name]);\n    }\n\n    /**\n     * Returns true if an InputOption object exists by negated name.\n     */\n    public function hasNegation(string $name): bool\n    {\n        return isset($this->negations[$name]);\n    }\n\n    /**\n     * Gets an InputOption by shortcut.\n     */\n    public function getOptionForShortcut(string $shortcut): InputOption\n    {\n        return $this->getOption($this->shortcutToName($shortcut));\n    }\n\n    /**\n     * @return array<string|bool|int|float|array|null>\n     */\n    public function getOptionDefaults(): array\n    {\n        $values = [];\n        foreach ($this->options as $option) {\n            $values[$option->getName()] = $option->getDefault();\n        }\n\n        return $values;\n    }\n\n    /**\n     * Returns the InputOption name given a shortcut.\n     *\n     * @throws InvalidArgumentException When option given does not exist\n     *\n     * @internal\n     */\n    public function shortcutToName(string $shortcut): string\n    {\n        if (!isset($this->shortcuts[$shortcut])) {\n            throw new InvalidArgumentException(\\sprintf('The \"-%s\" option does not exist.', $shortcut));\n        }\n\n        return $this->shortcuts[$shortcut];\n    }\n\n    /**\n     * Returns the InputOption name given a negation.\n     *\n     * @throws InvalidArgumentException When option given does not exist\n     *\n     * @internal\n     */\n    public function negationToName(string $negation): string\n    {\n        if (!isset($this->negations[$negation])) {\n            throw new InvalidArgumentException(\\sprintf('The \"--%s\" option does not exist.', $negation));\n        }\n\n        return $this->negations[$negation];\n    }\n\n    /**\n     * Gets the synopsis.\n     */\n    public function getSynopsis(bool $short = false): string\n    {\n        $elements = [];\n\n        if ($short && $this->getOptions()) {\n            $elements[] = '[options]';\n        } elseif (!$short) {\n            foreach ($this->getOptions() as $option) {\n                $value = '';\n                if ($option->acceptValue()) {\n                    $value = \\sprintf(\n                        ' %s%s%s',\n                        $option->isValueOptional() ? '[' : '',\n                        strtoupper($option->getName()),\n                        $option->isValueOptional() ? ']' : ''\n                    );\n                }\n\n                $shortcut = $option->getShortcut() ? \\sprintf('-%s|', $option->getShortcut()) : '';\n                $negation = $option->isNegatable() ? \\sprintf('|--no-%s', $option->getName()) : '';\n                $elements[] = \\sprintf('[%s--%s%s%s]', $shortcut, $option->getName(), $value, $negation);\n            }\n        }\n\n        if (\\count($elements) && $this->getArguments()) {\n            $elements[] = '[--]';\n        }\n\n        $tail = '';\n        foreach ($this->getArguments() as $argument) {\n            $element = '<'.$argument->getName().'>';\n            if ($argument->isArray()) {\n                $element .= '...';\n            }\n\n            if (!$argument->isRequired()) {\n                $element = '['.$element;\n                $tail .= ']';\n            }\n\n            $elements[] = $element;\n        }\n\n        return implode(' ', $elements).$tail;\n    }\n}\n\n\n--- File: 82 # Tester/ApplicationTester.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Tester;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\n\n/**\n * Eases the testing of console applications.\n *\n * When testing an application, don't forget to disable the auto exit flag:\n *\n *     $application = new Application();\n *     $application->setAutoExit(false);\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass ApplicationTester\n{\n    use TesterTrait;\n\n    public function __construct(\n        private Application $application,\n    ) {\n    }\n\n    /**\n     * Executes the application.\n     *\n     * Available options:\n     *\n     *  * interactive:               Sets the input interactive flag\n     *  * decorated:                 Sets the output decorated flag\n     *  * verbosity:                 Sets the output verbosity flag\n     *  * capture_stderr_separately: Make output of stdOut and stdErr separately available\n     *\n     * @return int The command exit code\n     */\n    public function run(array $input, array $options = []): int\n    {\n        $prevShellVerbosity = getenv('SHELL_VERBOSITY');\n\n        try {\n            $this->input = new ArrayInput($input);\n            if (isset($options['interactive'])) {\n                $this->input->setInteractive($options['interactive']);\n            }\n\n            if ($this->inputs) {\n                $this->input->setStream(self::createStream($this->inputs));\n            }\n\n            $this->initOutput($options);\n\n            return $this->statusCode = $this->application->run($this->input, $this->output);\n        } finally {\n            // SHELL_VERBOSITY is set by Application::configureIO so we need to unset/reset it\n            // to its previous value to avoid one test's verbosity to spread to the following tests\n            if (false === $prevShellVerbosity) {\n                if (\\function_exists('putenv')) {\n                    @putenv('SHELL_VERBOSITY');\n                }\n                unset($_ENV['SHELL_VERBOSITY']);\n                unset($_SERVER['SHELL_VERBOSITY']);\n            } else {\n                if (\\function_exists('putenv')) {\n                    @putenv('SHELL_VERBOSITY='.$prevShellVerbosity);\n                }\n                $_ENV['SHELL_VERBOSITY'] = $prevShellVerbosity;\n                $_SERVER['SHELL_VERBOSITY'] = $prevShellVerbosity;\n            }\n        }\n    }\n}\n\n\n--- File: 83 # Tester/CommandCompletionTester.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Tester;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Completion\\CompletionInput;\nuse Symfony\\Component\\Console\\Completion\\CompletionSuggestions;\n\n/**\n * Eases the testing of command completion.\n *\n * @author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>\n */\nclass CommandCompletionTester\n{\n    public function __construct(\n        private Command $command,\n    ) {\n    }\n\n    /**\n     * Create completion suggestions from input tokens.\n     */\n    public function complete(array $input): array\n    {\n        $currentIndex = \\count($input);\n        if ('' === end($input)) {\n            array_pop($input);\n        }\n        array_unshift($input, $this->command->getName());\n\n        $completionInput = CompletionInput::fromTokens($input, $currentIndex);\n        $completionInput->bind($this->command->getDefinition());\n        $suggestions = new CompletionSuggestions();\n\n        $this->command->complete($completionInput, $suggestions);\n\n        $options = [];\n        foreach ($suggestions->getOptionSuggestions() as $option) {\n            $options[] = '--'.$option->getName();\n        }\n\n        return array_map('strval', array_merge($options, $suggestions->getValueSuggestions()));\n    }\n}\n\n\n--- File: 104 # Helper/Helper.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\nuse Symfony\\Component\\String\\UnicodeString;\n\n/**\n * Helper is the base class for all helper classes.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nabstract class Helper implements HelperInterface\n{\n    protected ?HelperSet $helperSet = null;\n\n    public function setHelperSet(?HelperSet $helperSet): void\n    {\n        $this->helperSet = $helperSet;\n    }\n\n    public function getHelperSet(): ?HelperSet\n    {\n        return $this->helperSet;\n    }\n\n    /**\n     * Returns the width of a string, using mb_strwidth if it is available.\n     * The width is how many characters positions the string will use.\n     */\n    public static function width(?string $string): int\n    {\n        $string ??= '';\n\n        if (preg_match('//u', $string)) {\n            return (new UnicodeString($string))->width(false);\n        }\n\n        if (false === $encoding = mb_detect_encoding($string, null, true)) {\n            return \\strlen($string);\n        }\n\n        return mb_strwidth($string, $encoding);\n    }\n\n    /**\n     * Returns the length of a string, using mb_strlen if it is available.\n     * The length is related to how many bytes the string will use.\n     */\n    public static function length(?string $string): int\n    {\n        $string ??= '';\n\n        if (preg_match('//u', $string)) {\n            return (new UnicodeString($string))->length();\n        }\n\n        if (false === $encoding = mb_detect_encoding($string, null, true)) {\n            return \\strlen($string);\n        }\n\n        return mb_strlen($string, $encoding);\n    }\n\n    /**\n     * Returns the subset of a string, using mb_substr if it is available.\n     */\n    public static function substr(?string $string, int $from, ?int $length = null): string\n    {\n        $string ??= '';\n\n        if (false === $encoding = mb_detect_encoding($string, null, true)) {\n            return substr($string, $from, $length);\n        }\n\n        return mb_substr($string, $from, $length, $encoding);\n    }\n\n    public static function formatTime(int|float $secs, int $precision = 1): string\n    {\n        $secs = (int) floor($secs);\n\n        if (0 === $secs) {\n            return '< 1 sec';\n        }\n\n        static $timeFormats = [\n            [1, '1 sec', 'secs'],\n            [60, '1 min', 'mins'],\n            [3600, '1 hr', 'hrs'],\n            [86400, '1 day', 'days'],\n        ];\n\n        $times = [];\n        foreach ($timeFormats as $index => $format) {\n            $seconds = isset($timeFormats[$index + 1]) ? $secs % $timeFormats[$index + 1][0] : $secs;\n\n            if (isset($times[$index - $precision])) {\n                unset($times[$index - $precision]);\n            }\n\n            if (0 === $seconds) {\n                continue;\n            }\n\n            $unitCount = ($seconds / $format[0]);\n            $times[$index] = 1 === $unitCount ? $format[1] : $unitCount.' '.$format[2];\n\n            if ($secs === $seconds) {\n                break;\n            }\n\n            $secs -= $seconds;\n        }\n\n        return implode(', ', array_reverse($times));\n    }\n\n    public static function formatMemory(int $memory): string\n    {\n        if ($memory >= 1024 * 1024 * 1024) {\n            return \\sprintf('%.1f GiB', $memory / 1024 / 1024 / 1024);\n        }\n\n        if ($memory >= 1024 * 1024) {\n            return \\sprintf('%.1f MiB', $memory / 1024 / 1024);\n        }\n\n        if ($memory >= 1024) {\n            return \\sprintf('%d KiB', $memory / 1024);\n        }\n\n        return \\sprintf('%d B', $memory);\n    }\n\n    public static function removeDecoration(OutputFormatterInterface $formatter, ?string $string): string\n    {\n        $isDecorated = $formatter->isDecorated();\n        $formatter->setDecorated(false);\n        // remove <...> formatting\n        $string = $formatter->format($string ?? '');\n        // remove already formatted characters\n        $string = preg_replace(\"/\\033\\[[^m]*m/\", '', $string ?? '');\n        // remove terminal hyperlinks\n        $string = preg_replace('/\\\\033]8;[^;]*;[^\\\\033]*\\\\033\\\\\\\\/', '', $string ?? '');\n        $formatter->setDecorated($isDecorated);\n\n        return $string;\n    }\n}\n\n\n--- File: 108 # Helper/SymfonyQuestionHelper.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatter;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion;\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\nuse Symfony\\Component\\Console\\Style\\SymfonyStyle;\n\n/**\n * Symfony Style Guide compliant question helper.\n *\n * @author Kevin Bond <kevinbond@gmail.com>\n */\nclass SymfonyQuestionHelper extends QuestionHelper\n{\n    protected function writePrompt(OutputInterface $output, Question $question): void\n    {\n        $text = OutputFormatter::escapeTrailingBackslash($question->getQuestion());\n        $default = $question->getDefault();\n\n        if ($question->isMultiline()) {\n            $text .= \\sprintf(' (press %s to continue)', $this->getEofShortcut());\n        }\n\n        switch (true) {\n            case null === $default:\n                $text = \\sprintf(' <info>%s</info>:', $text);\n\n                break;\n\n            case $question instanceof ConfirmationQuestion:\n                $text = \\sprintf(' <info>%s (yes/no)</info> [<comment>%s</comment>]:', $text, $default ? 'yes' : 'no');\n\n                break;\n\n            case $question instanceof ChoiceQuestion && $question->isMultiselect():\n                $choices = $question->getChoices();\n                $default = explode(',', $default);\n\n                foreach ($default as $key => $value) {\n                    $default[$key] = $choices[trim($value)];\n                }\n\n                $text = \\sprintf(' <info>%s</info> [<comment>%s</comment>]:', $text, OutputFormatter::escape(implode(', ', $default)));\n\n                break;\n\n            case $question instanceof ChoiceQuestion:\n                $choices = $question->getChoices();\n                $text = \\sprintf(' <info>%s</info> [<comment>%s</comment>]:', $text, OutputFormatter::escape($choices[$default] ?? $default));\n\n                break;\n\n            default:\n                $text = \\sprintf(' <info>%s</info> [<comment>%s</comment>]:', $text, OutputFormatter::escape($default));\n        }\n\n        $output->writeln($text);\n\n        $prompt = ' > ';\n\n        if ($question instanceof ChoiceQuestion) {\n            $output->writeln($this->formatChoiceQuestionChoices($question, 'comment'));\n\n            $prompt = $question->getPrompt();\n        }\n\n        $output->write($prompt);\n    }\n\n    protected function writeError(OutputInterface $output, \\Exception $error): void\n    {\n        if ($output instanceof SymfonyStyle) {\n            $output->newLine();\n            $output->error($error->getMessage());\n\n            return;\n        }\n\n        parent::writeError($output, $error);\n    }\n\n    private function getEofShortcut(): string\n    {\n        if ('Windows' === \\PHP_OS_FAMILY) {\n            return '<comment>Ctrl+Z</comment> then <comment>Enter</comment>';\n        }\n\n        return '<comment>Ctrl+D</comment>';\n    }\n}\n\n\n--- File: 109 # Helper/TableRows.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\n/**\n * @internal\n */\nclass TableRows implements \\IteratorAggregate\n{\n    public function __construct(\n        private \\Closure $generator,\n    ) {\n    }\n\n    public function getIterator(): \\Traversable\n    {\n        return ($this->generator)();\n    }\n}\n\n\n--- File: 111 # Helper/OutputWrapper.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\n/**\n * Simple output wrapper for \"tagged outputs\" instead of wordwrap(). This solution is based on a StackOverflow\n * answer: https://stackoverflow.com/a/20434776/1476819 from user557597 (alias SLN).\n *\n *  (?:\n *       # -- Words/Characters\n *       (                       # (1 start)\n *            (?>                     # Atomic Group - Match words with valid breaks\n *                 .{1,16}                 #  1-N characters\n *                                         #  Followed by one of 4 prioritized, non-linebreak whitespace\n *                 (?:                     #  break types:\n *                      (?<= [^\\S\\r\\n] )        # 1. - Behind a non-linebreak whitespace\n *                      [^\\S\\r\\n]?              #      ( optionally accept an extra non-linebreak whitespace )\n *                   |  (?= \\r? \\n )            # 2. - Ahead a linebreak\n *                   |  $                       # 3. - EOS\n *                   |  [^\\S\\r\\n]               # 4. - Accept an extra non-linebreak whitespace\n *                 )\n *            )                       # End atomic group\n *         |\n *            .{1,16}                 # No valid word breaks, just break on the N'th character\n *       )                       # (1 end)\n *       (?: \\r? \\n )?           # Optional linebreak after Words/Characters\n *    |\n *       # -- Or, Linebreak\n *       (?: \\r? \\n | $ )        # Stand alone linebreak or at EOS\n *  )\n *\n * @author Kriszti\u00e1n Ferenczi <ferenczi.krisztian@gmail.com>\n *\n * @see https://stackoverflow.com/a/20434776/1476819\n */\nfinal class OutputWrapper\n{\n    private const TAG_OPEN_REGEX_SEGMENT = '[a-z](?:[^\\\\\\\\<>]*+ | \\\\\\\\.)*';\n    private const TAG_CLOSE_REGEX_SEGMENT = '[a-z][^<>]*+';\n    private const URL_PATTERN = 'https?://\\S+';\n\n    public function __construct(\n        private bool $allowCutUrls = false,\n    ) {\n    }\n\n    public function wrap(string $text, int $width, string $break = \"\\n\"): string\n    {\n        if (!$width) {\n            return $text;\n        }\n\n        $tagPattern = \\sprintf('<(?:(?:%s)|/(?:%s)?)>', self::TAG_OPEN_REGEX_SEGMENT, self::TAG_CLOSE_REGEX_SEGMENT);\n        $limitPattern = \"{1,$width}\";\n        $patternBlocks = [$tagPattern];\n        if (!$this->allowCutUrls) {\n            $patternBlocks[] = self::URL_PATTERN;\n        }\n        $patternBlocks[] = '.';\n        $blocks = implode('|', $patternBlocks);\n        $rowPattern = \"(?:$blocks)$limitPattern\";\n        $pattern = \\sprintf('#(?:((?>(%1$s)((?<=[^\\S\\r\\n])[^\\S\\r\\n]?|(?=\\r?\\n)|$|[^\\S\\r\\n]))|(%1$s))(?:\\r?\\n)?|(?:\\r?\\n|$))#imux', $rowPattern);\n        $output = rtrim(preg_replace($pattern, '\\\\1'.$break, $text), $break);\n\n        return str_replace(' '.$break, $break, $output);\n    }\n}\n\n\n--- File: 112 # Helper/TableStyle.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\n\n/**\n * Defines the styles for a Table.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n * @author \u0421\u0430\u0448\u0430 \u0421\u0442\u0430\u043c\u0435\u043d\u043a\u043e\u0432\u0438\u045b <umpirsky@gmail.com>\n * @author Dany Maillard <danymaillard93b@gmail.com>\n */\nclass TableStyle\n{\n    private string $paddingChar = ' ';\n    private string $horizontalOutsideBorderChar = '-';\n    private string $horizontalInsideBorderChar = '-';\n    private string $verticalOutsideBorderChar = '|';\n    private string $verticalInsideBorderChar = '|';\n    private string $crossingChar = '+';\n    private string $crossingTopRightChar = '+';\n    private string $crossingTopMidChar = '+';\n    private string $crossingTopLeftChar = '+';\n    private string $crossingMidRightChar = '+';\n    private string $crossingBottomRightChar = '+';\n    private string $crossingBottomMidChar = '+';\n    private string $crossingBottomLeftChar = '+';\n    private string $crossingMidLeftChar = '+';\n    private string $crossingTopLeftBottomChar = '+';\n    private string $crossingTopMidBottomChar = '+';\n    private string $crossingTopRightBottomChar = '+';\n    private string $headerTitleFormat = '<fg=black;bg=white;options=bold> %s </>';\n    private string $footerTitleFormat = '<fg=black;bg=white;options=bold> %s </>';\n    private string $cellHeaderFormat = '<info>%s</info>';\n    private string $cellRowFormat = '%s';\n    private string $cellRowContentFormat = ' %s ';\n    private string $borderFormat = '%s';\n    private int $padType = \\STR_PAD_RIGHT;\n\n    /**\n     * Sets padding character, used for cell padding.\n     *\n     * @return $this\n     */\n    public function setPaddingChar(string $paddingChar): static\n    {\n        if (!$paddingChar) {\n            throw new LogicException('The padding char must not be empty.');\n        }\n\n        $this->paddingChar = $paddingChar;\n\n        return $this;\n    }\n\n    /**\n     * Gets padding character, used for cell padding.\n     */\n    public function getPaddingChar(): string\n    {\n        return $this->paddingChar;\n    }\n\n    /**\n     * Sets horizontal border characters.\n     *\n     * <code>\n     * \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n     * 1 ISBN          2 Title                    \u2502 Author           \u2551\n     * \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n     * \u2551 99921-58-10-7 \u2502 Divine Comedy            \u2502 Dante Alighieri  \u2551\n     * \u2551 9971-5-0210-0 \u2502 A Tale of Two Cities     \u2502 Charles Dickens  \u2551\n     * \u2551 960-425-059-0 \u2502 The Lord of the Rings    \u2502 J. R. R. Tolkien \u2551\n     * \u2551 80-902734-1-6 \u2502 And Then There Were None \u2502 Agatha Christie  \u2551\n     * \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n     * </code>\n     *\n     * @return $this\n     */\n    public function setHorizontalBorderChars(string $outside, ?string $inside = null): static\n    {\n        $this->horizontalOutsideBorderChar = $outside;\n        $this->horizontalInsideBorderChar = $inside ?? $outside;\n\n        return $this;\n    }\n\n    /**\n     * Sets vertical border characters.\n     *\n     * <code>\n     * \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n     * \u2551 ISBN          \u2502 Title                    \u2502 Author           \u2551\n     * \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u25501\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n     * \u2551 99921-58-10-7 \u2502 Divine Comedy            \u2502 Dante Alighieri  \u2551\n     * \u2551 9971-5-0210-0 \u2502 A Tale of Two Cities     \u2502 Charles Dickens  \u2551\n     * \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u25002\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562\n     * \u2551 960-425-059-0 \u2502 The Lord of the Rings    \u2502 J. R. R. Tolkien \u2551\n     * \u2551 80-902734-1-6 \u2502 And Then There Were None \u2502 Agatha Christie  \u2551\n     * \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n     * </code>\n     *\n     * @return $this\n     */\n    public function setVerticalBorderChars(string $outside, ?string $inside = null): static\n    {\n        $this->verticalOutsideBorderChar = $outside;\n        $this->verticalInsideBorderChar = $inside ?? $outside;\n\n        return $this;\n    }\n\n    /**\n     * Gets border characters.\n     *\n     * @internal\n     */\n    public function getBorderChars(): array\n    {\n        return [\n            $this->horizontalOutsideBorderChar,\n            $this->verticalOutsideBorderChar,\n            $this->horizontalInsideBorderChar,\n            $this->verticalInsideBorderChar,\n        ];\n    }\n\n    /**\n     * Sets crossing characters.\n     *\n     * Example:\n     * <code>\n     * 1\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25502\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25502\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25503\n     * \u2551 ISBN          \u2502 Title                    \u2502 Author           \u2551\n     * 8'\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25500'\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25500'\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25504'\n     * \u2551 99921-58-10-7 \u2502 Divine Comedy            \u2502 Dante Alighieri  \u2551\n     * \u2551 9971-5-0210-0 \u2502 A Tale of Two Cities     \u2502 Charles Dickens  \u2551\n     * 8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25000\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25000\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25004\n     * \u2551 960-425-059-0 \u2502 The Lord of the Rings    \u2502 J. R. R. Tolkien \u2551\n     * \u2551 80-902734-1-6 \u2502 And Then There Were None \u2502 Agatha Christie  \u2551\n     * 7\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25506\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25506\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25505\n     * </code>\n     *\n     * @param string      $cross          Crossing char (see #0 of example)\n     * @param string      $topLeft        Top left char (see #1 of example)\n     * @param string      $topMid         Top mid char (see #2 of example)\n     * @param string      $topRight       Top right char (see #3 of example)\n     * @param string      $midRight       Mid right char (see #4 of example)\n     * @param string      $bottomRight    Bottom right char (see #5 of example)\n     * @param string      $bottomMid      Bottom mid char (see #6 of example)\n     * @param string      $bottomLeft     Bottom left char (see #7 of example)\n     * @param string      $midLeft        Mid left char (see #8 of example)\n     * @param string|null $topLeftBottom  Top left bottom char (see #8' of example), equals to $midLeft if null\n     * @param string|null $topMidBottom   Top mid bottom char (see #0' of example), equals to $cross if null\n     * @param string|null $topRightBottom Top right bottom char (see #4' of example), equals to $midRight if null\n     *\n     * @return $this\n     */\n    public function setCrossingChars(string $cross, string $topLeft, string $topMid, string $topRight, string $midRight, string $bottomRight, string $bottomMid, string $bottomLeft, string $midLeft, ?string $topLeftBottom = null, ?string $topMidBottom = null, ?string $topRightBottom = null): static\n    {\n        $this->crossingChar = $cross;\n        $this->crossingTopLeftChar = $topLeft;\n        $this->crossingTopMidChar = $topMid;\n        $this->crossingTopRightChar = $topRight;\n        $this->crossingMidRightChar = $midRight;\n        $this->crossingBottomRightChar = $bottomRight;\n        $this->crossingBottomMidChar = $bottomMid;\n        $this->crossingBottomLeftChar = $bottomLeft;\n        $this->crossingMidLeftChar = $midLeft;\n        $this->crossingTopLeftBottomChar = $topLeftBottom ?? $midLeft;\n        $this->crossingTopMidBottomChar = $topMidBottom ?? $cross;\n        $this->crossingTopRightBottomChar = $topRightBottom ?? $midRight;\n\n        return $this;\n    }\n\n    /**\n     * Sets default crossing character used for each cross.\n     *\n     * @see {@link setCrossingChars()} for setting each crossing individually.\n     */\n    public function setDefaultCrossingChar(string $char): self\n    {\n        return $this->setCrossingChars($char, $char, $char, $char, $char, $char, $char, $char, $char);\n    }\n\n    /**\n     * Gets crossing character.\n     */\n    public function getCrossingChar(): string\n    {\n        return $this->crossingChar;\n    }\n\n    /**\n     * Gets crossing characters.\n     *\n     * @internal\n     */\n    public function getCrossingChars(): array\n    {\n        return [\n            $this->crossingChar,\n            $this->crossingTopLeftChar,\n            $this->crossingTopMidChar,\n            $this->crossingTopRightChar,\n            $this->crossingMidRightChar,\n            $this->crossingBottomRightChar,\n            $this->crossingBottomMidChar,\n            $this->crossingBottomLeftChar,\n            $this->crossingMidLeftChar,\n            $this->crossingTopLeftBottomChar,\n            $this->crossingTopMidBottomChar,\n            $this->crossingTopRightBottomChar,\n        ];\n    }\n\n    /**\n     * Sets header cell format.\n     *\n     * @return $this\n     */\n    public function setCellHeaderFormat(string $cellHeaderFormat): static\n    {\n        $this->cellHeaderFormat = $cellHeaderFormat;\n\n        return $this;\n    }\n\n    /**\n     * Gets header cell format.\n     */\n    public function getCellHeaderFormat(): string\n    {\n        return $this->cellHeaderFormat;\n    }\n\n    /**\n     * Sets row cell format.\n     *\n     * @return $this\n     */\n    public function setCellRowFormat(string $cellRowFormat): static\n    {\n        $this->cellRowFormat = $cellRowFormat;\n\n        return $this;\n    }\n\n    /**\n     * Gets row cell format.\n     */\n    public function getCellRowFormat(): string\n    {\n        return $this->cellRowFormat;\n    }\n\n    /**\n     * Sets row cell content format.\n     *\n     * @return $this\n     */\n    public function setCellRowContentFormat(string $cellRowContentFormat): static\n    {\n        $this->cellRowContentFormat = $cellRowContentFormat;\n\n        return $this;\n    }\n\n    /**\n     * Gets row cell content format.\n     */\n    public function getCellRowContentFormat(): string\n    {\n        return $this->cellRowContentFormat;\n    }\n\n    /**\n     * Sets table border format.\n     *\n     * @return $this\n     */\n    public function setBorderFormat(string $borderFormat): static\n    {\n        $this->borderFormat = $borderFormat;\n\n        return $this;\n    }\n\n    /**\n     * Gets table border format.\n     */\n    public function getBorderFormat(): string\n    {\n        return $this->borderFormat;\n    }\n\n    /**\n     * Sets cell padding type.\n     *\n     * @return $this\n     */\n    public function setPadType(int $padType): static\n    {\n        if (!\\in_array($padType, [\\STR_PAD_LEFT, \\STR_PAD_RIGHT, \\STR_PAD_BOTH], true)) {\n            throw new InvalidArgumentException('Invalid padding type. Expected one of (STR_PAD_LEFT, STR_PAD_RIGHT, STR_PAD_BOTH).');\n        }\n\n        $this->padType = $padType;\n\n        return $this;\n    }\n\n    /**\n     * Gets cell padding type.\n     */\n    public function getPadType(): int\n    {\n        return $this->padType;\n    }\n\n    public function getHeaderTitleFormat(): string\n    {\n        return $this->headerTitleFormat;\n    }\n\n    /**\n     * @return $this\n     */\n    public function setHeaderTitleFormat(string $format): static\n    {\n        $this->headerTitleFormat = $format;\n\n        return $this;\n    }\n\n    public function getFooterTitleFormat(): string\n    {\n        return $this->footerTitleFormat;\n    }\n\n    /**\n     * @return $this\n     */\n    public function setFooterTitleFormat(string $format): static\n    {\n        $this->footerTitleFormat = $format;\n\n        return $this;\n    }\n}\n\n\n--- File: 113 # Event/ConsoleSignalEvent.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * @author marie <marie@users.noreply.github.com>\n */\nfinal class ConsoleSignalEvent extends ConsoleEvent\n{\n    public function __construct(\n        Command $command,\n        InputInterface $input,\n        OutputInterface $output,\n        private int $handlingSignal,\n        private int|false $exitCode = 0,\n    ) {\n        parent::__construct($command, $input, $output);\n    }\n\n    public function getHandlingSignal(): int\n    {\n        return $this->handlingSignal;\n    }\n\n    public function setExitCode(int $exitCode): void\n    {\n        if ($exitCode < 0 || $exitCode > 255) {\n            throw new \\InvalidArgumentException('Exit code must be between 0 and 255.');\n        }\n\n        $this->exitCode = $exitCode;\n    }\n\n    public function abortExit(): void\n    {\n        $this->exitCode = false;\n    }\n\n    public function getExitCode(): int|false\n    {\n        return $this->exitCode;\n    }\n}\n\n\n--- File: 114 # Event/ConsoleEvent.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\n/**\n * Allows to inspect input and output of a command.\n *\n * @author Francesco Levorato <git@flevour.net>\n */\nclass ConsoleEvent extends Event\n{\n    public function __construct(\n        protected ?Command $command,\n        private InputInterface $input,\n        private OutputInterface $output,\n    ) {\n    }\n\n    /**\n     * Gets the command that is executed.\n     */\n    public function getCommand(): ?Command\n    {\n        return $this->command;\n    }\n\n    /**\n     * Gets the input instance.\n     */\n    public function getInput(): InputInterface\n    {\n        return $this->input;\n    }\n\n    /**\n     * Gets the output instance.\n     */\n    public function getOutput(): OutputInterface\n    {\n        return $this->output;\n    }\n}\n\n\n--- File: 115 # Event/ConsoleErrorEvent.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Allows to handle throwables thrown while running a command.\n *\n * @author Wouter de Jong <wouter@wouterj.nl>\n */\nfinal class ConsoleErrorEvent extends ConsoleEvent\n{\n    private int $exitCode;\n\n    public function __construct(\n        InputInterface $input,\n        OutputInterface $output,\n        private \\Throwable $error,\n        ?Command $command = null,\n    ) {\n        parent::__construct($command, $input, $output);\n    }\n\n    public function getError(): \\Throwable\n    {\n        return $this->error;\n    }\n\n    public function setError(\\Throwable $error): void\n    {\n        $this->error = $error;\n    }\n\n    public function setExitCode(int $exitCode): void\n    {\n        $this->exitCode = $exitCode;\n\n        $r = new \\ReflectionProperty($this->error, 'code');\n        $r->setValue($this->error, $this->exitCode);\n    }\n\n    public function getExitCode(): int\n    {\n        return $this->exitCode ?? (\\is_int($this->error->getCode()) && 0 !== $this->error->getCode() ? $this->error->getCode() : 1);\n    }\n}\n\n\n--- File: 116 # Event/ConsoleAlarmEvent.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nfinal class ConsoleAlarmEvent extends ConsoleEvent\n{\n    public function __construct(\n        Command $command,\n        InputInterface $input,\n        OutputInterface $output,\n        private int|false $exitCode = 0,\n    ) {\n        parent::__construct($command, $input, $output);\n    }\n\n    public function setExitCode(int $exitCode): void\n    {\n        if ($exitCode < 0 || $exitCode > 255) {\n            throw new \\InvalidArgumentException('Exit code must be between 0 and 255.');\n        }\n\n        $this->exitCode = $exitCode;\n    }\n\n    public function abortExit(): void\n    {\n        $this->exitCode = false;\n    }\n\n    public function getExitCode(): int|false\n    {\n        return $this->exitCode;\n    }\n}\n\n\n--- File: 117 # Event/ConsoleTerminateEvent.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Allows to manipulate the exit code of a command after its execution.\n *\n * @author Francesco Levorato <git@flevour.net>\n * @author Jules Pietri <jules@heahprod.com>\n */\nfinal class ConsoleTerminateEvent extends ConsoleEvent\n{\n    public function __construct(\n        Command $command,\n        InputInterface $input,\n        OutputInterface $output,\n        private int $exitCode,\n        private readonly ?int $interruptingSignal = null,\n    ) {\n        parent::__construct($command, $input, $output);\n    }\n\n    public function setExitCode(int $exitCode): void\n    {\n        $this->exitCode = $exitCode;\n    }\n\n    public function getExitCode(): int\n    {\n        return $this->exitCode;\n    }\n\n    public function getInterruptingSignal(): ?int\n    {\n        return $this->interruptingSignal;\n    }\n}\n\n\nPlease provide:\n1. A high-level `summary` of the project's main purpose and functionality in a few beginner-friendly sentences. Use markdown formatting with **bold** and *italic* text to highlight important concepts.\n2. A list (`relationships`) describing the key interactions between these abstractions. For each relationship, specify:\n    - `from_abstraction`: Index of the source abstraction (e.g., `0 # AbstractionName1`)\n    - `to_abstraction`: Index of the target abstraction (e.g., `1 # AbstractionName2`)\n    - `label`: A brief label for the interaction **in just a few words** (e.g., \"Manages\", \"Inherits\", \"Uses\").\n    Ideally the relationship should be backed by one abstraction calling or passing parameters to another.\n    Simplify the relationship and exclude those non-important ones.\n\nIMPORTANT: Make sure EVERY abstraction is involved in at least ONE relationship (either as source or target). Each abstraction index must appear at least once across all relationships.\n\nFormat the output as YAML:\n\n```yaml\nsummary: |\n  A brief, simple explanation of the project.\n  Can span multiple lines with **bold** and *italic* for emphasis.\nrelationships:\n  - from_abstraction: 0 # AbstractionName1\n    to_abstraction: 1 # AbstractionName2\n    label: \"Manages\"\n  - from_abstraction: 2 # AbstractionName3\n    to_abstraction: 0 # AbstractionName1\n    label: \"Provides config\"\n  # ... other relationships\n```\n\nNow, provide the YAML output:\n": "```yaml\nsummary: |\n  This project provides a framework for creating and managing command-line interfaces (CLI) in PHP applications.\n  Key abstractions like `Command`, `InputArgument`, and `InputOption` enable developers to define CLI commands,\n  handle user input, and manage the output of their applications.\n\nrelationships:\n  - from_abstraction: 0 # InputDefinition\n    to_abstraction: 1 # Command\n    label: \"Defines\"\n  - from_abstraction: 1 # Command\n    to_abstraction: 2 # InputArgument\n    label: \"Accepts\"\n  - from_abstraction: 1 # Command\n    to_abstraction: 3 # InputOption\n    label: \"Accepts\"\n  - from_abstraction: 4 # ApplicationTester\n    to_abstraction: 1 # Command\n    label: \"Tests\"\n  - from_abstraction: 5 # ConsoleSignalEvent\n    to_abstraction: 6 # ConsoleEvent\n    label: \"Extends\"\n  - from_abstraction: 7 # ConsoleErrorEvent\n    to_abstraction: 6 # ConsoleEvent\n    label: \"Extends\"\n  - from_abstraction: 8 # ConsoleAlarmEvent\n    to_abstraction: 6 # ConsoleEvent\n    label: \"Extends\"\n  - from_abstraction: 9 # ConsoleTerminateEvent\n    to_abstraction: 6 # ConsoleEvent\n    label: \"Extends\"\n```",
    "\nGiven the following project abstractions and their relationships for the project ```` console ````:\n\nAbstractions (Index # Name):\n- 0 # Command Execution Flow\n\n- 1 # Input Handling and Validation\n\n- 2 # Output and Formatting\n\n- 3 # Event Handling and Dispatching\n\n- 4 # Signal Handling\n\n- 5 # Command Discovery and Loading\n\n- 6 # Input Definition and Validation\n\n- 7 # Logging and Debugging\n\n- 8 # Command Testing\n\n- 9 # Output Wrapping\n\n\nContext about relationships and project summary:\nProject Summary:\nThis project provides a framework for creating and managing command-line interfaces (CLI) in PHP applications.\nKey abstractions like `Command`, `InputArgument`, and `InputOption` enable developers to define CLI commands,\nhandle user input, and manage the output of their applications.\n\n\nRelationships (Indices refer to abstractions above):\n- From 0 (Command Execution Flow\n) to 1 (Input Handling and Validation\n): Defines\n- From 1 (Input Handling and Validation\n) to 2 (Output and Formatting\n): Accepts\n- From 1 (Input Handling and Validation\n) to 3 (Event Handling and Dispatching\n): Accepts\n- From 4 (Signal Handling\n) to 1 (Input Handling and Validation\n): Tests\n- From 5 (Command Discovery and Loading\n) to 6 (Input Definition and Validation\n): Extends\n- From 7 (Logging and Debugging\n) to 6 (Input Definition and Validation\n): Extends\n- From 8 (Command Testing\n) to 6 (Input Definition and Validation\n): Extends\n- From 9 (Output Wrapping\n) to 6 (Input Definition and Validation\n): Extends\n\n\nIf you are going to make a tutorial for ```` console ````, what is the best order to explain these abstractions, from first to last?\nIdeally, first explain those that are the most important or foundational, perhaps user-facing concepts or entry points. Then move to more detailed, lower-level implementation details or supporting concepts.\n\nOutput the ordered list of abstraction indices, including the name in a comment for clarity. Use the format `idx # AbstractionName`.\n\n```yaml\n- 2 # FoundationalConcept\n- 0 # CoreClassA\n- 1 # CoreClassB (uses CoreClassA)\n- ...\n```\n\nNow, provide the YAML output:\n": "Based on the given relationships and their roles in the project, here is a suggested order for explaining the abstractions. This order starts with foundational concepts and moves towards more detailed implementations.\n\n```yaml\n- 1 # Input Handling and Validation\n- 6 # Input Definition and Validation\n- 3 # Event Handling and Dispatching\n- 0 # Command Execution Flow\n- 5 # Command Discovery and Loading\n- 4 # Signal Handling\n- 7 # Logging and Debugging\n- 8 # Command Testing\n- 9 # Output Wrapping\n- 2 # Output and Formatting\n```\n\nThis order ensures that you first cover the essential concepts like input handling, which are crucial for understanding how commands are processed. Then, it delves into more specific areas such as event handling and signal management, followed by command testing and output wrapping. Finally, it covers the user-facing aspects of output formatting.\n\nHere is the YAML output with names added:\n\n```yaml\n- 1 # Input Handling and Validation\n- 6 # Input Definition and Validation\n- 3 # Event Handling and Dispatching\n- 0 # Command Execution Flow\n- 5 # Command Discovery and Loading\n- 4 # Signal Handling\n- 7 # Logging and Debugging\n- 8 # Command Testing\n- 9 # Output Wrapping\n- 2 # Output and Formatting\n```",
    "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `console` about the concept: \"Input Handling and Validation\n\". This is Chapter 1.\n\nConcept Details:\n- Name: Input Handling and Validation\n\n- Description:\nThis abstraction manages the input provided to commands, ensuring it's valid before execution. It\u2019s like a gatekeeper at an event, checking IDs and only allowing entry if they meet specific criteria.\n\n\nComplete Tutorial Structure:\n1. [Input Handling and Validation\n](01_input_handling_and_validation_.md)\n2. [Input Definition and Validation\n](02_input_definition_and_validation_.md)\n3. [Event Handling and Dispatching\n](03_event_handling_and_dispatching_.md)\n4. [Command Execution Flow\n](04_command_execution_flow_.md)\n5. [Command Discovery and Loading\n](05_command_discovery_and_loading_.md)\n6. [Signal Handling\n](06_signal_handling_.md)\n7. [Logging and Debugging\n](07_logging_and_debugging_.md)\n8. [Command Testing\n](08_command_testing_.md)\n9. [Output Wrapping\n](09_output_wrapping_.md)\n10. [Output and Formatting\n](10_output_and_formatting_.md)\n\nContext from previous chapters:\nThis is the first chapter.\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: Question/ChoiceQuestion.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Question;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\n\n/**\n * Represents a choice question.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass ChoiceQuestion extends Question\n{\n    private bool $multiselect = false;\n    private string $prompt = ' > ';\n    private string $errorMessage = 'Value \"%s\" is invalid';\n\n    /**\n     * @param string                     $question The question to ask to the user\n     * @param array                      $choices  The list of available choices\n     * @param string|bool|int|float|null $default  The default answer to return\n     */\n    public function __construct(\n        string $question,\n        private array $choices,\n        string|bool|int|float|null $default = null,\n    ) {\n        if (!$choices) {\n            throw new \\LogicException('Choice question must have at least 1 choice available.');\n        }\n\n        parent::__construct($question, $default);\n\n        $this->setValidator($this->getDefaultValidator());\n        $this->setAutocompleterValues($choices);\n    }\n\n    /**\n     * Returns available choices.\n     */\n    public function getChoices(): array\n    {\n        return $this->choices;\n    }\n\n    /**\n     * Sets multiselect option.\n     *\n     * When multiselect is set to true, multiple choices can be answered.\n     *\n     * @return $this\n     */\n    public function setMultiselect(bool $multiselect): static\n    {\n        $this->multiselect = $multiselect;\n        $this->setValidator($this->getDefaultValidator());\n\n        return $this;\n    }\n\n    /**\n     * Returns whether the choices are multiselect.\n     */\n    public function isMultiselect(): bool\n    {\n        return $this->multiselect;\n    }\n\n    /**\n     * Gets the prompt for choices.\n     */\n    public function getPrompt(): string\n    {\n        return $this->prompt;\n    }\n\n    /**\n     * Sets the prompt for choices.\n     *\n     * @return $this\n     */\n    public function setPrompt(string $prompt): static\n    {\n        $this->prompt = $prompt;\n\n        return $this;\n    }\n\n    /**\n     * Sets the error message for invalid values.\n     *\n     * The error message has a string placeholder (%s) for the invalid value.\n     *\n     * @return $this\n     */\n    public function setErrorMessage(string $errorMessage): static\n    {\n        $this->errorMessage = $errorMessage;\n        $this->setValidator($this->getDefaultValidator());\n\n        return $this;\n    }\n\n    private function getDefaultValidator(): callable\n    {\n        $choices = $this->choices;\n        $errorMessage = $this->errorMessage;\n        $multiselect = $this->multiselect;\n        $isAssoc = $this->isAssoc($choices);\n\n        return function ($selected) use ($choices, $errorMessage, $multiselect, $isAssoc) {\n            if ($multiselect) {\n                // Check for a separated comma values\n                if (!preg_match('/^[^,]+(?:,[^,]+)*$/', (string) $selected, $matches)) {\n                    throw new InvalidArgumentException(\\sprintf($errorMessage, $selected));\n                }\n\n                $selectedChoices = explode(',', (string) $selected);\n            } else {\n                $selectedChoices = [$selected];\n            }\n\n            if ($this->isTrimmable()) {\n                foreach ($selectedChoices as $k => $v) {\n                    $selectedChoices[$k] = trim((string) $v);\n                }\n            }\n\n            $multiselectChoices = [];\n            foreach ($selectedChoices as $value) {\n                $results = [];\n                foreach ($choices as $key => $choice) {\n                    if ($choice === $value) {\n                        $results[] = $key;\n                    }\n                }\n\n                if (\\count($results) > 1) {\n                    throw new InvalidArgumentException(\\sprintf('The provided answer is ambiguous. Value should be one of \"%s\".', implode('\" or \"', $results)));\n                }\n\n                $result = array_search($value, $choices);\n\n                if (!$isAssoc) {\n                    if (false !== $result) {\n                        $result = $choices[$result];\n                    } elseif (isset($choices[$value])) {\n                        $result = $choices[$value];\n                    }\n                } elseif (false === $result && isset($choices[$value])) {\n                    $result = $value;\n                }\n\n                if (false === $result) {\n                    throw new InvalidArgumentException(\\sprintf($errorMessage, $value));\n                }\n\n                // For associative choices, consistently return the key as string:\n                $multiselectChoices[] = $isAssoc ? (string) $result : $result;\n            }\n\n            if ($multiselect) {\n                return $multiselectChoices;\n            }\n\n            return current($multiselectChoices);\n        };\n    }\n}\n\n\n--- File: Question/ConfirmationQuestion.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Question;\n\n/**\n * Represents a yes/no question.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass ConfirmationQuestion extends Question\n{\n    /**\n     * @param string $question        The question to ask to the user\n     * @param bool   $default         The default answer to return, true or false\n     * @param string $trueAnswerRegex A regex to match the \"yes\" answer\n     */\n    public function __construct(\n        string $question,\n        bool $default = true,\n        private string $trueAnswerRegex = '/^y/i',\n    ) {\n        parent::__construct($question, $default);\n\n        $this->setNormalizer($this->getDefaultNormalizer());\n    }\n\n    /**\n     * Returns the default answer normalizer.\n     */\n    private function getDefaultNormalizer(): callable\n    {\n        $default = $this->getDefault();\n        $regex = $this->trueAnswerRegex;\n\n        return function ($answer) use ($default, $regex) {\n            if (\\is_bool($answer)) {\n                return $answer;\n            }\n\n            $answerIsTrue = (bool) preg_match($regex, $answer);\n            if (false === $default) {\n                return $answer && $answerIsTrue;\n            }\n\n            return '' === $answer || $answerIsTrue;\n        };\n    }\n}\n\n\n--- File: Question/Question.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Question;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\n\n/**\n * Represents a Question.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass Question\n{\n    private ?int $attempts = null;\n    private bool $hidden = false;\n    private bool $hiddenFallback = true;\n    private ?\\Closure $autocompleterCallback = null;\n    private ?\\Closure $validator = null;\n    private ?\\Closure $normalizer = null;\n    private bool $trimmable = true;\n    private bool $multiline = false;\n\n    /**\n     * @param string                     $question The question to ask to the user\n     * @param string|bool|int|float|null $default  The default answer to return if the user enters nothing\n     */\n    public function __construct(\n        private string $question,\n        private string|bool|int|float|null $default = null,\n    ) {\n    }\n\n    /**\n     * Returns the question.\n     */\n    public function getQuestion(): string\n    {\n        return $this->question;\n    }\n\n    /**\n     * Returns the default answer.\n     */\n    public function getDefault(): string|bool|int|float|null\n    {\n        return $this->default;\n    }\n\n    /**\n     * Returns whether the user response accepts newline characters.\n     */\n    public function isMultiline(): bool\n    {\n        return $this->multiline;\n    }\n\n    /**\n     * Sets whether the user response should accept newline characters.\n     *\n     * @return $this\n     */\n    public function setMultiline(bool $multiline): static\n    {\n        $this->multiline = $multiline;\n\n        return $this;\n    }\n\n    /**\n     * Returns whether the user response must be hidden.\n     */\n    public function isHidden(): bool\n    {\n        return $this->hidden;\n    }\n\n    /**\n     * Sets whether the user response must be hidden or not.\n     *\n     * @return $this\n     *\n     * @throws LogicException In case the autocompleter is also used\n     */\n    public function setHidden(bool $hidden): static\n    {\n        if ($this->autocompleterCallback) {\n            throw new LogicException('A hidden question cannot use the autocompleter.');\n        }\n\n        $this->hidden = $hidden;\n\n        return $this;\n    }\n\n    /**\n     * In case the response cannot be hidden, whether to fallback on non-hidden question or not.\n     */\n    public function isHiddenFallback(): bool\n    {\n        return $this->hiddenFallback;\n    }\n\n    /**\n     * Sets whether to fallback on non-hidden question if the response cannot be hidden.\n     *\n     * @return $this\n     */\n    public function setHiddenFallback(bool $fallback): static\n    {\n        $this->hiddenFallback = $fallback;\n\n        return $this;\n    }\n\n    /**\n     * Gets values for the autocompleter.\n     */\n    public function getAutocompleterValues(): ?iterable\n    {\n        $callback = $this->getAutocompleterCallback();\n\n        return $callback ? $callback('') : null;\n    }\n\n    /**\n     * Sets values for the autocompleter.\n     *\n     * @return $this\n     *\n     * @throws LogicException\n     */\n    public function setAutocompleterValues(?iterable $values): static\n    {\n        if (\\is_array($values)) {\n            $values = $this->isAssoc($values) ? array_merge(array_keys($values), array_values($values)) : array_values($values);\n\n            $callback = static fn () => $values;\n        } elseif ($values instanceof \\Traversable) {\n            $callback = static function () use ($values) {\n                static $valueCache;\n\n                return $valueCache ??= iterator_to_array($values, false);\n            };\n        } else {\n            $callback = null;\n        }\n\n        return $this->setAutocompleterCallback($callback);\n    }\n\n    /**\n     * Gets the callback function used for the autocompleter.\n     */\n    public function getAutocompleterCallback(): ?callable\n    {\n        return $this->autocompleterCallback;\n    }\n\n    /**\n     * Sets the callback function used for the autocompleter.\n     *\n     * The callback is passed the user input as argument and should return an iterable of corresponding suggestions.\n     *\n     * @return $this\n     */\n    public function setAutocompleterCallback(?callable $callback): static\n    {\n        if ($this->hidden && null !== $callback) {\n            throw new LogicException('A hidden question cannot use the autocompleter.');\n        }\n\n        $this->autocompleterCallback = null === $callback ? null : $callback(...);\n\n        return $this;\n    }\n\n    /**\n     * Sets a validator for the question.\n     *\n     * @return $this\n     */\n    public function setValidator(?callable $validator): static\n    {\n        $this->validator = null === $validator ? null : $validator(...);\n\n        return $this;\n    }\n\n    /**\n     * Gets the validator for the question.\n     */\n    public function getValidator(): ?callable\n    {\n        return $this->validator;\n    }\n\n    /**\n     * Sets the maximum number of attempts.\n     *\n     * Null means an unlimited number of attempts.\n     *\n     * @return $this\n     *\n     * @throws InvalidArgumentException in case the number of attempts is invalid\n     */\n    public function setMaxAttempts(?int $attempts): static\n    {\n        if (null !== $attempts && $attempts < 1) {\n            throw new InvalidArgumentException('Maximum number of attempts must be a positive value.');\n        }\n\n        $this->attempts = $attempts;\n\n        return $this;\n    }\n\n    /**\n     * Gets the maximum number of attempts.\n     *\n     * Null means an unlimited number of attempts.\n     */\n    public function getMaxAttempts(): ?int\n    {\n        return $this->attempts;\n    }\n\n    /**\n     * Sets a normalizer for the response.\n     *\n     * The normalizer can be a callable (a string), a closure or a class implementing __invoke.\n     *\n     * @return $this\n     */\n    public function setNormalizer(callable $normalizer): static\n    {\n        $this->normalizer = $normalizer(...);\n\n        return $this;\n    }\n\n    /**\n     * Gets the normalizer for the response.\n     *\n     * The normalizer can ba a callable (a string), a closure or a class implementing __invoke.\n     */\n    public function getNormalizer(): ?callable\n    {\n        return $this->normalizer;\n    }\n\n    protected function isAssoc(array $array): bool\n    {\n        return (bool) \\count(array_filter(array_keys($array), 'is_string'));\n    }\n\n    public function isTrimmable(): bool\n    {\n        return $this->trimmable;\n    }\n\n    /**\n     * @return $this\n     */\n    public function setTrimmable(bool $trimmable): static\n    {\n        $this->trimmable = $trimmable;\n\n        return $this;\n    }\n}\n\n\n--- File: Exception/InvalidArgumentException.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Exception;\n\n/**\n * @author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>\n */\nclass InvalidArgumentException extends \\InvalidArgumentException implements ExceptionInterface\n{\n}\n\n\n--- File: Exception/InvalidOptionException.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Exception;\n\n/**\n * Represents an incorrect option name or value typed in the console.\n *\n * @author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>\n */\nclass InvalidOptionException extends \\InvalidArgumentException implements ExceptionInterface\n{\n}\n\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 1: Input Handling and Validation\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 20 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 1: Input Handling and Validation\n\nWelcome to our journey into building robust console applications! In the previous chapter, we started exploring how to create commands that can be executed from the command line. However, there's an important aspect we haven't covered yet\u2014ensuring that the input provided by users is valid before proceeding with execution. Think of it like a gatekeeper at an event who checks IDs and only allows entry if they meet specific criteria.\n\n## Why Validation Matters\n\nImagine you're building a console application to manage a library. You have a command to add books, but what happens when someone inputs invalid data? For example, entering a negative number for the book's price or leaving fields blank. Without proper validation, your program might crash or produce incorrect results. This is where input handling and validation come in.\n\n## Key Concepts\n\n### 1. Question Class\nThe `Question` class acts as our gatekeeper. It ensures that user inputs are valid before proceeding with any further actions. Let's break down how it works.\n\n#### Example Scenario: Adding a Book\nSuppose we want to add a new book to the library using a command-line interface. We need to ask for the book's title, author, and price. If any of these fields are invalid (e.g., an empty string or a negative number), our program should not proceed.\n\n### 2. Setting Up Questions\nIn the `Question` class, we can set up questions with default values and validators. For instance, when asking for the book's title, if no value is provided by the user, it defaults to \"Unknown\". If the price is inputted incorrectly (e.g., a negative number), the program will throw an error.\n\n### 3. Using Choice Questions\nSometimes, users might need to make choices from predefined options. For example, we could ask them to select if the book is fiction or non-fiction. The `ChoiceQuestion` class ensures that only valid choices are accepted.\n\n## How to Use It\n\nLet's see how we can use these classes in a practical scenario:\n\n### Example Code\nHere\u2019s a simple example of setting up questions and handling user input using the `Question` and `ChoiceQuestion` classes.\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create a confirmation question to ask if the book should be added.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question for the genre of the book.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask the user questions and handle their responses.\n$helperSet = \\Symfony\\Component\\Console\\Helper\\HelperSet::create();\n$io = $helperSet->get('io');\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Step-by-Step Explanation\n1. **Create Confirmation Question**: We ask the user if they want to add a book.\n2. **Create Choice Question**: We give the user options for the genre of the book.\n3. **Ask Questions and Handle Responses**: The program waits for user input, validates it using built-in validators, and handles any errors.\n\n### Internal Walkthrough\nWhen you run this code:\n- First, you\u2019ll be prompted with a confirmation question: `Do you want to add this book? (yes/no): yes`\n- Then, another prompt will appear asking about the genre: `What is the genre of the book? [fiction, non-fiction]: fiction`\n\nIf any input is invalid, an error message will be displayed.\n\n### Mermaid Diagram\nHere\u2019s a simple sequence diagram illustrating the flow:\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## Conclusion\nIn this chapter, we learned how to handle user inputs using the `Question` class. We saw how to create questions with validation and choices, ensuring that our application handles invalid data gracefully. Next, we\u2019ll dive deeper into the internal implementation of these classes.\n\nStay tuned for the next chapter where we will explore more about event handling and dispatching! [Next Chapter: Event Handling and Dispatching](03_event_handling_and_dispatching_.md)",
    "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `console` about the concept: \"Input Definition and Validation\n\". This is Chapter 2.\n\nConcept Details:\n- Name: Input Definition and Validation\n\n- Description:\nThis abstraction defines how input should be structured and validates it to ensure commands are executed with the correct parameters. It\u2019s like defining rules for a game and checking that players follow them.\n\n\nComplete Tutorial Structure:\n1. [Input Handling and Validation\n](01_input_handling_and_validation_.md)\n2. [Input Definition and Validation\n](02_input_definition_and_validation_.md)\n3. [Event Handling and Dispatching\n](03_event_handling_and_dispatching_.md)\n4. [Command Execution Flow\n](04_command_execution_flow_.md)\n5. [Command Discovery and Loading\n](05_command_discovery_and_loading_.md)\n6. [Signal Handling\n](06_signal_handling_.md)\n7. [Logging and Debugging\n](07_logging_and_debugging_.md)\n8. [Command Testing\n](08_command_testing_.md)\n9. [Output Wrapping\n](09_output_wrapping_.md)\n10. [Output and Formatting\n](10_output_and_formatting_.md)\n\nContext from previous chapters:\n# Chapter 1: Input Handling and Validation\n\nWelcome to our journey into building robust console applications! In the previous chapter, we started exploring how to create commands that can be executed from the command line. However, there's an important aspect we haven't covered yet\u2014ensuring that the input provided by users is valid before proceeding with execution. Think of it like a gatekeeper at an event who checks IDs and only allows entry if they meet specific criteria.\n\n## Why Validation Matters\n\nImagine you're building a console application to manage a library. You have a command to add books, but what happens when someone inputs invalid data? For example, entering a negative number for the book's price or leaving fields blank. Without proper validation, your program might crash or produce incorrect results. This is where input handling and validation come in.\n\n## Key Concepts\n\n### 1. Question Class\nThe `Question` class acts as our gatekeeper. It ensures that user inputs are valid before proceeding with any further actions. Let's break down how it works.\n\n#### Example Scenario: Adding a Book\nSuppose we want to add a new book to the library using a command-line interface. We need to ask for the book's title, author, and price. If any of these fields are invalid (e.g., an empty string or a negative number), our program should not proceed.\n\n### 2. Setting Up Questions\nIn the `Question` class, we can set up questions with default values and validators. For instance, when asking for the book's title, if no value is provided by the user, it defaults to \"Unknown\". If the price is inputted incorrectly (e.g., a negative number), the program will throw an error.\n\n### 3. Using Choice Questions\nSometimes, users might need to make choices from predefined options. For example, we could ask them to select if the book is fiction or non-fiction. The `ChoiceQuestion` class ensures that only valid choices are accepted.\n\n## How to Use It\n\nLet's see how we can use these classes in a practical scenario:\n\n### Example Code\nHere\u2019s a simple example of setting up questions and handling user input using the `Question` and `ChoiceQuestion` classes.\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create a confirmation question to ask if the book should be added.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question for the genre of the book.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask the user questions and handle their responses.\n$helperSet = \\Symfony\\Component\\Console\\Helper\\HelperSet::create();\n$io = $helperSet->get('io');\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Step-by-Step Explanation\n1. **Create Confirmation Question**: We ask the user if they want to add a book.\n2. **Create Choice Question**: We give the user options for the genre of the book.\n3. **Ask Questions and Handle Responses**: The program waits for user input, validates it using built-in validators, and handles any errors.\n\n### Internal Walkthrough\nWhen you run this code:\n- First, you\u2019ll be prompted with a confirmation question: `Do you want to add this book? (yes/no): yes`\n- Then, another prompt will appear asking about the genre: `What is the genre of the book? [fiction, non-fiction]: fiction`\n\nIf any input is invalid, an error message will be displayed.\n\n### Mermaid Diagram\nHere\u2019s a simple sequence diagram illustrating the flow:\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## Conclusion\nIn this chapter, we learned how to handle user inputs using the `Question` class. We saw how to create questions with validation and choices, ensuring that our application handles invalid data gracefully. Next, we\u2019ll dive deeper into the internal implementation of these classes.\n\nStay tuned for the next chapter where we will explore more about event handling and dispatching! [Next Chapter: Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: Input/InputOption.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Input;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Completion\\CompletionInput;\nuse Symfony\\Component\\Console\\Completion\\CompletionSuggestions;\nuse Symfony\\Component\\Console\\Completion\\Suggestion;\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\n\n/**\n * Represents a command line option.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass InputOption\n{\n    /**\n     * Do not accept input for the option (e.g. --yell). This is the default behavior of options.\n     */\n    public const VALUE_NONE = 1;\n\n    /**\n     * A value must be passed when the option is used (e.g. --iterations=5 or -i5).\n     */\n    public const VALUE_REQUIRED = 2;\n\n    /**\n     * The option may or may not have a value (e.g. --yell or --yell=loud).\n     */\n    public const VALUE_OPTIONAL = 4;\n\n    /**\n     * The option accepts multiple values (e.g. --dir=/foo --dir=/bar).\n     */\n    public const VALUE_IS_ARRAY = 8;\n\n    /**\n     * The option allows passing a negated variant (e.g. --ansi or --no-ansi).\n     */\n    public const VALUE_NEGATABLE = 16;\n\n    private string $name;\n    private ?string $shortcut;\n    private int $mode;\n    private string|int|bool|array|float|null $default;\n\n    /**\n     * @param string|array|null                                                             $shortcut        The shortcuts, can be null, a string of shortcuts delimited by | or an array of shortcuts\n     * @param int-mask-of<InputOption::*>|null                                              $mode            The option mode: One of the VALUE_* constants\n     * @param string|bool|int|float|array|null                                              $default         The default value (must be null for self::VALUE_NONE)\n     * @param array|\\Closure(CompletionInput,CompletionSuggestions):list<string|Suggestion> $suggestedValues The values used for input completion\n     *\n     * @throws InvalidArgumentException If option mode is invalid or incompatible\n     */\n    public function __construct(\n        string $name,\n        string|array|null $shortcut = null,\n        ?int $mode = null,\n        private string $description = '',\n        string|bool|int|float|array|null $default = null,\n        private array|\\Closure $suggestedValues = [],\n    ) {\n        if (str_starts_with($name, '--')) {\n            $name = substr($name, 2);\n        }\n\n        if (!$name) {\n            throw new InvalidArgumentException('An option name cannot be empty.');\n        }\n\n        if ('' === $shortcut || [] === $shortcut || false === $shortcut) {\n            $shortcut = null;\n        }\n\n        if (null !== $shortcut) {\n            if (\\is_array($shortcut)) {\n                $shortcut = implode('|', $shortcut);\n            }\n            $shortcuts = preg_split('{(\\|)-?}', ltrim($shortcut, '-'));\n            $shortcuts = array_filter($shortcuts, 'strlen');\n            $shortcut = implode('|', $shortcuts);\n\n            if ('' === $shortcut) {\n                throw new InvalidArgumentException('An option shortcut cannot be empty.');\n            }\n        }\n\n        if (null === $mode) {\n            $mode = self::VALUE_NONE;\n        } elseif ($mode >= (self::VALUE_NEGATABLE << 1) || $mode < 1) {\n            throw new InvalidArgumentException(\\sprintf('Option mode \"%s\" is not valid.', $mode));\n        }\n\n        $this->name = $name;\n        $this->shortcut = $shortcut;\n        $this->mode = $mode;\n\n        if ($suggestedValues && !$this->acceptValue()) {\n            throw new LogicException('Cannot set suggested values if the option does not accept a value.');\n        }\n        if ($this->isArray() && !$this->acceptValue()) {\n            throw new InvalidArgumentException('Impossible to have an option mode VALUE_IS_ARRAY if the option does not accept a value.');\n        }\n        if ($this->isNegatable() && $this->acceptValue()) {\n            throw new InvalidArgumentException('Impossible to have an option mode VALUE_NEGATABLE if the option also accepts a value.');\n        }\n\n        $this->setDefault($default);\n    }\n\n    /**\n     * Returns the option shortcut.\n     */\n    public function getShortcut(): ?string\n    {\n        return $this->shortcut;\n    }\n\n    /**\n     * Returns the option name.\n     */\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    /**\n     * Returns true if the option accepts a value.\n     *\n     * @return bool true if value mode is not self::VALUE_NONE, false otherwise\n     */\n    public function acceptValue(): bool\n    {\n        return $this->isValueRequired() || $this->isValueOptional();\n    }\n\n    /**\n     * Returns true if the option requires a value.\n     *\n     * @return bool true if value mode is self::VALUE_REQUIRED, false otherwise\n     */\n    public function isValueRequired(): bool\n    {\n        return self::VALUE_REQUIRED === (self::VALUE_REQUIRED & $this->mode);\n    }\n\n    /**\n     * Returns true if the option takes an optional value.\n     *\n     * @return bool true if value mode is self::VALUE_OPTIONAL, false otherwise\n     */\n    public function isValueOptional(): bool\n    {\n        return self::VALUE_OPTIONAL === (self::VALUE_OPTIONAL & $this->mode);\n    }\n\n    /**\n     * Returns true if the option can take multiple values.\n     *\n     * @return bool true if mode is self::VALUE_IS_ARRAY, false otherwise\n     */\n    public function isArray(): bool\n    {\n        return self::VALUE_IS_ARRAY === (self::VALUE_IS_ARRAY & $this->mode);\n    }\n\n    /**\n     * Returns true if the option allows passing a negated variant.\n     *\n     * @return bool true if mode is self::VALUE_NEGATABLE, false otherwise\n     */\n    public function isNegatable(): bool\n    {\n        return self::VALUE_NEGATABLE === (self::VALUE_NEGATABLE & $this->mode);\n    }\n\n    /**\n     * Sets the default value.\n     */\n    public function setDefault(string|bool|int|float|array|null $default): void\n    {\n        if (self::VALUE_NONE === (self::VALUE_NONE & $this->mode) && null !== $default) {\n            throw new LogicException('Cannot set a default value when using InputOption::VALUE_NONE mode.');\n        }\n\n        if ($this->isArray()) {\n            if (null === $default) {\n                $default = [];\n            } elseif (!\\is_array($default)) {\n                throw new LogicException('A default value for an array option must be an array.');\n            }\n        }\n\n        $this->default = $this->acceptValue() || $this->isNegatable() ? $default : false;\n    }\n\n    /**\n     * Returns the default value.\n     */\n    public function getDefault(): string|bool|int|float|array|null\n    {\n        return $this->default;\n    }\n\n    /**\n     * Returns the description text.\n     */\n    public function getDescription(): string\n    {\n        return $this->description;\n    }\n\n    /**\n     * Returns true if the option has values for input completion.\n     */\n    public function hasCompletion(): bool\n    {\n        return [] !== $this->suggestedValues;\n    }\n\n    /**\n     * Supplies suggestions when command resolves possible completion options for input.\n     *\n     * @see Command::complete()\n     */\n    public function complete(CompletionInput $input, CompletionSuggestions $suggestions): void\n    {\n        $values = $this->suggestedValues;\n        if ($values instanceof \\Closure && !\\is_array($values = $values($input))) {\n            throw new LogicException(\\sprintf('Closure for option \"%s\" must return an array. Got \"%s\".', $this->name, get_debug_type($values)));\n        }\n        if ($values) {\n            $suggestions->suggestValues($values);\n        }\n    }\n\n    /**\n     * Checks whether the given option equals this one.\n     */\n    public function equals(self $option): bool\n    {\n        return $option->getName() === $this->getName()\n            && $option->getShortcut() === $this->getShortcut()\n            && $option->getDefault() === $this->getDefault()\n            && $option->isNegatable() === $this->isNegatable()\n            && $option->isArray() === $this->isArray()\n            && $option->isValueRequired() === $this->isValueRequired()\n            && $option->isValueOptional() === $this->isValueOptional()\n        ;\n    }\n}\n\n\n--- File: Input/ArgvInput.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Input;\n\nuse Symfony\\Component\\Console\\Exception\\RuntimeException;\n\n/**\n * ArgvInput represents an input coming from the CLI arguments.\n *\n * Usage:\n *\n *     $input = new ArgvInput();\n *\n * By default, the `$_SERVER['argv']` array is used for the input values.\n *\n * This can be overridden by explicitly passing the input values in the constructor:\n *\n *     $input = new ArgvInput($_SERVER['argv']);\n *\n * If you pass it yourself, don't forget that the first element of the array\n * is the name of the running application.\n *\n * When passing an argument to the constructor, be sure that it respects\n * the same rules as the argv one. It's almost always better to use the\n * `StringInput` when you want to provide your own input.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n *\n * @see http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html\n * @see http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html#tag_12_02\n */\nclass ArgvInput extends Input\n{\n    /** @var list<string> */\n    private array $tokens;\n    private array $parsed;\n\n    /** @param list<string>|null $argv */\n    public function __construct(?array $argv = null, ?InputDefinition $definition = null)\n    {\n        $argv ??= $_SERVER['argv'] ?? [];\n\n        foreach ($argv as $arg) {\n            if (!\\is_scalar($arg) && !$arg instanceof \\Stringable) {\n                throw new RuntimeException(\\sprintf('Argument values expected to be all scalars, got \"%s\".', get_debug_type($arg)));\n            }\n        }\n\n        // strip the application name\n        array_shift($argv);\n\n        $this->tokens = $argv;\n\n        parent::__construct($definition);\n    }\n\n    /** @param list<string> $tokens */\n    protected function setTokens(array $tokens): void\n    {\n        $this->tokens = $tokens;\n    }\n\n    protected function parse(): void\n    {\n        $parseOptions = true;\n        $this->parsed = $this->tokens;\n        while (null !== $token = array_shift($this->parsed)) {\n            $parseOptions = $this->parseToken($token, $parseOptions);\n        }\n    }\n\n    protected function parseToken(string $token, bool $parseOptions): bool\n    {\n        if ($parseOptions && '' == $token) {\n            $this->parseArgument($token);\n        } elseif ($parseOptions && '--' == $token) {\n            return false;\n        } elseif ($parseOptions && str_starts_with($token, '--')) {\n            $this->parseLongOption($token);\n        } elseif ($parseOptions && '-' === $token[0] && '-' !== $token) {\n            $this->parseShortOption($token);\n        } else {\n            $this->parseArgument($token);\n        }\n\n        return $parseOptions;\n    }\n\n    /**\n     * Parses a short option.\n     */\n    private function parseShortOption(string $token): void\n    {\n        $name = substr($token, 1);\n\n        if (\\strlen($name) > 1) {\n            if ($this->definition->hasShortcut($name[0]) && $this->definition->getOptionForShortcut($name[0])->acceptValue()) {\n                // an option with a value (with no space)\n                $this->addShortOption($name[0], substr($name, 1));\n            } else {\n                $this->parseShortOptionSet($name);\n            }\n        } else {\n            $this->addShortOption($name, null);\n        }\n    }\n\n    /**\n     * Parses a short option set.\n     *\n     * @throws RuntimeException When option given doesn't exist\n     */\n    private function parseShortOptionSet(string $name): void\n    {\n        $len = \\strlen($name);\n        for ($i = 0; $i < $len; ++$i) {\n            if (!$this->definition->hasShortcut($name[$i])) {\n                $encoding = mb_detect_encoding($name, null, true);\n                throw new RuntimeException(\\sprintf('The \"-%s\" option does not exist.', false === $encoding ? $name[$i] : mb_substr($name, $i, 1, $encoding)));\n            }\n\n            $option = $this->definition->getOptionForShortcut($name[$i]);\n            if ($option->acceptValue()) {\n                $this->addLongOption($option->getName(), $i === $len - 1 ? null : substr($name, $i + 1));\n\n                break;\n            }\n\n            $this->addLongOption($option->getName(), null);\n        }\n    }\n\n    /**\n     * Parses a long option.\n     */\n    private function parseLongOption(string $token): void\n    {\n        $name = substr($token, 2);\n\n        if (false !== $pos = strpos($name, '=')) {\n            if ('' === $value = substr($name, $pos + 1)) {\n                array_unshift($this->parsed, $value);\n            }\n            $this->addLongOption(substr($name, 0, $pos), $value);\n        } else {\n            $this->addLongOption($name, null);\n        }\n    }\n\n    /**\n     * Parses an argument.\n     *\n     * @throws RuntimeException When too many arguments are given\n     */\n    private function parseArgument(string $token): void\n    {\n        $c = \\count($this->arguments);\n\n        // if input is expecting another argument, add it\n        if ($this->definition->hasArgument($c)) {\n            $arg = $this->definition->getArgument($c);\n            $this->arguments[$arg->getName()] = $arg->isArray() ? [$token] : $token;\n\n        // if last argument isArray(), append token to last argument\n        } elseif ($this->definition->hasArgument($c - 1) && $this->definition->getArgument($c - 1)->isArray()) {\n            $arg = $this->definition->getArgument($c - 1);\n            $this->arguments[$arg->getName()][] = $token;\n\n        // unexpected argument\n        } else {\n            $all = $this->definition->getArguments();\n            $symfonyCommandName = null;\n            if (($inputArgument = $all[$key = array_key_first($all)] ?? null) && 'command' === $inputArgument->getName()) {\n                $symfonyCommandName = $this->arguments['command'] ?? null;\n                unset($all[$key]);\n            }\n\n            if (\\count($all)) {\n                if ($symfonyCommandName) {\n                    $message = \\sprintf('Too many arguments to \"%s\" command, expected arguments \"%s\".', $symfonyCommandName, implode('\" \"', array_keys($all)));\n                } else {\n                    $message = \\sprintf('Too many arguments, expected arguments \"%s\".', implode('\" \"', array_keys($all)));\n                }\n            } elseif ($symfonyCommandName) {\n                $message = \\sprintf('No arguments expected for \"%s\" command, got \"%s\".', $symfonyCommandName, $token);\n            } else {\n                $message = \\sprintf('No arguments expected, got \"%s\".', $token);\n            }\n\n            throw new RuntimeException($message);\n        }\n    }\n\n    /**\n     * Adds a short option value.\n     *\n     * @throws RuntimeException When option given doesn't exist\n     */\n    private function addShortOption(string $shortcut, mixed $value): void\n    {\n        if (!$this->definition->hasShortcut($shortcut)) {\n            throw new RuntimeException(\\sprintf('The \"-%s\" option does not exist.', $shortcut));\n        }\n\n        $this->addLongOption($this->definition->getOptionForShortcut($shortcut)->getName(), $value);\n    }\n\n    /**\n     * Adds a long option value.\n     *\n     * @throws RuntimeException When option given doesn't exist\n     */\n    private function addLongOption(string $name, mixed $value): void\n    {\n        if (!$this->definition->hasOption($name)) {\n            if (!$this->definition->hasNegation($name)) {\n                throw new RuntimeException(\\sprintf('The \"--%s\" option does not exist.', $name));\n            }\n\n            $optionName = $this->definition->negationToName($name);\n            if (null !== $value) {\n                throw new RuntimeException(\\sprintf('The \"--%s\" option does not accept a value.', $name));\n            }\n            $this->options[$optionName] = false;\n\n            return;\n        }\n\n        $option = $this->definition->getOption($name);\n\n        if (null !== $value && !$option->acceptValue()) {\n            throw new RuntimeException(\\sprintf('The \"--%s\" option does not accept a value.', $name));\n        }\n\n        if (\\in_array($value, ['', null], true) && $option->acceptValue() && \\count($this->parsed)) {\n            // if option accepts an optional or mandatory argument\n            // let's see if there is one provided\n            $next = array_shift($this->parsed);\n            if ((isset($next[0]) && '-' !== $next[0]) || \\in_array($next, ['', null], true)) {\n                $value = $next;\n            } else {\n                array_unshift($this->parsed, $next);\n            }\n        }\n\n        if (null === $value) {\n            if ($option->isValueRequired()) {\n                throw new RuntimeException(\\sprintf('The \"--%s\" option requires a value.', $name));\n            }\n\n            if (!$option->isArray() && !$option->isValueOptional()) {\n                $value = true;\n            }\n        }\n\n        if ($option->isArray()) {\n            $this->options[$name][] = $value;\n        } else {\n            $this->options[$name] = $value;\n        }\n    }\n\n    public function getFirstArgument(): ?string\n    {\n        $isOption = false;\n        foreach ($this->tokens as $i => $token) {\n            if ($token && '-' === $token[0]) {\n                if (str_contains($token, '=') || !isset($this->tokens[$i + 1])) {\n                    continue;\n                }\n\n                // If it's a long option, consider that everything after \"--\" is the option name.\n                // Otherwise, use the last char (if it's a short option set, only the last one can take a value with space separator)\n                $name = '-' === $token[1] ? substr($token, 2) : substr($token, -1);\n                if (!isset($this->options[$name]) && !$this->definition->hasShortcut($name)) {\n                    // noop\n                } elseif ((isset($this->options[$name]) || isset($this->options[$name = $this->definition->shortcutToName($name)])) && $this->tokens[$i + 1] === $this->options[$name]) {\n                    $isOption = true;\n                }\n\n                continue;\n            }\n\n            if ($isOption) {\n                $isOption = false;\n                continue;\n            }\n\n            return $token;\n        }\n\n        return null;\n    }\n\n    public function hasParameterOption(string|array $values, bool $onlyParams = false): bool\n    {\n        $values = (array) $values;\n\n        foreach ($this->tokens as $token) {\n            if ($onlyParams && '--' === $token) {\n                return false;\n            }\n            foreach ($values as $value) {\n                // Options with values:\n                //   For long options, test for '--option=' at beginning\n                //   For short options, test for '-o' at beginning\n                $leading = str_starts_with($value, '--') ? $value.'=' : $value;\n                if ($token === $value || '' !== $leading && str_starts_with($token, $leading)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public function getParameterOption(string|array $values, string|bool|int|float|array|null $default = false, bool $onlyParams = false): mixed\n    {\n        $values = (array) $values;\n        $tokens = $this->tokens;\n\n        while (0 < \\count($tokens)) {\n            $token = array_shift($tokens);\n            if ($onlyParams && '--' === $token) {\n                return $default;\n            }\n\n            foreach ($values as $value) {\n                if ($token === $value) {\n                    return array_shift($tokens);\n                }\n                // Options with values:\n                //   For long options, test for '--option=' at beginning\n                //   For short options, test for '-o' at beginning\n                $leading = str_starts_with($value, '--') ? $value.'=' : $value;\n                if ('' !== $leading && str_starts_with($token, $leading)) {\n                    return substr($token, \\strlen($leading));\n                }\n            }\n        }\n\n        return $default;\n    }\n\n    /**\n     * Returns un-parsed and not validated tokens.\n     *\n     * @param bool $strip Whether to return the raw parameters (false) or the values after the command name (true)\n     *\n     * @return list<string>\n     */\n    public function getRawTokens(bool $strip = false): array\n    {\n        if (!$strip) {\n            return $this->tokens;\n        }\n\n        $parameters = [];\n        $keep = false;\n        foreach ($this->tokens as $value) {\n            if (!$keep && $value === $this->getFirstArgument()) {\n                $keep = true;\n\n                continue;\n            }\n            if ($keep) {\n                $parameters[] = $value;\n            }\n        }\n\n        return $parameters;\n    }\n\n    /**\n     * Returns a stringified representation of the args passed to the command.\n     */\n    public function __toString(): string\n    {\n        $tokens = array_map(function ($token) {\n            if (preg_match('{^(-[^=]+=)(.+)}', $token, $match)) {\n                return $match[1].$this->escapeToken($match[2]);\n            }\n\n            if ($token && '-' !== $token[0]) {\n                return $this->escapeToken($token);\n            }\n\n            return $token;\n        }, $this->tokens);\n\n        return implode(' ', $tokens);\n    }\n}\n\n\n--- File: Input/InputDefinition.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Input;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\n\n/**\n * A InputDefinition represents a set of valid command line arguments and options.\n *\n * Usage:\n *\n *     $definition = new InputDefinition([\n *         new InputArgument('name', InputArgument::REQUIRED),\n *         new InputOption('foo', 'f', InputOption::VALUE_REQUIRED),\n *     ]);\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass InputDefinition\n{\n    private array $arguments = [];\n    private int $requiredCount = 0;\n    private ?InputArgument $lastArrayArgument = null;\n    private ?InputArgument $lastOptionalArgument = null;\n    private array $options = [];\n    private array $negations = [];\n    private array $shortcuts = [];\n\n    /**\n     * @param array $definition An array of InputArgument and InputOption instance\n     */\n    public function __construct(array $definition = [])\n    {\n        $this->setDefinition($definition);\n    }\n\n    /**\n     * Sets the definition of the input.\n     */\n    public function setDefinition(array $definition): void\n    {\n        $arguments = [];\n        $options = [];\n        foreach ($definition as $item) {\n            if ($item instanceof InputOption) {\n                $options[] = $item;\n            } else {\n                $arguments[] = $item;\n            }\n        }\n\n        $this->setArguments($arguments);\n        $this->setOptions($options);\n    }\n\n    /**\n     * Sets the InputArgument objects.\n     *\n     * @param InputArgument[] $arguments An array of InputArgument objects\n     */\n    public function setArguments(array $arguments = []): void\n    {\n        $this->arguments = [];\n        $this->requiredCount = 0;\n        $this->lastOptionalArgument = null;\n        $this->lastArrayArgument = null;\n        $this->addArguments($arguments);\n    }\n\n    /**\n     * Adds an array of InputArgument objects.\n     *\n     * @param InputArgument[] $arguments An array of InputArgument objects\n     */\n    public function addArguments(?array $arguments = []): void\n    {\n        if (null !== $arguments) {\n            foreach ($arguments as $argument) {\n                $this->addArgument($argument);\n            }\n        }\n    }\n\n    /**\n     * @throws LogicException When incorrect argument is given\n     */\n    public function addArgument(InputArgument $argument): void\n    {\n        if (isset($this->arguments[$argument->getName()])) {\n            throw new LogicException(\\sprintf('An argument with name \"%s\" already exists.', $argument->getName()));\n        }\n\n        if (null !== $this->lastArrayArgument) {\n            throw new LogicException(\\sprintf('Cannot add a required argument \"%s\" after an array argument \"%s\".', $argument->getName(), $this->lastArrayArgument->getName()));\n        }\n\n        if ($argument->isRequired() && null !== $this->lastOptionalArgument) {\n            throw new LogicException(\\sprintf('Cannot add a required argument \"%s\" after an optional one \"%s\".', $argument->getName(), $this->lastOptionalArgument->getName()));\n        }\n\n        if ($argument->isArray()) {\n            $this->lastArrayArgument = $argument;\n        }\n\n        if ($argument->isRequired()) {\n            ++$this->requiredCount;\n        } else {\n            $this->lastOptionalArgument = $argument;\n        }\n\n        $this->arguments[$argument->getName()] = $argument;\n    }\n\n    /**\n     * Returns an InputArgument by name or by position.\n     *\n     * @throws InvalidArgumentException When argument given doesn't exist\n     */\n    public function getArgument(string|int $name): InputArgument\n    {\n        if (!$this->hasArgument($name)) {\n            throw new InvalidArgumentException(\\sprintf('The \"%s\" argument does not exist.', $name));\n        }\n\n        $arguments = \\is_int($name) ? array_values($this->arguments) : $this->arguments;\n\n        return $arguments[$name];\n    }\n\n    /**\n     * Returns true if an InputArgument object exists by name or position.\n     */\n    public function hasArgument(string|int $name): bool\n    {\n        $arguments = \\is_int($name) ? array_values($this->arguments) : $this->arguments;\n\n        return isset($arguments[$name]);\n    }\n\n    /**\n     * Gets the array of InputArgument objects.\n     *\n     * @return InputArgument[]\n     */\n    public function getArguments(): array\n    {\n        return $this->arguments;\n    }\n\n    /**\n     * Returns the number of InputArguments.\n     */\n    public function getArgumentCount(): int\n    {\n        return null !== $this->lastArrayArgument ? \\PHP_INT_MAX : \\count($this->arguments);\n    }\n\n    /**\n     * Returns the number of required InputArguments.\n     */\n    public function getArgumentRequiredCount(): int\n    {\n        return $this->requiredCount;\n    }\n\n    /**\n     * @return array<string|bool|int|float|array|null>\n     */\n    public function getArgumentDefaults(): array\n    {\n        $values = [];\n        foreach ($this->arguments as $argument) {\n            $values[$argument->getName()] = $argument->getDefault();\n        }\n\n        return $values;\n    }\n\n    /**\n     * Sets the InputOption objects.\n     *\n     * @param InputOption[] $options An array of InputOption objects\n     */\n    public function setOptions(array $options = []): void\n    {\n        $this->options = [];\n        $this->shortcuts = [];\n        $this->negations = [];\n        $this->addOptions($options);\n    }\n\n    /**\n     * Adds an array of InputOption objects.\n     *\n     * @param InputOption[] $options An array of InputOption objects\n     */\n    public function addOptions(array $options = []): void\n    {\n        foreach ($options as $option) {\n            $this->addOption($option);\n        }\n    }\n\n    /**\n     * @throws LogicException When option given already exist\n     */\n    public function addOption(InputOption $option): void\n    {\n        if (isset($this->options[$option->getName()]) && !$option->equals($this->options[$option->getName()])) {\n            throw new LogicException(\\sprintf('An option named \"%s\" already exists.', $option->getName()));\n        }\n        if (isset($this->negations[$option->getName()])) {\n            throw new LogicException(\\sprintf('An option named \"%s\" already exists.', $option->getName()));\n        }\n\n        if ($option->getShortcut()) {\n            foreach (explode('|', $option->getShortcut()) as $shortcut) {\n                if (isset($this->shortcuts[$shortcut]) && !$option->equals($this->options[$this->shortcuts[$shortcut]])) {\n                    throw new LogicException(\\sprintf('An option with shortcut \"%s\" already exists.', $shortcut));\n                }\n            }\n        }\n\n        $this->options[$option->getName()] = $option;\n        if ($option->getShortcut()) {\n            foreach (explode('|', $option->getShortcut()) as $shortcut) {\n                $this->shortcuts[$shortcut] = $option->getName();\n            }\n        }\n\n        if ($option->isNegatable()) {\n            $negatedName = 'no-'.$option->getName();\n            if (isset($this->options[$negatedName])) {\n                throw new LogicException(\\sprintf('An option named \"%s\" already exists.', $negatedName));\n            }\n            $this->negations[$negatedName] = $option->getName();\n        }\n    }\n\n    /**\n     * Returns an InputOption by name.\n     *\n     * @throws InvalidArgumentException When option given doesn't exist\n     */\n    public function getOption(string $name): InputOption\n    {\n        if (!$this->hasOption($name)) {\n            throw new InvalidArgumentException(\\sprintf('The \"--%s\" option does not exist.', $name));\n        }\n\n        return $this->options[$name];\n    }\n\n    /**\n     * Returns true if an InputOption object exists by name.\n     *\n     * This method can't be used to check if the user included the option when\n     * executing the command (use getOption() instead).\n     */\n    public function hasOption(string $name): bool\n    {\n        return isset($this->options[$name]);\n    }\n\n    /**\n     * Gets the array of InputOption objects.\n     *\n     * @return InputOption[]\n     */\n    public function getOptions(): array\n    {\n        return $this->options;\n    }\n\n    /**\n     * Returns true if an InputOption object exists by shortcut.\n     */\n    public function hasShortcut(string $name): bool\n    {\n        return isset($this->shortcuts[$name]);\n    }\n\n    /**\n     * Returns true if an InputOption object exists by negated name.\n     */\n    public function hasNegation(string $name): bool\n    {\n        return isset($this->negations[$name]);\n    }\n\n    /**\n     * Gets an InputOption by shortcut.\n     */\n    public function getOptionForShortcut(string $shortcut): InputOption\n    {\n        return $this->getOption($this->shortcutToName($shortcut));\n    }\n\n    /**\n     * @return array<string|bool|int|float|array|null>\n     */\n    public function getOptionDefaults(): array\n    {\n        $values = [];\n        foreach ($this->options as $option) {\n            $values[$option->getName()] = $option->getDefault();\n        }\n\n        return $values;\n    }\n\n    /**\n     * Returns the InputOption name given a shortcut.\n     *\n     * @throws InvalidArgumentException When option given does not exist\n     *\n     * @internal\n     */\n    public function shortcutToName(string $shortcut): string\n    {\n        if (!isset($this->shortcuts[$shortcut])) {\n            throw new InvalidArgumentException(\\sprintf('The \"-%s\" option does not exist.', $shortcut));\n        }\n\n        return $this->shortcuts[$shortcut];\n    }\n\n    /**\n     * Returns the InputOption name given a negation.\n     *\n     * @throws InvalidArgumentException When option given does not exist\n     *\n     * @internal\n     */\n    public function negationToName(string $negation): string\n    {\n        if (!isset($this->negations[$negation])) {\n            throw new InvalidArgumentException(\\sprintf('The \"--%s\" option does not exist.', $negation));\n        }\n\n        return $this->negations[$negation];\n    }\n\n    /**\n     * Gets the synopsis.\n     */\n    public function getSynopsis(bool $short = false): string\n    {\n        $elements = [];\n\n        if ($short && $this->getOptions()) {\n            $elements[] = '[options]';\n        } elseif (!$short) {\n            foreach ($this->getOptions() as $option) {\n                $value = '';\n                if ($option->acceptValue()) {\n                    $value = \\sprintf(\n                        ' %s%s%s',\n                        $option->isValueOptional() ? '[' : '',\n                        strtoupper($option->getName()),\n                        $option->isValueOptional() ? ']' : ''\n                    );\n                }\n\n                $shortcut = $option->getShortcut() ? \\sprintf('-%s|', $option->getShortcut()) : '';\n                $negation = $option->isNegatable() ? \\sprintf('|--no-%s', $option->getName()) : '';\n                $elements[] = \\sprintf('[%s--%s%s%s]', $shortcut, $option->getName(), $value, $negation);\n            }\n        }\n\n        if (\\count($elements) && $this->getArguments()) {\n            $elements[] = '[--]';\n        }\n\n        $tail = '';\n        foreach ($this->getArguments() as $argument) {\n            $element = '<'.$argument->getName().'>';\n            if ($argument->isArray()) {\n                $element .= '...';\n            }\n\n            if (!$argument->isRequired()) {\n                $element = '['.$element;\n                $tail .= ']';\n            }\n\n            $elements[] = $element;\n        }\n\n        return implode(' ', $elements).$tail;\n    }\n}\n\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 2: Input Definition and Validation\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 20 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 2: Input Definition and Validation\n\nWelcome back! In our last chapter, we explored how to handle user inputs in our console applications. Now, let's take it one step further by defining the rules for those inputs\u2014essentially creating a set of guidelines that ensure users provide valid data.\n\n## Why Do We Need This?\n\nImagine you're building an application where users can add books to a library. You want them to be able to enter details like the book's title, author, and price. However, what if someone types in a negative price or forgets to fill out required fields? To avoid such issues, we need to define these rules and check that users follow them.\n\n## Key Concepts\n\n### 1. Setting Up Questions\nThink of questions as the gatekeepers at an event. They ensure only valid entries get through. In our library app scenario, we'll set up a series of questions for users to answer when adding a book.\n\n```php\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create confirmation and choice questions.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask users questions and handle their responses.\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### 2. Using the Question Class\nThe `Question` class is like a form where you can ask for specific pieces of information. You can create questions that require yes/no answers or multiple-choice options.\n\n- **ConfirmationQuestion**: Asks a user to confirm something.\n- **ChoiceQuestion**: Provides users with a list of choices from which they must select one.\n\n### Example Walkthrough\nLet's walk through an example where we use these classes:\n\n1. We ask the user if they want to add a book. If they say \"yes,\" we proceed; otherwise, nothing happens.\n2. Next, we ask them to choose the genre of the book from two options: fiction or non-fiction.\n\nIf any input is invalid (e.g., an empty response), the program will display an error message and not proceed with adding the book.\n\n## Sequence Diagram\nHere\u2019s a simple sequence diagram illustrating how these questions work:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## How It Works Internally\nNow, let's peek under the hood. The `Question` class handles user inputs by validating them based on predefined rules.\n\n1. **Create Questions**: Define what kind of question it is (confirmation or choice).\n2. **Ask for Input**: Display the question to the user.\n3. **Validate Response**: Check if the response meets the expected criteria.\n4. **Handle Errors**: If the input isn't valid, display an error message and ask again.\n\n## Internal Implementation\nLet's look at how this works with some simple code snippets:\n\n### Example Code\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion;\n\n// Create a confirmation question.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask users questions and handle their responses.\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Explanation\n1. **Creating Questions**: We define the type of question we want to ask (confirmation or choice) and provide default values if needed.\n2. **Asking for Input**: The `ask` method displays the question to the user and waits for their response.\n3. **Validating Response**: If the input is invalid, an error message is displayed.\n\n## Conclusion\nIn this chapter, we learned how to use the `Question` class to define rules for user inputs in our console applications. We saw how to create confirmation questions and choice questions, ensuring that users provide valid data before proceeding with further actions. Next, we\u2019ll dive into event handling and dispatching!\n\nStay tuned for the next chapter: [Event Handling and Dispatching](03_event_handling_and_dispatching_.md)",
    "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `console` about the concept: \"Event Handling and Dispatching\n\". This is Chapter 3.\n\nConcept Details:\n- Name: Event Handling and Dispatching\n\n- Description:\nThis abstraction manages the dispatch of events throughout the application, similar to how traffic signals control the flow of vehicles on a road. It ensures that appropriate actions are taken based on specific events.\n\n\nComplete Tutorial Structure:\n1. [Input Handling and Validation\n](01_input_handling_and_validation_.md)\n2. [Input Definition and Validation\n](02_input_definition_and_validation_.md)\n3. [Event Handling and Dispatching\n](03_event_handling_and_dispatching_.md)\n4. [Command Execution Flow\n](04_command_execution_flow_.md)\n5. [Command Discovery and Loading\n](05_command_discovery_and_loading_.md)\n6. [Signal Handling\n](06_signal_handling_.md)\n7. [Logging and Debugging\n](07_logging_and_debugging_.md)\n8. [Command Testing\n](08_command_testing_.md)\n9. [Output Wrapping\n](09_output_wrapping_.md)\n10. [Output and Formatting\n](10_output_and_formatting_.md)\n\nContext from previous chapters:\n# Chapter 1: Input Handling and Validation\n\nWelcome to our journey into building robust console applications! In the previous chapter, we started exploring how to create commands that can be executed from the command line. However, there's an important aspect we haven't covered yet\u2014ensuring that the input provided by users is valid before proceeding with execution. Think of it like a gatekeeper at an event who checks IDs and only allows entry if they meet specific criteria.\n\n## Why Validation Matters\n\nImagine you're building a console application to manage a library. You have a command to add books, but what happens when someone inputs invalid data? For example, entering a negative number for the book's price or leaving fields blank. Without proper validation, your program might crash or produce incorrect results. This is where input handling and validation come in.\n\n## Key Concepts\n\n### 1. Question Class\nThe `Question` class acts as our gatekeeper. It ensures that user inputs are valid before proceeding with any further actions. Let's break down how it works.\n\n#### Example Scenario: Adding a Book\nSuppose we want to add a new book to the library using a command-line interface. We need to ask for the book's title, author, and price. If any of these fields are invalid (e.g., an empty string or a negative number), our program should not proceed.\n\n### 2. Setting Up Questions\nIn the `Question` class, we can set up questions with default values and validators. For instance, when asking for the book's title, if no value is provided by the user, it defaults to \"Unknown\". If the price is inputted incorrectly (e.g., a negative number), the program will throw an error.\n\n### 3. Using Choice Questions\nSometimes, users might need to make choices from predefined options. For example, we could ask them to select if the book is fiction or non-fiction. The `ChoiceQuestion` class ensures that only valid choices are accepted.\n\n## How to Use It\n\nLet's see how we can use these classes in a practical scenario:\n\n### Example Code\nHere\u2019s a simple example of setting up questions and handling user input using the `Question` and `ChoiceQuestion` classes.\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create a confirmation question to ask if the book should be added.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question for the genre of the book.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask the user questions and handle their responses.\n$helperSet = \\Symfony\\Component\\Console\\Helper\\HelperSet::create();\n$io = $helperSet->get('io');\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Step-by-Step Explanation\n1. **Create Confirmation Question**: We ask the user if they want to add a book.\n2. **Create Choice Question**: We give the user options for the genre of the book.\n3. **Ask Questions and Handle Responses**: The program waits for user input, validates it using built-in validators, and handles any errors.\n\n### Internal Walkthrough\nWhen you run this code:\n- First, you\u2019ll be prompted with a confirmation question: `Do you want to add this book? (yes/no): yes`\n- Then, another prompt will appear asking about the genre: `What is the genre of the book? [fiction, non-fiction]: fiction`\n\nIf any input is invalid, an error message will be displayed.\n\n### Mermaid Diagram\nHere\u2019s a simple sequence diagram illustrating the flow:\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## Conclusion\nIn this chapter, we learned how to handle user inputs using the `Question` class. We saw how to create questions with validation and choices, ensuring that our application handles invalid data gracefully. Next, we\u2019ll dive deeper into the internal implementation of these classes.\n\nStay tuned for the next chapter where we will explore more about event handling and dispatching! [Next Chapter: Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 2: Input Definition and Validation\n\nWelcome back! In our last chapter, we explored how to handle user inputs in our console applications. Now, let's take it one step further by defining the rules for those inputs\u2014essentially creating a set of guidelines that ensure users provide valid data.\n\n## Why Do We Need This?\n\nImagine you're building an application where users can add books to a library. You want them to be able to enter details like the book's title, author, and price. However, what if someone types in a negative price or forgets to fill out required fields? To avoid such issues, we need to define these rules and check that users follow them.\n\n## Key Concepts\n\n### 1. Setting Up Questions\nThink of questions as the gatekeepers at an event. They ensure only valid entries get through. In our library app scenario, we'll set up a series of questions for users to answer when adding a book.\n\n```php\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create confirmation and choice questions.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask users questions and handle their responses.\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### 2. Using the Question Class\nThe `Question` class is like a form where you can ask for specific pieces of information. You can create questions that require yes/no answers or multiple-choice options.\n\n- **ConfirmationQuestion**: Asks a user to confirm something.\n- **ChoiceQuestion**: Provides users with a list of choices from which they must select one.\n\n### Example Walkthrough\nLet's walk through an example where we use these classes:\n\n1. We ask the user if they want to add a book. If they say \"yes,\" we proceed; otherwise, nothing happens.\n2. Next, we ask them to choose the genre of the book from two options: fiction or non-fiction.\n\nIf any input is invalid (e.g., an empty response), the program will display an error message and not proceed with adding the book.\n\n## Sequence Diagram\nHere\u2019s a simple sequence diagram illustrating how these questions work:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## How It Works Internally\nNow, let's peek under the hood. The `Question` class handles user inputs by validating them based on predefined rules.\n\n1. **Create Questions**: Define what kind of question it is (confirmation or choice).\n2. **Ask for Input**: Display the question to the user.\n3. **Validate Response**: Check if the response meets the expected criteria.\n4. **Handle Errors**: If the input isn't valid, display an error message and ask again.\n\n## Internal Implementation\nLet's look at how this works with some simple code snippets:\n\n### Example Code\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion;\n\n// Create a confirmation question.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask users questions and handle their responses.\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Explanation\n1. **Creating Questions**: We define the type of question we want to ask (confirmation or choice) and provide default values if needed.\n2. **Asking for Input**: The `ask` method displays the question to the user and waits for their response.\n3. **Validating Response**: If the input is invalid, an error message is displayed.\n\n## Conclusion\nIn this chapter, we learned how to use the `Question` class to define rules for user inputs in our console applications. We saw how to create confirmation questions and choice questions, ensuring that users provide valid data before proceeding with further actions. Next, we\u2019ll dive into event handling and dispatching!\n\nStay tuned for the next chapter: [Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: Event/ConsoleEvent.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\n/**\n * Allows to inspect input and output of a command.\n *\n * @author Francesco Levorato <git@flevour.net>\n */\nclass ConsoleEvent extends Event\n{\n    public function __construct(\n        protected ?Command $command,\n        private InputInterface $input,\n        private OutputInterface $output,\n    ) {\n    }\n\n    /**\n     * Gets the command that is executed.\n     */\n    public function getCommand(): ?Command\n    {\n        return $this->command;\n    }\n\n    /**\n     * Gets the input instance.\n     */\n    public function getInput(): InputInterface\n    {\n        return $this->input;\n    }\n\n    /**\n     * Gets the output instance.\n     */\n    public function getOutput(): OutputInterface\n    {\n        return $this->output;\n    }\n}\n\n\n--- File: Event/ConsoleErrorEvent.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Allows to handle throwables thrown while running a command.\n *\n * @author Wouter de Jong <wouter@wouterj.nl>\n */\nfinal class ConsoleErrorEvent extends ConsoleEvent\n{\n    private int $exitCode;\n\n    public function __construct(\n        InputInterface $input,\n        OutputInterface $output,\n        private \\Throwable $error,\n        ?Command $command = null,\n    ) {\n        parent::__construct($command, $input, $output);\n    }\n\n    public function getError(): \\Throwable\n    {\n        return $this->error;\n    }\n\n    public function setError(\\Throwable $error): void\n    {\n        $this->error = $error;\n    }\n\n    public function setExitCode(int $exitCode): void\n    {\n        $this->exitCode = $exitCode;\n\n        $r = new \\ReflectionProperty($this->error, 'code');\n        $r->setValue($this->error, $this->exitCode);\n    }\n\n    public function getExitCode(): int\n    {\n        return $this->exitCode ?? (\\is_int($this->error->getCode()) && 0 !== $this->error->getCode() ? $this->error->getCode() : 1);\n    }\n}\n\n\n--- File: Event/ConsoleAlarmEvent.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nfinal class ConsoleAlarmEvent extends ConsoleEvent\n{\n    public function __construct(\n        Command $command,\n        InputInterface $input,\n        OutputInterface $output,\n        private int|false $exitCode = 0,\n    ) {\n        parent::__construct($command, $input, $output);\n    }\n\n    public function setExitCode(int $exitCode): void\n    {\n        if ($exitCode < 0 || $exitCode > 255) {\n            throw new \\InvalidArgumentException('Exit code must be between 0 and 255.');\n        }\n\n        $this->exitCode = $exitCode;\n    }\n\n    public function abortExit(): void\n    {\n        $this->exitCode = false;\n    }\n\n    public function getExitCode(): int|false\n    {\n        return $this->exitCode;\n    }\n}\n\n\n--- File: Event/ConsoleTerminateEvent.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Allows to manipulate the exit code of a command after its execution.\n *\n * @author Francesco Levorato <git@flevour.net>\n * @author Jules Pietri <jules@heahprod.com>\n */\nfinal class ConsoleTerminateEvent extends ConsoleEvent\n{\n    public function __construct(\n        Command $command,\n        InputInterface $input,\n        OutputInterface $output,\n        private int $exitCode,\n        private readonly ?int $interruptingSignal = null,\n    ) {\n        parent::__construct($command, $input, $output);\n    }\n\n    public function setExitCode(int $exitCode): void\n    {\n        $this->exitCode = $exitCode;\n    }\n\n    public function getExitCode(): int\n    {\n        return $this->exitCode;\n    }\n\n    public function getInterruptingSignal(): ?int\n    {\n        return $this->interruptingSignal;\n    }\n}\n\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 3: Event Handling and Dispatching\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 20 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 3: Event Handling and Dispatching\n\nWelcome back! In our last chapters, we learned about handling user inputs in our console applications and setting up validation rules to ensure those inputs are correct. Now, let's dive into how events work in these systems, much like traffic lights control the flow of vehicles on a road.\n\n## Why Do We Need Event Handling?\n\nImagine you're building an application where users can add books to a library. When someone adds a book, various things might happen\u2014like updating the database, sending a notification, or logging the action. How do we make sure all these actions are handled correctly and efficiently? That's where event handling comes in.\n\n## Key Concepts\n\n### 1. What is an Event?\nAn event is like a signal that tells our application something important has happened. For example, when a user adds a book, it triggers the \"book added\" event.\n\n### 2. Event Handling\nEvent handling means catching these signals and responding to them. Our application can listen for specific events and then perform actions based on those events.\n\n## Example Scenario: Adding a Book\n\nLet's use our library example again. When a user wants to add a book, here are the steps we might want to follow:\n\n1. Validate the input (like checking if the price is positive).\n2. Log the action in a database.\n3. Send a notification to other parts of the system.\n\nWe can set up events for each of these actions and ensure they all work smoothly together.\n\n## How It Works\n\nImagine we have an event like \"BookAddedEvent\". When this event happens, our application will take note and perform the necessary actions.\n\n### 1. Defining Events\nFirst, we define what kind of events we want to handle. For example:\n\n```php\n// In BookAddedEvent.php\nclass BookAddedEvent {\n    private $bookId;\n\n    public function __construct($bookId) {\n        $this->bookId = $bookId;\n    }\n\n    public function getBookId() {\n        return $this->bookId;\n    }\n}\n```\n\n### 2. Dispatching Events\nWhen a book is added, we dispatch (or trigger) the event:\n\n```php\n// In AddBookCommand.php\npublic function execute(InputInterface $input, OutputInterface $output) {\n    // Validate and add the book to the database.\n    \n    $bookId = $this->database->addBook($title, $author, $price);\n    \n    // Dispatch the event\n    $eventDispatcher->dispatch(new BookAddedEvent($bookId));\n}\n```\n\n### 3. Handling Events\nOther parts of our application can listen for this event and perform actions:\n\n```php\n// In DatabaseLogger.php\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass DatabaseLogger implements EventSubscriberInterface {\n    public static function getSubscribedEvents() {\n        return [\n            BookAddedEvent::class => 'logBookAddition',\n        ];\n    }\n\n    public function logBookAddition(BookAddedEvent $event) {\n        $bookId = $event->getBookId();\n        // Log the book addition in a database\n        echo \"Logging that book with ID $bookId was added.\\n\";\n    }\n}\n```\n\n### 4. Example Walkthrough\n\nLet's walk through an example sequence diagram to see how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandHandler as CH\n    participant DatabaseLogger as DL\n    participant BookAddedEvent as E\n\n    U->>CH: Add book \"The Great Gatsby\"\n    CH->>DatabaseLogger: Dispatch BookAddedEvent\n    DL->>DB: Log the addition of the book with ID 123456\n```\n\n## Internal Implementation\n\nNow, let's look at what happens step-by-step:\n\n1. **User Inputs a Command**: The user adds a book.\n2. **Command Handler Validates and Adds the Book**: It checks if all inputs are valid and adds the book to the database.\n3. **Dispatch Event**: The `BookAddedEvent` is dispatched with the book's ID.\n4. **Event Listeners Handle the Event**: The `DatabaseLogger` listens for this event and logs the addition in a database.\n\n## Conclusion\n\nIn this chapter, we learned about event handling and dispatching. We saw how events help coordinate different parts of an application to ensure everything works smoothly together. Next, we'll explore more advanced concepts like command execution flow, which will take us one step further in building robust applications.\n\nStay tuned for the next chapter: [Command Execution Flow](04_command_execution_flow_.md)",
    "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `console` about the concept: \"Command Execution Flow\n\". This is Chapter 4.\n\nConcept Details:\n- Name: Command Execution Flow\n\n- Description:\nThis abstraction handles the lifecycle of executing commands in a structured manner. It's like orchestrating a symphony where each command is a musician playing their part, and events are the conductors directing the execution flow.\n\n\nComplete Tutorial Structure:\n1. [Input Handling and Validation\n](01_input_handling_and_validation_.md)\n2. [Input Definition and Validation\n](02_input_definition_and_validation_.md)\n3. [Event Handling and Dispatching\n](03_event_handling_and_dispatching_.md)\n4. [Command Execution Flow\n](04_command_execution_flow_.md)\n5. [Command Discovery and Loading\n](05_command_discovery_and_loading_.md)\n6. [Signal Handling\n](06_signal_handling_.md)\n7. [Logging and Debugging\n](07_logging_and_debugging_.md)\n8. [Command Testing\n](08_command_testing_.md)\n9. [Output Wrapping\n](09_output_wrapping_.md)\n10. [Output and Formatting\n](10_output_and_formatting_.md)\n\nContext from previous chapters:\n# Chapter 1: Input Handling and Validation\n\nWelcome to our journey into building robust console applications! In the previous chapter, we started exploring how to create commands that can be executed from the command line. However, there's an important aspect we haven't covered yet\u2014ensuring that the input provided by users is valid before proceeding with execution. Think of it like a gatekeeper at an event who checks IDs and only allows entry if they meet specific criteria.\n\n## Why Validation Matters\n\nImagine you're building a console application to manage a library. You have a command to add books, but what happens when someone inputs invalid data? For example, entering a negative number for the book's price or leaving fields blank. Without proper validation, your program might crash or produce incorrect results. This is where input handling and validation come in.\n\n## Key Concepts\n\n### 1. Question Class\nThe `Question` class acts as our gatekeeper. It ensures that user inputs are valid before proceeding with any further actions. Let's break down how it works.\n\n#### Example Scenario: Adding a Book\nSuppose we want to add a new book to the library using a command-line interface. We need to ask for the book's title, author, and price. If any of these fields are invalid (e.g., an empty string or a negative number), our program should not proceed.\n\n### 2. Setting Up Questions\nIn the `Question` class, we can set up questions with default values and validators. For instance, when asking for the book's title, if no value is provided by the user, it defaults to \"Unknown\". If the price is inputted incorrectly (e.g., a negative number), the program will throw an error.\n\n### 3. Using Choice Questions\nSometimes, users might need to make choices from predefined options. For example, we could ask them to select if the book is fiction or non-fiction. The `ChoiceQuestion` class ensures that only valid choices are accepted.\n\n## How to Use It\n\nLet's see how we can use these classes in a practical scenario:\n\n### Example Code\nHere\u2019s a simple example of setting up questions and handling user input using the `Question` and `ChoiceQuestion` classes.\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create a confirmation question to ask if the book should be added.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question for the genre of the book.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask the user questions and handle their responses.\n$helperSet = \\Symfony\\Component\\Console\\Helper\\HelperSet::create();\n$io = $helperSet->get('io');\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Step-by-Step Explanation\n1. **Create Confirmation Question**: We ask the user if they want to add a book.\n2. **Create Choice Question**: We give the user options for the genre of the book.\n3. **Ask Questions and Handle Responses**: The program waits for user input, validates it using built-in validators, and handles any errors.\n\n### Internal Walkthrough\nWhen you run this code:\n- First, you\u2019ll be prompted with a confirmation question: `Do you want to add this book? (yes/no): yes`\n- Then, another prompt will appear asking about the genre: `What is the genre of the book? [fiction, non-fiction]: fiction`\n\nIf any input is invalid, an error message will be displayed.\n\n### Mermaid Diagram\nHere\u2019s a simple sequence diagram illustrating the flow:\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## Conclusion\nIn this chapter, we learned how to handle user inputs using the `Question` class. We saw how to create questions with validation and choices, ensuring that our application handles invalid data gracefully. Next, we\u2019ll dive deeper into the internal implementation of these classes.\n\nStay tuned for the next chapter where we will explore more about event handling and dispatching! [Next Chapter: Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 2: Input Definition and Validation\n\nWelcome back! In our last chapter, we explored how to handle user inputs in our console applications. Now, let's take it one step further by defining the rules for those inputs\u2014essentially creating a set of guidelines that ensure users provide valid data.\n\n## Why Do We Need This?\n\nImagine you're building an application where users can add books to a library. You want them to be able to enter details like the book's title, author, and price. However, what if someone types in a negative price or forgets to fill out required fields? To avoid such issues, we need to define these rules and check that users follow them.\n\n## Key Concepts\n\n### 1. Setting Up Questions\nThink of questions as the gatekeepers at an event. They ensure only valid entries get through. In our library app scenario, we'll set up a series of questions for users to answer when adding a book.\n\n```php\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create confirmation and choice questions.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask users questions and handle their responses.\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### 2. Using the Question Class\nThe `Question` class is like a form where you can ask for specific pieces of information. You can create questions that require yes/no answers or multiple-choice options.\n\n- **ConfirmationQuestion**: Asks a user to confirm something.\n- **ChoiceQuestion**: Provides users with a list of choices from which they must select one.\n\n### Example Walkthrough\nLet's walk through an example where we use these classes:\n\n1. We ask the user if they want to add a book. If they say \"yes,\" we proceed; otherwise, nothing happens.\n2. Next, we ask them to choose the genre of the book from two options: fiction or non-fiction.\n\nIf any input is invalid (e.g., an empty response), the program will display an error message and not proceed with adding the book.\n\n## Sequence Diagram\nHere\u2019s a simple sequence diagram illustrating how these questions work:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## How It Works Internally\nNow, let's peek under the hood. The `Question` class handles user inputs by validating them based on predefined rules.\n\n1. **Create Questions**: Define what kind of question it is (confirmation or choice).\n2. **Ask for Input**: Display the question to the user.\n3. **Validate Response**: Check if the response meets the expected criteria.\n4. **Handle Errors**: If the input isn't valid, display an error message and ask again.\n\n## Internal Implementation\nLet's look at how this works with some simple code snippets:\n\n### Example Code\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion;\n\n// Create a confirmation question.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask users questions and handle their responses.\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Explanation\n1. **Creating Questions**: We define the type of question we want to ask (confirmation or choice) and provide default values if needed.\n2. **Asking for Input**: The `ask` method displays the question to the user and waits for their response.\n3. **Validating Response**: If the input is invalid, an error message is displayed.\n\n## Conclusion\nIn this chapter, we learned how to use the `Question` class to define rules for user inputs in our console applications. We saw how to create confirmation questions and choice questions, ensuring that users provide valid data before proceeding with further actions. Next, we\u2019ll dive into event handling and dispatching!\n\nStay tuned for the next chapter: [Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 3: Event Handling and Dispatching\n\nWelcome back! In our last chapters, we learned about handling user inputs in our console applications and setting up validation rules to ensure those inputs are correct. Now, let's dive into how events work in these systems, much like traffic lights control the flow of vehicles on a road.\n\n## Why Do We Need Event Handling?\n\nImagine you're building an application where users can add books to a library. When someone adds a book, various things might happen\u2014like updating the database, sending a notification, or logging the action. How do we make sure all these actions are handled correctly and efficiently? That's where event handling comes in.\n\n## Key Concepts\n\n### 1. What is an Event?\nAn event is like a signal that tells our application something important has happened. For example, when a user adds a book, it triggers the \"book added\" event.\n\n### 2. Event Handling\nEvent handling means catching these signals and responding to them. Our application can listen for specific events and then perform actions based on those events.\n\n## Example Scenario: Adding a Book\n\nLet's use our library example again. When a user wants to add a book, here are the steps we might want to follow:\n\n1. Validate the input (like checking if the price is positive).\n2. Log the action in a database.\n3. Send a notification to other parts of the system.\n\nWe can set up events for each of these actions and ensure they all work smoothly together.\n\n## How It Works\n\nImagine we have an event like \"BookAddedEvent\". When this event happens, our application will take note and perform the necessary actions.\n\n### 1. Defining Events\nFirst, we define what kind of events we want to handle. For example:\n\n```php\n// In BookAddedEvent.php\nclass BookAddedEvent {\n    private $bookId;\n\n    public function __construct($bookId) {\n        $this->bookId = $bookId;\n    }\n\n    public function getBookId() {\n        return $this->bookId;\n    }\n}\n```\n\n### 2. Dispatching Events\nWhen a book is added, we dispatch (or trigger) the event:\n\n```php\n// In AddBookCommand.php\npublic function execute(InputInterface $input, OutputInterface $output) {\n    // Validate and add the book to the database.\n    \n    $bookId = $this->database->addBook($title, $author, $price);\n    \n    // Dispatch the event\n    $eventDispatcher->dispatch(new BookAddedEvent($bookId));\n}\n```\n\n### 3. Handling Events\nOther parts of our application can listen for this event and perform actions:\n\n```php\n// In DatabaseLogger.php\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass DatabaseLogger implements EventSubscriberInterface {\n    public static function getSubscribedEvents() {\n        return [\n            BookAddedEvent::class => 'logBookAddition',\n        ];\n    }\n\n    public function logBookAddition(BookAddedEvent $event) {\n        $bookId = $event->getBookId();\n        // Log the book addition in a database\n        echo \"Logging that book with ID $bookId was added.\\n\";\n    }\n}\n```\n\n### 4. Example Walkthrough\n\nLet's walk through an example sequence diagram to see how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandHandler as CH\n    participant DatabaseLogger as DL\n    participant BookAddedEvent as E\n\n    U->>CH: Add book \"The Great Gatsby\"\n    CH->>DatabaseLogger: Dispatch BookAddedEvent\n    DL->>DB: Log the addition of the book with ID 123456\n```\n\n## Internal Implementation\n\nNow, let's look at what happens step-by-step:\n\n1. **User Inputs a Command**: The user adds a book.\n2. **Command Handler Validates and Adds the Book**: It checks if all inputs are valid and adds the book to the database.\n3. **Dispatch Event**: The `BookAddedEvent` is dispatched with the book's ID.\n4. **Event Listeners Handle the Event**: The `DatabaseLogger` listens for this event and logs the addition in a database.\n\n## Conclusion\n\nIn this chapter, we learned about event handling and dispatching. We saw how events help coordinate different parts of an application to ensure everything works smoothly together. Next, we'll explore more advanced concepts like command execution flow, which will take us one step further in building robust applications.\n\nStay tuned for the next chapter: [Command Execution Flow](04_command_execution_flow_.md)\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: ConsoleEvents.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console;\n\nuse Symfony\\Component\\Console\\Event\\ConsoleCommandEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleErrorEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleSignalEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent;\n\n/**\n * Contains all events dispatched by an Application.\n *\n * @author Francesco Levorato <git@flevour.net>\n */\nfinal class ConsoleEvents\n{\n    /**\n     * The COMMAND event allows you to attach listeners before any command is\n     * executed by the console. It also allows you to modify the command, input and output\n     * before they are handed to the command.\n     *\n     * @Event(\"Symfony\\Component\\Console\\Event\\ConsoleCommandEvent\")\n     */\n    public const COMMAND = 'console.command';\n\n    /**\n     * The SIGNAL event allows you to perform some actions\n     * after the command execution was interrupted.\n     *\n     * @Event(\"Symfony\\Component\\Console\\Event\\ConsoleSignalEvent\")\n     */\n    public const SIGNAL = 'console.signal';\n\n    /**\n     * The TERMINATE event allows you to attach listeners after a command is\n     * executed by the console.\n     *\n     * @Event(\"Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent\")\n     */\n    public const TERMINATE = 'console.terminate';\n\n    /**\n     * The ERROR event occurs when an uncaught exception or error appears.\n     *\n     * This event allows you to deal with the exception/error or\n     * to modify the thrown exception.\n     *\n     * @Event(\"Symfony\\Component\\Console\\Event\\ConsoleErrorEvent\")\n     */\n    public const ERROR = 'console.error';\n\n    /**\n     * Event aliases.\n     *\n     * These aliases can be consumed by RegisterListenersPass.\n     */\n    public const ALIASES = [\n        ConsoleCommandEvent::class => self::COMMAND,\n        ConsoleErrorEvent::class => self::ERROR,\n        ConsoleSignalEvent::class => self::SIGNAL,\n        ConsoleTerminateEvent::class => self::TERMINATE,\n    ];\n}\n\n\n--- File: Application.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Command\\CompleteCommand;\nuse Symfony\\Component\\Console\\Command\\DumpCompletionCommand;\nuse Symfony\\Component\\Console\\Command\\HelpCommand;\nuse Symfony\\Component\\Console\\Command\\LazyCommand;\nuse Symfony\\Component\\Console\\Command\\ListCommand;\nuse Symfony\\Component\\Console\\Command\\SignalableCommandInterface;\nuse Symfony\\Component\\Console\\CommandLoader\\CommandLoaderInterface;\nuse Symfony\\Component\\Console\\Completion\\CompletionInput;\nuse Symfony\\Component\\Console\\Completion\\CompletionSuggestions;\nuse Symfony\\Component\\Console\\Completion\\Suggestion;\nuse Symfony\\Component\\Console\\Event\\ConsoleAlarmEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleCommandEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleErrorEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleSignalEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent;\nuse Symfony\\Component\\Console\\Exception\\CommandNotFoundException;\nuse Symfony\\Component\\Console\\Exception\\ExceptionInterface;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\nuse Symfony\\Component\\Console\\Exception\\NamespaceNotFoundException;\nuse Symfony\\Component\\Console\\Exception\\RuntimeException;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatter;\nuse Symfony\\Component\\Console\\Helper\\DebugFormatterHelper;\nuse Symfony\\Component\\Console\\Helper\\DescriptorHelper;\nuse Symfony\\Component\\Console\\Helper\\FormatterHelper;\nuse Symfony\\Component\\Console\\Helper\\Helper;\nuse Symfony\\Component\\Console\\Helper\\HelperSet;\nuse Symfony\\Component\\Console\\Helper\\ProcessHelper;\nuse Symfony\\Component\\Console\\Helper\\QuestionHelper;\nuse Symfony\\Component\\Console\\Input\\ArgvInput;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputAwareInterface;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutput;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\SignalRegistry\\SignalRegistry;\nuse Symfony\\Component\\Console\\Style\\SymfonyStyle;\nuse Symfony\\Component\\ErrorHandler\\ErrorHandler;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Contracts\\Service\\ResetInterface;\n\n/**\n * An Application is the container for a collection of commands.\n *\n * It is the main entry point of a Console application.\n *\n * This class is optimized for a standard CLI environment.\n *\n * Usage:\n *\n *     $app = new Application('myapp', '1.0 (stable)');\n *     $app->add(new SimpleCommand());\n *     $app->run();\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass Application implements ResetInterface\n{\n    private array $commands = [];\n    private bool $wantHelps = false;\n    private ?Command $runningCommand = null;\n    private ?CommandLoaderInterface $commandLoader = null;\n    private bool $catchExceptions = true;\n    private bool $catchErrors = false;\n    private bool $autoExit = true;\n    private InputDefinition $definition;\n    private HelperSet $helperSet;\n    private ?EventDispatcherInterface $dispatcher = null;\n    private Terminal $terminal;\n    private string $defaultCommand;\n    private bool $singleCommand = false;\n    private bool $initialized = false;\n    private ?SignalRegistry $signalRegistry = null;\n    private array $signalsToDispatchEvent = [];\n    private ?int $alarmInterval = null;\n\n    public function __construct(\n        private string $name = 'UNKNOWN',\n        private string $version = 'UNKNOWN',\n    ) {\n        $this->terminal = new Terminal();\n        $this->defaultCommand = 'list';\n        if (\\defined('SIGINT') && SignalRegistry::isSupported()) {\n            $this->signalRegistry = new SignalRegistry();\n            $this->signalsToDispatchEvent = [\\SIGINT, \\SIGQUIT, \\SIGTERM, \\SIGUSR1, \\SIGUSR2, \\SIGALRM];\n        }\n    }\n\n    /**\n     * @final\n     */\n    public function setDispatcher(EventDispatcherInterface $dispatcher): void\n    {\n        $this->dispatcher = $dispatcher;\n    }\n\n    public function setCommandLoader(CommandLoaderInterface $commandLoader): void\n    {\n        $this->commandLoader = $commandLoader;\n    }\n\n    public function getSignalRegistry(): SignalRegistry\n    {\n        if (!$this->signalRegistry) {\n            throw new RuntimeException('Signals are not supported. Make sure that the \"pcntl\" extension is installed and that \"pcntl_*\" functions are not disabled by your php.ini\\'s \"disable_functions\" directive.');\n        }\n\n        return $this->signalRegistry;\n    }\n\n    public function setSignalsToDispatchEvent(int ...$signalsToDispatchEvent): void\n    {\n        $this->signalsToDispatchEvent = $signalsToDispatchEvent;\n    }\n\n    /**\n     * Sets the interval to schedule a SIGALRM signal in seconds.\n     */\n    public function setAlarmInterval(?int $seconds): void\n    {\n        $this->alarmInterval = $seconds;\n        $this->scheduleAlarm();\n    }\n\n    /**\n     * Gets the interval in seconds on which a SIGALRM signal is dispatched.\n     */\n    public function getAlarmInterval(): ?int\n    {\n        return $this->alarmInterval;\n    }\n\n    private function scheduleAlarm(): void\n    {\n        if (null !== $this->alarmInterval) {\n            $this->getSignalRegistry()->scheduleAlarm($this->alarmInterval);\n        }\n    }\n\n    /**\n     * Runs the current application.\n     *\n     * @return int 0 if everything went fine, or an error code\n     *\n     * @throws \\Exception When running fails. Bypass this when {@link setCatchExceptions()}.\n     */\n    public function run(?InputInterface $input = null, ?OutputInterface $output = null): int\n    {\n        if (\\function_exists('putenv')) {\n            @putenv('LINES='.$this->terminal->getHeight());\n            @putenv('COLUMNS='.$this->terminal->getWidth());\n        }\n\n        $input ??= new ArgvInput();\n        $output ??= new ConsoleOutput();\n\n        $renderException = function (\\Throwable $e) use ($output) {\n            if ($output instanceof ConsoleOutputInterface) {\n                $this->renderThrowable($e, $output->getErrorOutput());\n            } else {\n                $this->renderThrowable($e, $output);\n            }\n        };\n        if ($phpHandler = set_exception_handler($renderException)) {\n            restore_exception_handler();\n            if (!\\is_array($phpHandler) || !$phpHandler[0] instanceof ErrorHandler) {\n                $errorHandler = true;\n            } elseif ($errorHandler = $phpHandler[0]->setExceptionHandler($renderException)) {\n                $phpHandler[0]->setExceptionHandler($errorHandler);\n            }\n        }\n\n        try {\n            $this->configureIO($input, $output);\n\n            $exitCode = $this->doRun($input, $output);\n        } catch (\\Throwable $e) {\n            if ($e instanceof \\Exception && !$this->catchExceptions) {\n                throw $e;\n            }\n            if (!$e instanceof \\Exception && !$this->catchErrors) {\n                throw $e;\n            }\n\n            $renderException($e);\n\n            $exitCode = $e->getCode();\n            if (is_numeric($exitCode)) {\n                $exitCode = (int) $exitCode;\n                if ($exitCode <= 0) {\n                    $exitCode = 1;\n                }\n            } else {\n                $exitCode = 1;\n            }\n        } finally {\n            // if the exception handler changed, keep it\n            // otherwise, unregister $renderException\n            if (!$phpHandler) {\n                if (set_exception_handler($renderException) === $renderException) {\n                    restore_exception_handler();\n                }\n                restore_exception_handler();\n            } elseif (!$errorHandler) {\n                $finalHandler = $phpHandler[0]->setExceptionHandler(null);\n                if ($finalHandler !== $renderException) {\n                    $phpHandler[0]->setExceptionHandler($finalHandler);\n                }\n            }\n        }\n\n        if ($this->autoExit) {\n            if ($exitCode > 255) {\n                $exitCode = 255;\n            }\n\n            exit($exitCode);\n        }\n\n        return $exitCode;\n    }\n\n    /**\n     * Runs the current application.\n     *\n     * @return int 0 if everything went fine, or an error code\n     */\n    public function doRun(InputInterface $input, OutputInterface $output): int\n    {\n        if (true === $input->hasParameterOption(['--version', '-V'], true)) {\n            $output->writeln($this->getLongVersion());\n\n            return 0;\n        }\n\n        try {\n            // Makes ArgvInput::getFirstArgument() able to distinguish an option from an argument.\n            $input->bind($this->getDefinition());\n        } catch (ExceptionInterface) {\n            // Errors must be ignored, full binding/validation happens later when the command is known.\n        }\n\n        $name = $this->getCommandName($input);\n        if (true === $input->hasParameterOption(['--help', '-h'], true)) {\n            if (!$name) {\n                $name = 'help';\n                $input = new ArrayInput(['command_name' => $this->defaultCommand]);\n            } else {\n                $this->wantHelps = true;\n            }\n        }\n\n        if (!$name) {\n            $name = $this->defaultCommand;\n            $definition = $this->getDefinition();\n            $definition->setArguments(array_merge(\n                $definition->getArguments(),\n                [\n                    'command' => new InputArgument('command', InputArgument::OPTIONAL, $definition->getArgument('command')->getDescription(), $name),\n                ]\n            ));\n        }\n\n        try {\n            $this->runningCommand = null;\n            // the command name MUST be the first element of the input\n            $command = $this->find($name);\n        } catch (\\Throwable $e) {\n            if (($e instanceof CommandNotFoundException && !$e instanceof NamespaceNotFoundException) && 1 === \\count($alternatives = $e->getAlternatives()) && $input->isInteractive()) {\n                $alternative = $alternatives[0];\n\n                $style = new SymfonyStyle($input, $output);\n                $output->writeln('');\n                $formattedBlock = (new FormatterHelper())->formatBlock(\\sprintf('Command \"%s\" is not defined.', $name), 'error', true);\n                $output->writeln($formattedBlock);\n                if (!$style->confirm(\\sprintf('Do you want to run \"%s\" instead? ', $alternative), false)) {\n                    if (null !== $this->dispatcher) {\n                        $event = new ConsoleErrorEvent($input, $output, $e);\n                        $this->dispatcher->dispatch($event, ConsoleEvents::ERROR);\n\n                        return $event->getExitCode();\n                    }\n\n                    return 1;\n                }\n\n                $command = $this->find($alternative);\n            } else {\n                if (null !== $this->dispatcher) {\n                    $event = new ConsoleErrorEvent($input, $output, $e);\n                    $this->dispatcher->dispatch($event, ConsoleEvents::ERROR);\n\n                    if (0 === $event->getExitCode()) {\n                        return 0;\n                    }\n\n                    $e = $event->getError();\n                }\n\n                try {\n                    if ($e instanceof CommandNotFoundException && $namespace = $this->findNamespace($name)) {\n                        $helper = new DescriptorHelper();\n                        $helper->describe($output instanceof ConsoleOutputInterface ? $output->getErrorOutput() : $output, $this, [\n                            'format' => 'txt',\n                            'raw_text' => false,\n                            'namespace' => $namespace,\n                            'short' => false,\n                        ]);\n\n                        return isset($event) ? $event->getExitCode() : 1;\n                    }\n\n                    throw $e;\n                } catch (NamespaceNotFoundException) {\n                    throw $e;\n                }\n            }\n        }\n\n        if ($command instanceof LazyCommand) {\n            $command = $command->getCommand();\n        }\n\n        $this->runningCommand = $command;\n        $exitCode = $this->doRunCommand($command, $input, $output);\n        $this->runningCommand = null;\n\n        return $exitCode;\n    }\n\n    public function reset(): void\n    {\n    }\n\n    public function setHelperSet(HelperSet $helperSet): void\n    {\n        $this->helperSet = $helperSet;\n    }\n\n    /**\n     * Get the helper set associated with the command.\n     */\n    public function getHelperSet(): HelperSet\n    {\n        return $this->helperSet ??= $this->getDefaultHelperSet();\n    }\n\n    public function setDefinition(InputDefinition $definition): void\n    {\n        $this->definition = $definition;\n    }\n\n    /**\n     * Gets the InputDefinition related to this Application.\n     */\n    public function getDefinition(): InputDefinition\n    {\n        $this->definition ??= $this->getDefaultInputDefinition();\n\n        if ($this->singleCommand) {\n            $inputDefinition = $this->definition;\n            $inputDefinition->setArguments();\n\n            return $inputDefinition;\n        }\n\n        return $this->definition;\n    }\n\n    /**\n     * Adds suggestions to $suggestions for the current completion input (e.g. option or argument).\n     */\n    public function complete(CompletionInput $input, CompletionSuggestions $suggestions): void\n    {\n        if (\n            CompletionInput::TYPE_ARGUMENT_VALUE === $input->getCompletionType()\n            && 'command' === $input->getCompletionName()\n        ) {\n            foreach ($this->all() as $name => $command) {\n                // skip hidden commands and aliased commands as they already get added below\n                if ($command->isHidden() || $command->getName() !== $name) {\n                    continue;\n                }\n                $suggestions->suggestValue(new Suggestion($command->getName(), $command->getDescription()));\n                foreach ($command->getAliases() as $name) {\n                    $suggestions->suggestValue(new Suggestion($name, $command->getDescription()));\n                }\n            }\n\n            return;\n        }\n\n        if (CompletionInput::TYPE_OPTION_NAME === $input->getCompletionType()) {\n            $suggestions->suggestOptions($this->getDefinition()->getOptions());\n        }\n    }\n\n    /**\n     * Gets the help message.\n     */\n    public function getHelp(): string\n    {\n        return $this->getLongVersion();\n    }\n\n    /**\n     * Gets whether to catch exceptions or not during commands execution.\n     */\n    public function areExceptionsCaught(): bool\n    {\n        return $this->catchExceptions;\n    }\n\n    /**\n     * Sets whether to catch exceptions or not during commands execution.\n     */\n    public function setCatchExceptions(bool $boolean): void\n    {\n        $this->catchExceptions = $boolean;\n    }\n\n    /**\n     * Sets whether to catch errors or not during commands execution.\n     */\n    public function setCatchErrors(bool $catchErrors = true): void\n    {\n        $this->catchErrors = $catchErrors;\n    }\n\n    /**\n     * Gets whether to automatically exit after a command execution or not.\n     */\n    public function isAutoExitEnabled(): bool\n    {\n        return $this->autoExit;\n    }\n\n    /**\n     * Sets whether to automatically exit after a command execution or not.\n     */\n    public function setAutoExit(bool $boolean): void\n    {\n        $this->autoExit = $boolean;\n    }\n\n    /**\n     * Gets the name of the application.\n     */\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    /**\n     * Sets the application name.\n     */\n    public function setName(string $name): void\n    {\n        $this->name = $name;\n    }\n\n    /**\n     * Gets the application version.\n     */\n    public function getVersion(): string\n    {\n        return $this->version;\n    }\n\n    /**\n     * Sets the application version.\n     */\n    public function setVersion(string $version): void\n    {\n        $this->version = $version;\n    }\n\n    /**\n     * Returns the long version of the application.\n     */\n    public function getLongVersion(): string\n    {\n        if ('UNKNOWN' !== $this->getName()) {\n            if ('UNKNOWN' !== $this->getVersion()) {\n                return \\sprintf('%s <info>%s</info>', $this->getName(), $this->getVersion());\n            }\n\n            return $this->getName();\n        }\n\n        return 'Console Tool';\n    }\n\n    /**\n     * Registers a new command.\n     */\n    public function register(string $name): Command\n    {\n        return $this->add(new Command($name));\n    }\n\n    /**\n     * Adds an array of command objects.\n     *\n     * If a Command is not enabled it will not be added.\n     *\n     * @param Command[] $commands An array of commands\n     */\n    public function addCommands(array $commands): void\n    {\n        foreach ($commands as $command) {\n            $this->add($command);\n        }\n    }\n\n    /**\n     * Adds a command object.\n     *\n     * If a command with the same name already exists, it will be overridden.\n     * If the command is not enabled it will not be added.\n     */\n    public function add(Command $command): ?Command\n    {\n        $this->init();\n\n        $command->setApplication($this);\n\n        if (!$command->isEnabled()) {\n            $command->setApplication(null);\n\n            return null;\n        }\n\n        if (!$command instanceof LazyCommand) {\n            // Will throw if the command is not correctly initialized.\n            $command->getDefinition();\n        }\n\n        if (!$command->getName()) {\n            throw new LogicException(\\sprintf('The command defined in \"%s\" cannot have an empty name.', get_debug_type($command)));\n        }\n\n        $this->commands[$command->getName()] = $command;\n\n        foreach ($command->getAliases() as $alias) {\n            $this->commands[$alias] = $command;\n        }\n\n        return $command;\n    }\n\n    /**\n     * Returns a registered command by name or alias.\n     *\n     * @throws CommandNotFoundException When given command name does not exist\n     */\n    public function get(string $name): Command\n    {\n        $this->init();\n\n        if (!$this->has($name)) {\n            throw new CommandNotFoundException(\\sprintf('The command \"%s\" does not exist.', $name));\n        }\n\n        // When the command has a different name than the one used at the command loader level\n        if (!isset($this->commands[$name])) {\n            throw new CommandNotFoundException(\\sprintf('The \"%s\" command cannot be found because it is registered under multiple names. Make sure you don\\'t set a different name via constructor or \"setName()\".', $name));\n        }\n\n        $command = $this->commands[$name];\n\n        if ($this->wantHelps) {\n            $this->wantHelps = false;\n\n            $helpCommand = $this->get('help');\n            $helpCommand->setCommand($command);\n\n            return $helpCommand;\n        }\n\n        return $command;\n    }\n\n    /**\n     * Returns true if the command exists, false otherwise.\n     */\n    public function has(string $name): bool\n    {\n        $this->init();\n\n        return isset($this->commands[$name]) || ($this->commandLoader?->has($name) && $this->add($this->commandLoader->get($name)));\n    }\n\n    /**\n     * Returns an array of all unique namespaces used by currently registered commands.\n     *\n     * It does not return the global namespace which always exists.\n     *\n     * @return string[]\n     */\n    public function getNamespaces(): array\n    {\n        $namespaces = [];\n        foreach ($this->all() as $command) {\n            if ($command->isHidden()) {\n                continue;\n            }\n\n            $namespaces[] = $this->extractAllNamespaces($command->getName());\n\n            foreach ($command->getAliases() as $alias) {\n                $namespaces[] = $this->extractAllNamespaces($alias);\n            }\n        }\n\n        return array_values(array_unique(array_filter(array_merge([], ...$namespaces))));\n    }\n\n    /**\n     * Finds a registered namespace by a name or an abbreviation.\n     *\n     * @throws NamespaceNotFoundException When namespace is incorrect or ambiguous\n     */\n    public function findNamespace(string $namespace): string\n    {\n        $allNamespaces = $this->getNamespaces();\n        $expr = implode('[^:]*:', array_map('preg_quote', explode(':', $namespace))).'[^:]*';\n        $namespaces = preg_grep('{^'.$expr.'}', $allNamespaces);\n\n        if (!$namespaces) {\n            $message = \\sprintf('There are no commands defined in the \"%s\" namespace.', $namespace);\n\n            if ($alternatives = $this->findAlternatives($namespace, $allNamespaces)) {\n                if (1 == \\count($alternatives)) {\n                    $message .= \"\\n\\nDid you mean this?\\n    \";\n                } else {\n                    $message .= \"\\n\\nDid you mean one of these?\\n    \";\n                }\n\n                $message .= implode(\"\\n    \", $alternatives);\n            }\n\n            throw new NamespaceNotFoundException($message, $alternatives);\n        }\n\n        $exact = \\in_array($namespace, $namespaces, true);\n        if (\\count($namespaces) > 1 && !$exact) {\n            throw new NamespaceNotFoundException(\\sprintf(\"The namespace \\\"%s\\\" is ambiguous.\\nDid you mean one of these?\\n%s.\", $namespace, $this->getAbbreviationSuggestions(array_values($namespaces))), array_values($namespaces));\n        }\n\n        return $exact ? $namespace : reset($namespaces);\n    }\n\n    /**\n     * Finds a command by name or alias.\n     *\n     * Contrary to get, this command tries to find the best\n     * match if you give it an abbreviation of a name or alias.\n     *\n     * @throws CommandNotFoundException When command name is incorrect or ambiguous\n     */\n    public function find(string $name): Command\n    {\n        $this->init();\n\n        $aliases = [];\n\n        foreach ($this->commands as $command) {\n            foreach ($command->getAliases() as $alias) {\n                if (!$this->has($alias)) {\n                    $this->commands[$alias] = $command;\n                }\n            }\n        }\n\n        if ($this->has($name)) {\n            return $this->get($name);\n        }\n\n        $allCommands = $this->commandLoader ? array_merge($this->commandLoader->getNames(), array_keys($this->commands)) : array_keys($this->commands);\n        $expr = implode('[^:]*:', array_map('preg_quote', explode(':', $name))).'[^:]*';\n        $commands = preg_grep('{^'.$expr.'}', $allCommands);\n\n        if (!$commands) {\n            $commands = preg_grep('{^'.$expr.'}i', $allCommands);\n        }\n\n        // if no commands matched or we just matched namespaces\n        if (!$commands || \\count(preg_grep('{^'.$expr.'$}i', $commands)) < 1) {\n            if (false !== $pos = strrpos($name, ':')) {\n                // check if a namespace exists and contains commands\n                $this->findNamespace(substr($name, 0, $pos));\n            }\n\n            $message = \\sprintf('Command \"%s\" is not defined.', $name);\n\n            if ($alternatives = $this->findAlternatives($name, $allCommands)) {\n                // remove hidden commands\n                $alternatives = array_filter($alternatives, fn ($name) => !$this->get($name)->isHidden());\n\n                if (1 == \\count($alternatives)) {\n                    $message .= \"\\n\\nDid you mean this?\\n    \";\n                } else {\n                    $message .= \"\\n\\nDid you mean one of these?\\n    \";\n                }\n                $message .= implode(\"\\n    \", $alternatives);\n            }\n\n            throw new CommandNotFoundException($message, array_values($alternatives));\n        }\n\n        // filter out aliases for commands which are already on the list\n        if (\\count($commands) > 1) {\n            $commandList = $this->commandLoader ? array_merge(array_flip($this->commandLoader->getNames()), $this->commands) : $this->commands;\n            $commands = array_unique(array_filter($commands, function ($nameOrAlias) use (&$commandList, $commands, &$aliases) {\n                if (!$commandList[$nameOrAlias] instanceof Command) {\n                    $commandList[$nameOrAlias] = $this->commandLoader->get($nameOrAlias);\n                }\n\n                $commandName = $commandList[$nameOrAlias]->getName();\n\n                $aliases[$nameOrAlias] = $commandName;\n\n                return $commandName === $nameOrAlias || !\\in_array($commandName, $commands, true);\n            }));\n        }\n\n        if (\\count($commands) > 1) {\n            $usableWidth = $this->terminal->getWidth() - 10;\n            $abbrevs = array_values($commands);\n            $maxLen = 0;\n            foreach ($abbrevs as $abbrev) {\n                $maxLen = max(Helper::width($abbrev), $maxLen);\n            }\n            $abbrevs = array_map(function ($cmd) use ($commandList, $usableWidth, $maxLen, &$commands) {\n                if ($commandList[$cmd]->isHidden()) {\n                    unset($commands[array_search($cmd, $commands)]);\n\n                    return false;\n                }\n\n                $abbrev = str_pad($cmd, $maxLen, ' ').' '.$commandList[$cmd]->getDescription();\n\n                return Helper::width($abbrev) > $usableWidth ? Helper::substr($abbrev, 0, $usableWidth - 3).'...' : $abbrev;\n            }, array_values($commands));\n\n            if (\\count($commands) > 1) {\n                $suggestions = $this->getAbbreviationSuggestions(array_filter($abbrevs));\n\n                throw new CommandNotFoundException(\\sprintf(\"Command \\\"%s\\\" is ambiguous.\\nDid you mean one of these?\\n%s.\", $name, $suggestions), array_values($commands));\n            }\n        }\n\n        $command = $this->get(reset($commands));\n\n        if ($command->isHidden()) {\n            throw new CommandNotFoundException(\\sprintf('The command \"%s\" does not exist.', $name));\n        }\n\n        return $command;\n    }\n\n    /**\n     * Gets the commands (registered in the given namespace if provided).\n     *\n     * The array keys are the full names and the values the command instances.\n     *\n     * @return Command[]\n     */\n    public function all(?string $namespace = null): array\n    {\n        $this->init();\n\n        if (null === $namespace) {\n            if (!$this->commandLoader) {\n                return $this->commands;\n            }\n\n            $commands = $this->commands;\n            foreach ($this->commandLoader->getNames() as $name) {\n                if (!isset($commands[$name]) && $this->has($name)) {\n                    $commands[$name] = $this->get($name);\n                }\n            }\n\n            return $commands;\n        }\n\n        $commands = [];\n        foreach ($this->commands as $name => $command) {\n            if ($namespace === $this->extractNamespace($name, substr_count($namespace, ':') + 1)) {\n                $commands[$name] = $command;\n            }\n        }\n\n        if ($this->commandLoader) {\n            foreach ($this->commandLoader->getNames() as $name) {\n                if (!isset($commands[$name]) && $namespace === $this->extractNamespace($name, substr_count($namespace, ':') + 1) && $this->has($name)) {\n                    $commands[$name] = $this->get($name);\n                }\n            }\n        }\n\n        return $commands;\n    }\n\n    /**\n     * Returns an array of possible abbreviations given a set of names.\n     *\n     * @return string[][]\n     */\n    public static function getAbbreviations(array $names): array\n    {\n        $abbrevs = [];\n        foreach ($names as $name) {\n            for ($len = \\strlen($name); $len > 0; --$len) {\n                $abbrev = substr($name, 0, $len);\n                $abbrevs[$abbrev][] = $name;\n            }\n        }\n\n        return $abbrevs;\n    }\n\n    public function renderThrowable(\\Throwable $e, OutputInterface $output): void\n    {\n        $output->writeln('', OutputInterface::VERBOSITY_QUIET);\n\n        $this->doRenderThrowable($e, $output);\n\n        if (null !== $this->runningCommand) {\n            $output->writeln(\\sprintf('<info>%s</info>', OutputFormatter::escape(\\sprintf($this->runningCommand->getSynopsis(), $this->getName()))), OutputInterface::VERBOSITY_QUIET);\n            $output->writeln('', OutputInterface::VERBOSITY_QUIET);\n        }\n    }\n\n    protected function doRenderThrowable(\\Throwable $e, OutputInterface $output): void\n    {\n        do {\n            $message = trim($e->getMessage());\n            if ('' === $message || OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {\n                $class = get_debug_type($e);\n                $title = \\sprintf('  [%s%s]  ', $class, 0 !== ($code = $e->getCode()) ? ' ('.$code.')' : '');\n                $len = Helper::width($title);\n            } else {\n                $len = 0;\n            }\n\n            if (str_contains($message, \"@anonymous\\0\")) {\n                $message = preg_replace_callback('/[a-zA-Z_\\x7f-\\xff][\\\\\\\\a-zA-Z0-9_\\x7f-\\xff]*+@anonymous\\x00.*?\\.php(?:0x?|:[0-9]++\\$)?[0-9a-fA-F]++/', fn ($m) => class_exists($m[0], false) ? (get_parent_class($m[0]) ?: key(class_implements($m[0])) ?: 'class').'@anonymous' : $m[0], $message);\n            }\n\n            $width = $this->terminal->getWidth() ? $this->terminal->getWidth() - 1 : \\PHP_INT_MAX;\n            $lines = [];\n            foreach ('' !== $message ? preg_split('/\\r?\\n/', $message) : [] as $line) {\n                foreach ($this->splitStringByWidth($line, $width - 4) as $line) {\n                    // pre-format lines to get the right string length\n                    $lineLength = Helper::width($line) + 4;\n                    $lines[] = [$line, $lineLength];\n\n                    $len = max($lineLength, $len);\n                }\n            }\n\n            $messages = [];\n            if (!$e instanceof ExceptionInterface || OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {\n                $messages[] = \\sprintf('<comment>%s</comment>', OutputFormatter::escape(\\sprintf('In %s line %s:', basename($e->getFile()) ?: 'n/a', $e->getLine() ?: 'n/a')));\n            }\n            $messages[] = $emptyLine = \\sprintf('<error>%s</error>', str_repeat(' ', $len));\n            if ('' === $message || OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {\n                $messages[] = \\sprintf('<error>%s%s</error>', $title, str_repeat(' ', max(0, $len - Helper::width($title))));\n            }\n            foreach ($lines as $line) {\n                $messages[] = \\sprintf('<error>  %s  %s</error>', OutputFormatter::escape($line[0]), str_repeat(' ', $len - $line[1]));\n            }\n            $messages[] = $emptyLine;\n            $messages[] = '';\n\n            $output->writeln($messages, OutputInterface::VERBOSITY_QUIET);\n\n            if (OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {\n                $output->writeln('<comment>Exception trace:</comment>', OutputInterface::VERBOSITY_QUIET);\n\n                // exception related properties\n                $trace = $e->getTrace();\n\n                array_unshift($trace, [\n                    'function' => '',\n                    'file' => $e->getFile() ?: 'n/a',\n                    'line' => $e->getLine() ?: 'n/a',\n                    'args' => [],\n                ]);\n\n                for ($i = 0, $count = \\count($trace); $i < $count; ++$i) {\n                    $class = $trace[$i]['class'] ?? '';\n                    $type = $trace[$i]['type'] ?? '';\n                    $function = $trace[$i]['function'] ?? '';\n                    $file = $trace[$i]['file'] ?? 'n/a';\n                    $line = $trace[$i]['line'] ?? 'n/a';\n\n                    $output->writeln(\\sprintf(' %s%s at <info>%s:%s</info>', $class, $function ? $type.$function.'()' : '', $file, $line), OutputInterface::VERBOSITY_QUIET);\n                }\n\n                $output->writeln('', OutputInterface::VERBOSITY_QUIET);\n            }\n        } while ($e = $e->getPrevious());\n    }\n\n    /**\n     * Configures the input and output instances based on the user arguments and options.\n     */\n    protected function configureIO(InputInterface $input, OutputInterface $output): void\n    {\n        if (true === $input->hasParameterOption(['--ansi'], true)) {\n            $output->setDecorated(true);\n        } elseif (true === $input->hasParameterOption(['--no-ansi'], true)) {\n            $output->setDecorated(false);\n        }\n\n        if (true === $input->hasParameterOption(['--no-interaction', '-n'], true)) {\n            $input->setInteractive(false);\n        }\n\n        switch ($shellVerbosity = (int) getenv('SHELL_VERBOSITY')) {\n            case -2:\n                $output->setVerbosity(OutputInterface::VERBOSITY_SILENT);\n                break;\n            case -1:\n                $output->setVerbosity(OutputInterface::VERBOSITY_QUIET);\n                break;\n            case 1:\n                $output->setVerbosity(OutputInterface::VERBOSITY_VERBOSE);\n                break;\n            case 2:\n                $output->setVerbosity(OutputInterface::VERBOSITY_VERY_VERBOSE);\n                break;\n            case 3:\n                $output->setVerbosity(OutputInterface::VERBOSITY_DEBUG);\n                break;\n            default:\n                $shellVerbosity = 0;\n                break;\n        }\n\n        if (true === $input->hasParameterOption(['--silent'], true)) {\n            $output->setVerbosity(OutputInterface::VERBOSITY_SILENT);\n            $shellVerbosity = -2;\n        } elseif (true === $input->hasParameterOption(['--quiet', '-q'], true)) {\n            $output->setVerbosity(OutputInterface::VERBOSITY_QUIET);\n            $shellVerbosity = -1;\n        } else {\n            if ($input->hasParameterOption('-vvv', true) || $input->hasParameterOption('--verbose=3', true) || 3 === $input->getParameterOption('--verbose', false, true)) {\n                $output->setVerbosity(OutputInterface::VERBOSITY_DEBUG);\n                $shellVerbosity = 3;\n            } elseif ($input->hasParameterOption('-vv', true) || $input->hasParameterOption('--verbose=2', true) || 2 === $input->getParameterOption('--verbose', false, true)) {\n                $output->setVerbosity(OutputInterface::VERBOSITY_VERY_VERBOSE);\n                $shellVerbosity = 2;\n            } elseif ($input->hasParameterOption('-v', true) || $input->hasParameterOption('--verbose=1', true) || $input->hasParameterOption('--verbose', true) || $input->getParameterOption('--verbose', false, true)) {\n                $output->setVerbosity(OutputInterface::VERBOSITY_VERBOSE);\n                $shellVerbosity = 1;\n            }\n        }\n\n        if (0 > $shellVerbosity) {\n            $input->setInteractive(false);\n        }\n\n        if (\\function_exists('putenv')) {\n            @putenv('SHELL_VERBOSITY='.$shellVerbosity);\n        }\n        $_ENV['SHELL_VERBOSITY'] = $shellVerbosity;\n        $_SERVER['SHELL_VERBOSITY'] = $shellVerbosity;\n    }\n\n    /**\n     * Runs the current command.\n     *\n     * If an event dispatcher has been attached to the application,\n     * events are also dispatched during the life-cycle of the command.\n     *\n     * @return int 0 if everything went fine, or an error code\n     */\n    protected function doRunCommand(Command $command, InputInterface $input, OutputInterface $output): int\n    {\n        foreach ($command->getHelperSet() as $helper) {\n            if ($helper instanceof InputAwareInterface) {\n                $helper->setInput($input);\n            }\n        }\n\n        $commandSignals = $command instanceof SignalableCommandInterface ? $command->getSubscribedSignals() : [];\n        if ($commandSignals || $this->dispatcher && $this->signalsToDispatchEvent) {\n            $signalRegistry = $this->getSignalRegistry();\n\n            if (Terminal::hasSttyAvailable()) {\n                $sttyMode = shell_exec('stty -g');\n\n                foreach ([\\SIGINT, \\SIGQUIT, \\SIGTERM] as $signal) {\n                    $signalRegistry->register($signal, static fn () => shell_exec('stty '.$sttyMode));\n                }\n            }\n\n            if ($this->dispatcher) {\n                // We register application signals, so that we can dispatch the event\n                foreach ($this->signalsToDispatchEvent as $signal) {\n                    $signalEvent = new ConsoleSignalEvent($command, $input, $output, $signal);\n                    $alarmEvent = \\SIGALRM === $signal ? new ConsoleAlarmEvent($command, $input, $output) : null;\n\n                    $signalRegistry->register($signal, function ($signal) use ($signalEvent, $alarmEvent, $command, $commandSignals, $input, $output) {\n                        $this->dispatcher->dispatch($signalEvent, ConsoleEvents::SIGNAL);\n                        $exitCode = $signalEvent->getExitCode();\n\n                        if (null !== $alarmEvent) {\n                            if (false !== $exitCode) {\n                                $alarmEvent->setExitCode($exitCode);\n                            } else {\n                                $alarmEvent->abortExit();\n                            }\n                            $this->dispatcher->dispatch($alarmEvent);\n                            $exitCode = $alarmEvent->getExitCode();\n                        }\n\n                        // If the command is signalable, we call the handleSignal() method\n                        if (\\in_array($signal, $commandSignals, true)) {\n                            $exitCode = $command->handleSignal($signal, $exitCode);\n                        }\n\n                        if (\\SIGALRM === $signal) {\n                            $this->scheduleAlarm();\n                        }\n\n                        if (false !== $exitCode) {\n                            $event = new ConsoleTerminateEvent($command, $input, $output, $exitCode, $signal);\n                            $this->dispatcher->dispatch($event, ConsoleEvents::TERMINATE);\n\n                            exit($event->getExitCode());\n                        }\n                    });\n                }\n\n                // then we register command signals, but not if already handled after the dispatcher\n                $commandSignals = array_diff($commandSignals, $this->signalsToDispatchEvent);\n            }\n\n            foreach ($commandSignals as $signal) {\n                $signalRegistry->register($signal, function (int $signal) use ($command): void {\n                    if (\\SIGALRM === $signal) {\n                        $this->scheduleAlarm();\n                    }\n\n                    if (false !== $exitCode = $command->handleSignal($signal)) {\n                        exit($exitCode);\n                    }\n                });\n            }\n        }\n\n        if (null === $this->dispatcher) {\n            return $command->run($input, $output);\n        }\n\n        // bind before the console.command event, so the listeners have access to input options/arguments\n        try {\n            $command->mergeApplicationDefinition();\n            $input->bind($command->getDefinition());\n        } catch (ExceptionInterface) {\n            // ignore invalid options/arguments for now, to allow the event listeners to customize the InputDefinition\n        }\n\n        $event = new ConsoleCommandEvent($command, $input, $output);\n        $e = null;\n\n        try {\n            $this->dispatcher->dispatch($event, ConsoleEvents::COMMAND);\n\n            if ($event->commandShouldRun()) {\n                $exitCode = $command->run($input, $output);\n            } else {\n                $exitCode = ConsoleCommandEvent::RETURN_CODE_DISABLED;\n            }\n        } catch (\\Throwable $e) {\n            $event = new ConsoleErrorEvent($input, $output, $e, $command);\n            $this->dispatcher->dispatch($event, ConsoleEvents::ERROR);\n            $e = $event->getError();\n\n            if (0 === $exitCode = $event->getExitCode()) {\n                $e = null;\n            }\n        }\n\n        $event = new ConsoleTerminateEvent($command, $input, $output, $exitCode);\n        $this->dispatcher->dispatch($event, ConsoleEvents::TERMINATE);\n\n        if (null !== $e) {\n            throw $e;\n        }\n\n        return $event->getExitCode();\n    }\n\n    /**\n     * Gets the name of the command based on input.\n     */\n    protected function getCommandName(InputInterface $input): ?string\n    {\n        return $this->singleCommand ? $this->defaultCommand : $input->getFirstArgument();\n    }\n\n    /**\n     * Gets the default input definition.\n     */\n    protected function getDefaultInputDefinition(): InputDefinition\n    {\n        return new InputDefinition([\n            new InputArgument('command', InputArgument::REQUIRED, 'The command to execute'),\n            new InputOption('--help', '-h', InputOption::VALUE_NONE, 'Display help for the given command. When no command is given display help for the <info>'.$this->defaultCommand.'</info> command'),\n            new InputOption('--silent', null, InputOption::VALUE_NONE, 'Do not output any message'),\n            new InputOption('--quiet', '-q', InputOption::VALUE_NONE, 'Only errors are displayed. All other output is suppressed'),\n            new InputOption('--verbose', '-v|vv|vvv', InputOption::VALUE_NONE, 'Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug'),\n            new InputOption('--version', '-V', InputOption::VALUE_NONE, 'Display this application version'),\n            new InputOption('--ansi', '', InputOption::VALUE_NEGATABLE, 'Force (or disable --no-ansi) ANSI output', null),\n            new InputOption('--no-interaction', '-n', InputOption::VALUE_NONE, 'Do not ask any interactive question'),\n        ]);\n    }\n\n    /**\n     * Gets the default commands that should always be available.\n     *\n     * @return Command[]\n     */\n    protected function getDefaultCommands(): array\n    {\n        return [new HelpCommand(), new ListCommand(), new CompleteCommand(), new DumpCompletionCommand()];\n    }\n\n    /**\n     * Gets the default helper set with the helpers that should always be available.\n     */\n    protected function getDefaultHelperSet(): HelperSet\n    {\n        return new HelperSet([\n            new FormatterHelper(),\n            new DebugFormatterHelper(),\n            new ProcessHelper(),\n            new QuestionHelper(),\n        ]);\n    }\n\n    /**\n     * Returns abbreviated suggestions in string format.\n     */\n    private function getAbbreviationSuggestions(array $abbrevs): string\n    {\n        return '    '.implode(\"\\n    \", $abbrevs);\n    }\n\n    /**\n     * Returns the namespace part of the command name.\n     *\n     * This method is not part of public API and should not be used directly.\n     */\n    public function extractNamespace(string $name, ?int $limit = null): string\n    {\n        $parts = explode(':', $name, -1);\n\n        return implode(':', null === $limit ? $parts : \\array_slice($parts, 0, $limit));\n    }\n\n    /**\n     * Finds alternative of $name among $collection,\n     * if nothing is found in $collection, try in $abbrevs.\n     *\n     * @return string[]\n     */\n    private function findAlternatives(string $name, iterable $collection): array\n    {\n        $threshold = 1e3;\n        $alternatives = [];\n\n        $collectionParts = [];\n        foreach ($collection as $item) {\n            $collectionParts[$item] = explode(':', $item);\n        }\n\n        foreach (explode(':', $name) as $i => $subname) {\n            foreach ($collectionParts as $collectionName => $parts) {\n                $exists = isset($alternatives[$collectionName]);\n                if (!isset($parts[$i]) && $exists) {\n                    $alternatives[$collectionName] += $threshold;\n                    continue;\n                } elseif (!isset($parts[$i])) {\n                    continue;\n                }\n\n                $lev = levenshtein($subname, $parts[$i]);\n                if ($lev <= \\strlen($subname) / 3 || '' !== $subname && str_contains($parts[$i], $subname)) {\n                    $alternatives[$collectionName] = $exists ? $alternatives[$collectionName] + $lev : $lev;\n                } elseif ($exists) {\n                    $alternatives[$collectionName] += $threshold;\n                }\n            }\n        }\n\n        foreach ($collection as $item) {\n            $lev = levenshtein($name, $item);\n            if ($lev <= \\strlen($name) / 3 || str_contains($item, $name)) {\n                $alternatives[$item] = isset($alternatives[$item]) ? $alternatives[$item] - $lev : $lev;\n            }\n        }\n\n        $alternatives = array_filter($alternatives, fn ($lev) => $lev < 2 * $threshold);\n        ksort($alternatives, \\SORT_NATURAL | \\SORT_FLAG_CASE);\n\n        return array_keys($alternatives);\n    }\n\n    /**\n     * Sets the default Command name.\n     *\n     * @return $this\n     */\n    public function setDefaultCommand(string $commandName, bool $isSingleCommand = false): static\n    {\n        $this->defaultCommand = explode('|', ltrim($commandName, '|'))[0];\n\n        if ($isSingleCommand) {\n            // Ensure the command exist\n            $this->find($commandName);\n\n            $this->singleCommand = true;\n        }\n\n        return $this;\n    }\n\n    /**\n     * @internal\n     */\n    public function isSingleCommand(): bool\n    {\n        return $this->singleCommand;\n    }\n\n    private function splitStringByWidth(string $string, int $width): array\n    {\n        // str_split is not suitable for multi-byte characters, we should use preg_split to get char array properly.\n        // additionally, array_slice() is not enough as some character has doubled width.\n        // we need a function to split string not by character count but by string width\n        if (false === $encoding = mb_detect_encoding($string, null, true)) {\n            return str_split($string, $width);\n        }\n\n        $utf8String = mb_convert_encoding($string, 'utf8', $encoding);\n        $lines = [];\n        $line = '';\n\n        $offset = 0;\n        while (preg_match('/.{1,10000}/u', $utf8String, $m, 0, $offset)) {\n            $offset += \\strlen($m[0]);\n\n            foreach (preg_split('//u', $m[0]) as $char) {\n                // test if $char could be appended to current line\n                if (mb_strwidth($line.$char, 'utf8') <= $width) {\n                    $line .= $char;\n                    continue;\n                }\n                // if not, push current line to array and make new line\n                $lines[] = str_pad($line, $width);\n                $line = $char;\n            }\n        }\n\n        $lines[] = \\count($lines) ? str_pad($line, $width) : $line;\n\n        mb_convert_variables($encoding, 'utf8', $lines);\n\n        return $lines;\n    }\n\n    /**\n     * Returns all namespaces of the command name.\n     *\n     * @return string[]\n     */\n    private function extractAllNamespaces(string $name): array\n    {\n        // -1 as third argument is needed to skip the command short name when exploding\n        $parts = explode(':', $name, -1);\n        $namespaces = [];\n\n        foreach ($parts as $part) {\n            if (\\count($namespaces)) {\n                $namespaces[] = end($namespaces).':'.$part;\n            } else {\n                $namespaces[] = $part;\n            }\n        }\n\n        return $namespaces;\n    }\n\n    private function init(): void\n    {\n        if ($this->initialized) {\n            return;\n        }\n        $this->initialized = true;\n\n        foreach ($this->getDefaultCommands() as $command) {\n            $this->add($command);\n        }\n    }\n}\n\n\n--- File: SingleCommandApplication.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * @author Gr\u00e9goire Pineau <lyrixx@lyrixx.info>\n */\nclass SingleCommandApplication extends Command\n{\n    private string $version = 'UNKNOWN';\n    private bool $autoExit = true;\n    private bool $running = false;\n\n    /**\n     * @return $this\n     */\n    public function setVersion(string $version): static\n    {\n        $this->version = $version;\n\n        return $this;\n    }\n\n    /**\n     * @final\n     *\n     * @return $this\n     */\n    public function setAutoExit(bool $autoExit): static\n    {\n        $this->autoExit = $autoExit;\n\n        return $this;\n    }\n\n    public function run(?InputInterface $input = null, ?OutputInterface $output = null): int\n    {\n        if ($this->running) {\n            return parent::run($input, $output);\n        }\n\n        // We use the command name as the application name\n        $application = new Application($this->getName() ?: 'UNKNOWN', $this->version);\n        $application->setAutoExit($this->autoExit);\n        // Fix the usage of the command displayed with \"--help\"\n        $this->setName($_SERVER['argv'][0]);\n        $application->add($this);\n        $application->setDefaultCommand($this->getName(), true);\n\n        $this->running = true;\n        try {\n            $ret = $application->run($input, $output);\n        } finally {\n            $this->running = false;\n        }\n\n        return $ret;\n    }\n}\n\n\n--- File: Event/ConsoleErrorEvent.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Allows to handle throwables thrown while running a command.\n *\n * @author Wouter de Jong <wouter@wouterj.nl>\n */\nfinal class ConsoleErrorEvent extends ConsoleEvent\n{\n    private int $exitCode;\n\n    public function __construct(\n        InputInterface $input,\n        OutputInterface $output,\n        private \\Throwable $error,\n        ?Command $command = null,\n    ) {\n        parent::__construct($command, $input, $output);\n    }\n\n    public function getError(): \\Throwable\n    {\n        return $this->error;\n    }\n\n    public function setError(\\Throwable $error): void\n    {\n        $this->error = $error;\n    }\n\n    public function setExitCode(int $exitCode): void\n    {\n        $this->exitCode = $exitCode;\n\n        $r = new \\ReflectionProperty($this->error, 'code');\n        $r->setValue($this->error, $this->exitCode);\n    }\n\n    public function getExitCode(): int\n    {\n        return $this->exitCode ?? (\\is_int($this->error->getCode()) && 0 !== $this->error->getCode() ? $this->error->getCode() : 1);\n    }\n}\n\n\n--- File: Event/ConsoleAlarmEvent.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nfinal class ConsoleAlarmEvent extends ConsoleEvent\n{\n    public function __construct(\n        Command $command,\n        InputInterface $input,\n        OutputInterface $output,\n        private int|false $exitCode = 0,\n    ) {\n        parent::__construct($command, $input, $output);\n    }\n\n    public function setExitCode(int $exitCode): void\n    {\n        if ($exitCode < 0 || $exitCode > 255) {\n            throw new \\InvalidArgumentException('Exit code must be between 0 and 255.');\n        }\n\n        $this->exitCode = $exitCode;\n    }\n\n    public function abortExit(): void\n    {\n        $this->exitCode = false;\n    }\n\n    public function getExitCode(): int|false\n    {\n        return $this->exitCode;\n    }\n}\n\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 4: Command Execution Flow\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 20 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 4: Command Execution Flow\n\nWelcome back! In our previous chapters, we explored how to handle user inputs and define validation rules in our console applications. Now, let's dive into the concept of command execution flow. This is like choreographing a dance where each step (command) has its role.\n\n## Motivation\n\nImagine you're building an application that allows users to manage a library. Users can add books, remove books, and list all available books. Each action is a command in our console app. To ensure these commands work smoothly, we need a structured way to handle their execution. This is where the concept of \"Command Execution Flow\" comes in.\n\n## Key Concepts\n\n### What is Command Execution Flow?\n\nThink of it like organizing a school play. You have actors (commands) who each have specific roles and follow a script (execution flow). Just as a director ensures everything runs smoothly, we need to structure our commands so they execute correctly.\n\n### How Does It Work?\n\nLet's use the library example again. When a user wants to add a book, here are the steps:\n\n1. **Validate Input**: Ensure the user inputs valid data.\n2. **Execute Command**: Add the book to the database.\n3. **Notify Other Systems**: Send a notification if needed.\n\nWe'll set up events for each of these actions and make sure they work together seamlessly.\n\n## How to Use It\n\n### Example Scenario: Adding a Book\n\nLet's walk through adding a book step-by-step:\n\n1. **User Input**: The user provides the title, author, and price.\n2. **Validation**: We check if all inputs are valid (e.g., non-negative prices).\n3. **Add to Database**: If validation passes, we add the book to our database.\n4. **Log Action**: Log this action in a database for tracking.\n\n### Example Code\n\nHere\u2019s how we can set up these steps using Symfony Console:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Define the add book command\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Validation: Check if all inputs are valid\n        $title = $input->getArgument('title');\n        $author = $input->getArgument('author');\n        $price = (float)$input->getArgument('price');\n\n        if ($price < 0) {\n            throw new \\Exception(\"Price cannot be negative.\");\n        }\n\n        // Add the book to the database\n        $database = new Database();\n        $bookId = $database->addBook($title, $author, $price);\n\n        // Log action in a database\n        logAction('Add Book', 'Library App', $bookId);\n\n        return 0;\n    }\n}\n\n// Add the command to the application\n$application->add(new AddBookCommand());\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n1. **Application**: We create an `Application` instance with a name and version.\n2. **Add Book Command**: We define a new `Command` class that handles adding books.\n3. **Validation**: Inside the command, we check if the price is valid.\n4. **Database Interaction**: If validation passes, we add the book to our database.\n5. **Logging**: We log the action in a database for tracking.\n\n## Internal Implementation\n\nNow, let's see what happens step-by-step when this command executes:\n\n1. **User Inputs**:\n   - The user provides `title`, `author`, and `price`.\n2. **Validation**:\n   - The command checks if the price is valid.\n3. **Execute Command**:\n   - If validation passes, it adds the book to the database.\n4. **Log Action**:\n   - It logs the action in a database.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandHandler as CH\n    participant Database as DB\n    participant Logger as L\n\n    U->>CH: Add Book \"The Great Gatsby\"\n    CH-->>DB: Validate and add to database\n    CH-->>L: Log action in the database\n```\n\n### Internal Code Walkthrough\n\nLet's dive deeper into the internal code:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\n\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Validation: Check if all inputs are valid\n        $title = $input->getArgument('title');\n        $author = $input->getArgument('author');\n        $price = (float)$input->getArgument('price');\n\n        if ($price < 0) {\n            throw new \\Exception(\"Price cannot be negative.\");\n        }\n\n        // Add the book to the database\n        $database = new Database();\n        $bookId = $database->addBook($title, $author, $price);\n\n        // Log action in a database\n        logAction('Add Book', 'Library App', $bookId);\n\n        return 0;\n    }\n}\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Add the command to the application\n$application->add(new AddBookCommand());\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n- **Command Definition**: We define a command class with validation and database interaction.\n- **Validation**: Ensure inputs are valid before proceeding.\n- **Database Interaction**: Add the book to our database if validation passes.\n- **Logging**: Log the action for tracking.\n\n## Conclusion\n\nIn this chapter, we learned about command execution flow by creating a structured way to handle user commands in our console application. We saw how to validate inputs, execute commands, and notify other systems. Next, we'll explore more advanced concepts like event handling and dispatching!\n\nStay tuned for the next chapter: [Event Handling and Dispatching](03_event_handling_and_dispatching_.md)",
    "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `console` about the concept: \"Command Discovery and Loading\n\". This is Chapter 5.\n\nConcept Details:\n- Name: Command Discovery and Loading\n\n- Description:\nThis abstraction is responsible for discovering and loading commands, similar to how a library catalog finds books. It ensures that all available commands are known and can be executed.\n\n\nComplete Tutorial Structure:\n1. [Input Handling and Validation\n](01_input_handling_and_validation_.md)\n2. [Input Definition and Validation\n](02_input_definition_and_validation_.md)\n3. [Event Handling and Dispatching\n](03_event_handling_and_dispatching_.md)\n4. [Command Execution Flow\n](04_command_execution_flow_.md)\n5. [Command Discovery and Loading\n](05_command_discovery_and_loading_.md)\n6. [Signal Handling\n](06_signal_handling_.md)\n7. [Logging and Debugging\n](07_logging_and_debugging_.md)\n8. [Command Testing\n](08_command_testing_.md)\n9. [Output Wrapping\n](09_output_wrapping_.md)\n10. [Output and Formatting\n](10_output_and_formatting_.md)\n\nContext from previous chapters:\n# Chapter 1: Input Handling and Validation\n\nWelcome to our journey into building robust console applications! In the previous chapter, we started exploring how to create commands that can be executed from the command line. However, there's an important aspect we haven't covered yet\u2014ensuring that the input provided by users is valid before proceeding with execution. Think of it like a gatekeeper at an event who checks IDs and only allows entry if they meet specific criteria.\n\n## Why Validation Matters\n\nImagine you're building a console application to manage a library. You have a command to add books, but what happens when someone inputs invalid data? For example, entering a negative number for the book's price or leaving fields blank. Without proper validation, your program might crash or produce incorrect results. This is where input handling and validation come in.\n\n## Key Concepts\n\n### 1. Question Class\nThe `Question` class acts as our gatekeeper. It ensures that user inputs are valid before proceeding with any further actions. Let's break down how it works.\n\n#### Example Scenario: Adding a Book\nSuppose we want to add a new book to the library using a command-line interface. We need to ask for the book's title, author, and price. If any of these fields are invalid (e.g., an empty string or a negative number), our program should not proceed.\n\n### 2. Setting Up Questions\nIn the `Question` class, we can set up questions with default values and validators. For instance, when asking for the book's title, if no value is provided by the user, it defaults to \"Unknown\". If the price is inputted incorrectly (e.g., a negative number), the program will throw an error.\n\n### 3. Using Choice Questions\nSometimes, users might need to make choices from predefined options. For example, we could ask them to select if the book is fiction or non-fiction. The `ChoiceQuestion` class ensures that only valid choices are accepted.\n\n## How to Use It\n\nLet's see how we can use these classes in a practical scenario:\n\n### Example Code\nHere\u2019s a simple example of setting up questions and handling user input using the `Question` and `ChoiceQuestion` classes.\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create a confirmation question to ask if the book should be added.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question for the genre of the book.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask the user questions and handle their responses.\n$helperSet = \\Symfony\\Component\\Console\\Helper\\HelperSet::create();\n$io = $helperSet->get('io');\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Step-by-Step Explanation\n1. **Create Confirmation Question**: We ask the user if they want to add a book.\n2. **Create Choice Question**: We give the user options for the genre of the book.\n3. **Ask Questions and Handle Responses**: The program waits for user input, validates it using built-in validators, and handles any errors.\n\n### Internal Walkthrough\nWhen you run this code:\n- First, you\u2019ll be prompted with a confirmation question: `Do you want to add this book? (yes/no): yes`\n- Then, another prompt will appear asking about the genre: `What is the genre of the book? [fiction, non-fiction]: fiction`\n\nIf any input is invalid, an error message will be displayed.\n\n### Mermaid Diagram\nHere\u2019s a simple sequence diagram illustrating the flow:\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## Conclusion\nIn this chapter, we learned how to handle user inputs using the `Question` class. We saw how to create questions with validation and choices, ensuring that our application handles invalid data gracefully. Next, we\u2019ll dive deeper into the internal implementation of these classes.\n\nStay tuned for the next chapter where we will explore more about event handling and dispatching! [Next Chapter: Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 2: Input Definition and Validation\n\nWelcome back! In our last chapter, we explored how to handle user inputs in our console applications. Now, let's take it one step further by defining the rules for those inputs\u2014essentially creating a set of guidelines that ensure users provide valid data.\n\n## Why Do We Need This?\n\nImagine you're building an application where users can add books to a library. You want them to be able to enter details like the book's title, author, and price. However, what if someone types in a negative price or forgets to fill out required fields? To avoid such issues, we need to define these rules and check that users follow them.\n\n## Key Concepts\n\n### 1. Setting Up Questions\nThink of questions as the gatekeepers at an event. They ensure only valid entries get through. In our library app scenario, we'll set up a series of questions for users to answer when adding a book.\n\n```php\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create confirmation and choice questions.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask users questions and handle their responses.\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### 2. Using the Question Class\nThe `Question` class is like a form where you can ask for specific pieces of information. You can create questions that require yes/no answers or multiple-choice options.\n\n- **ConfirmationQuestion**: Asks a user to confirm something.\n- **ChoiceQuestion**: Provides users with a list of choices from which they must select one.\n\n### Example Walkthrough\nLet's walk through an example where we use these classes:\n\n1. We ask the user if they want to add a book. If they say \"yes,\" we proceed; otherwise, nothing happens.\n2. Next, we ask them to choose the genre of the book from two options: fiction or non-fiction.\n\nIf any input is invalid (e.g., an empty response), the program will display an error message and not proceed with adding the book.\n\n## Sequence Diagram\nHere\u2019s a simple sequence diagram illustrating how these questions work:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## How It Works Internally\nNow, let's peek under the hood. The `Question` class handles user inputs by validating them based on predefined rules.\n\n1. **Create Questions**: Define what kind of question it is (confirmation or choice).\n2. **Ask for Input**: Display the question to the user.\n3. **Validate Response**: Check if the response meets the expected criteria.\n4. **Handle Errors**: If the input isn't valid, display an error message and ask again.\n\n## Internal Implementation\nLet's look at how this works with some simple code snippets:\n\n### Example Code\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion;\n\n// Create a confirmation question.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask users questions and handle their responses.\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Explanation\n1. **Creating Questions**: We define the type of question we want to ask (confirmation or choice) and provide default values if needed.\n2. **Asking for Input**: The `ask` method displays the question to the user and waits for their response.\n3. **Validating Response**: If the input is invalid, an error message is displayed.\n\n## Conclusion\nIn this chapter, we learned how to use the `Question` class to define rules for user inputs in our console applications. We saw how to create confirmation questions and choice questions, ensuring that users provide valid data before proceeding with further actions. Next, we\u2019ll dive into event handling and dispatching!\n\nStay tuned for the next chapter: [Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 3: Event Handling and Dispatching\n\nWelcome back! In our last chapters, we learned about handling user inputs in our console applications and setting up validation rules to ensure those inputs are correct. Now, let's dive into how events work in these systems, much like traffic lights control the flow of vehicles on a road.\n\n## Why Do We Need Event Handling?\n\nImagine you're building an application where users can add books to a library. When someone adds a book, various things might happen\u2014like updating the database, sending a notification, or logging the action. How do we make sure all these actions are handled correctly and efficiently? That's where event handling comes in.\n\n## Key Concepts\n\n### 1. What is an Event?\nAn event is like a signal that tells our application something important has happened. For example, when a user adds a book, it triggers the \"book added\" event.\n\n### 2. Event Handling\nEvent handling means catching these signals and responding to them. Our application can listen for specific events and then perform actions based on those events.\n\n## Example Scenario: Adding a Book\n\nLet's use our library example again. When a user wants to add a book, here are the steps we might want to follow:\n\n1. Validate the input (like checking if the price is positive).\n2. Log the action in a database.\n3. Send a notification to other parts of the system.\n\nWe can set up events for each of these actions and ensure they all work smoothly together.\n\n## How It Works\n\nImagine we have an event like \"BookAddedEvent\". When this event happens, our application will take note and perform the necessary actions.\n\n### 1. Defining Events\nFirst, we define what kind of events we want to handle. For example:\n\n```php\n// In BookAddedEvent.php\nclass BookAddedEvent {\n    private $bookId;\n\n    public function __construct($bookId) {\n        $this->bookId = $bookId;\n    }\n\n    public function getBookId() {\n        return $this->bookId;\n    }\n}\n```\n\n### 2. Dispatching Events\nWhen a book is added, we dispatch (or trigger) the event:\n\n```php\n// In AddBookCommand.php\npublic function execute(InputInterface $input, OutputInterface $output) {\n    // Validate and add the book to the database.\n    \n    $bookId = $this->database->addBook($title, $author, $price);\n    \n    // Dispatch the event\n    $eventDispatcher->dispatch(new BookAddedEvent($bookId));\n}\n```\n\n### 3. Handling Events\nOther parts of our application can listen for this event and perform actions:\n\n```php\n// In DatabaseLogger.php\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass DatabaseLogger implements EventSubscriberInterface {\n    public static function getSubscribedEvents() {\n        return [\n            BookAddedEvent::class => 'logBookAddition',\n        ];\n    }\n\n    public function logBookAddition(BookAddedEvent $event) {\n        $bookId = $event->getBookId();\n        // Log the book addition in a database\n        echo \"Logging that book with ID $bookId was added.\\n\";\n    }\n}\n```\n\n### 4. Example Walkthrough\n\nLet's walk through an example sequence diagram to see how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandHandler as CH\n    participant DatabaseLogger as DL\n    participant BookAddedEvent as E\n\n    U->>CH: Add book \"The Great Gatsby\"\n    CH->>DatabaseLogger: Dispatch BookAddedEvent\n    DL->>DB: Log the addition of the book with ID 123456\n```\n\n## Internal Implementation\n\nNow, let's look at what happens step-by-step:\n\n1. **User Inputs a Command**: The user adds a book.\n2. **Command Handler Validates and Adds the Book**: It checks if all inputs are valid and adds the book to the database.\n3. **Dispatch Event**: The `BookAddedEvent` is dispatched with the book's ID.\n4. **Event Listeners Handle the Event**: The `DatabaseLogger` listens for this event and logs the addition in a database.\n\n## Conclusion\n\nIn this chapter, we learned about event handling and dispatching. We saw how events help coordinate different parts of an application to ensure everything works smoothly together. Next, we'll explore more advanced concepts like command execution flow, which will take us one step further in building robust applications.\n\nStay tuned for the next chapter: [Command Execution Flow](04_command_execution_flow_.md)\n---\n# Chapter 4: Command Execution Flow\n\nWelcome back! In our previous chapters, we explored how to handle user inputs and define validation rules in our console applications. Now, let's dive into the concept of command execution flow. This is like choreographing a dance where each step (command) has its role.\n\n## Motivation\n\nImagine you're building an application that allows users to manage a library. Users can add books, remove books, and list all available books. Each action is a command in our console app. To ensure these commands work smoothly, we need a structured way to handle their execution. This is where the concept of \"Command Execution Flow\" comes in.\n\n## Key Concepts\n\n### What is Command Execution Flow?\n\nThink of it like organizing a school play. You have actors (commands) who each have specific roles and follow a script (execution flow). Just as a director ensures everything runs smoothly, we need to structure our commands so they execute correctly.\n\n### How Does It Work?\n\nLet's use the library example again. When a user wants to add a book, here are the steps:\n\n1. **Validate Input**: Ensure the user inputs valid data.\n2. **Execute Command**: Add the book to the database.\n3. **Notify Other Systems**: Send a notification if needed.\n\nWe'll set up events for each of these actions and make sure they work together seamlessly.\n\n## How to Use It\n\n### Example Scenario: Adding a Book\n\nLet's walk through adding a book step-by-step:\n\n1. **User Input**: The user provides the title, author, and price.\n2. **Validation**: We check if all inputs are valid (e.g., non-negative prices).\n3. **Add to Database**: If validation passes, we add the book to our database.\n4. **Log Action**: Log this action in a database for tracking.\n\n### Example Code\n\nHere\u2019s how we can set up these steps using Symfony Console:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Define the add book command\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Validation: Check if all inputs are valid\n        $title = $input->getArgument('title');\n        $author = $input->getArgument('author');\n        $price = (float)$input->getArgument('price');\n\n        if ($price < 0) {\n            throw new \\Exception(\"Price cannot be negative.\");\n        }\n\n        // Add the book to the database\n        $database = new Database();\n        $bookId = $database->addBook($title, $author, $price);\n\n        // Log action in a database\n        logAction('Add Book', 'Library App', $bookId);\n\n        return 0;\n    }\n}\n\n// Add the command to the application\n$application->add(new AddBookCommand());\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n1. **Application**: We create an `Application` instance with a name and version.\n2. **Add Book Command**: We define a new `Command` class that handles adding books.\n3. **Validation**: Inside the command, we check if the price is valid.\n4. **Database Interaction**: If validation passes, we add the book to our database.\n5. **Logging**: We log the action in a database for tracking.\n\n## Internal Implementation\n\nNow, let's see what happens step-by-step when this command executes:\n\n1. **User Inputs**:\n   - The user provides `title`, `author`, and `price`.\n2. **Validation**:\n   - The command checks if the price is valid.\n3. **Execute Command**:\n   - If validation passes, it adds the book to the database.\n4. **Log Action**:\n   - It logs the action in a database.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandHandler as CH\n    participant Database as DB\n    participant Logger as L\n\n    U->>CH: Add Book \"The Great Gatsby\"\n    CH-->>DB: Validate and add to database\n    CH-->>L: Log action in the database\n```\n\n### Internal Code Walkthrough\n\nLet's dive deeper into the internal code:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\n\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Validation: Check if all inputs are valid\n        $title = $input->getArgument('title');\n        $author = $input->getArgument('author');\n        $price = (float)$input->getArgument('price');\n\n        if ($price < 0) {\n            throw new \\Exception(\"Price cannot be negative.\");\n        }\n\n        // Add the book to the database\n        $database = new Database();\n        $bookId = $database->addBook($title, $author, $price);\n\n        // Log action in a database\n        logAction('Add Book', 'Library App', $bookId);\n\n        return 0;\n    }\n}\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Add the command to the application\n$application->add(new AddBookCommand());\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n- **Command Definition**: We define a command class with validation and database interaction.\n- **Validation**: Ensure inputs are valid before proceeding.\n- **Database Interaction**: Add the book to our database if validation passes.\n- **Logging**: Log the action for tracking.\n\n## Conclusion\n\nIn this chapter, we learned about command execution flow by creating a structured way to handle user commands in our console application. We saw how to validate inputs, execute commands, and notify other systems. Next, we'll explore more advanced concepts like event handling and dispatching!\n\nStay tuned for the next chapter: [Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: CommandLoader/ContainerCommandLoader.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\CommandLoader;\n\nuse Psr\\Container\\ContainerInterface;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Exception\\CommandNotFoundException;\n\n/**\n * Loads commands from a PSR-11 container.\n *\n * @author Robin Chalas <robin.chalas@gmail.com>\n */\nclass ContainerCommandLoader implements CommandLoaderInterface\n{\n    /**\n     * @param array $commandMap An array with command names as keys and service ids as values\n     */\n    public function __construct(\n        private ContainerInterface $container,\n        private array $commandMap,\n    ) {\n    }\n\n    public function get(string $name): Command\n    {\n        if (!$this->has($name)) {\n            throw new CommandNotFoundException(\\sprintf('Command \"%s\" does not exist.', $name));\n        }\n\n        return $this->container->get($this->commandMap[$name]);\n    }\n\n    public function has(string $name): bool\n    {\n        return isset($this->commandMap[$name]) && $this->container->has($this->commandMap[$name]);\n    }\n\n    public function getNames(): array\n    {\n        return array_keys($this->commandMap);\n    }\n}\n\n\n--- File: CommandLoader/FactoryCommandLoader.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\CommandLoader;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Exception\\CommandNotFoundException;\n\n/**\n * A simple command loader using factories to instantiate commands lazily.\n *\n * @author Maxime Steinhausser <maxime.steinhausser@gmail.com>\n */\nclass FactoryCommandLoader implements CommandLoaderInterface\n{\n    /**\n     * @param callable[] $factories Indexed by command names\n     */\n    public function __construct(\n        private array $factories,\n    ) {\n    }\n\n    public function has(string $name): bool\n    {\n        return isset($this->factories[$name]);\n    }\n\n    public function get(string $name): Command\n    {\n        if (!isset($this->factories[$name])) {\n            throw new CommandNotFoundException(\\sprintf('Command \"%s\" does not exist.', $name));\n        }\n\n        $factory = $this->factories[$name];\n\n        return $factory();\n    }\n\n    public function getNames(): array\n    {\n        return array_keys($this->factories);\n    }\n}\n\n\n--- File: Helper/Helper.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\nuse Symfony\\Component\\String\\UnicodeString;\n\n/**\n * Helper is the base class for all helper classes.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nabstract class Helper implements HelperInterface\n{\n    protected ?HelperSet $helperSet = null;\n\n    public function setHelperSet(?HelperSet $helperSet): void\n    {\n        $this->helperSet = $helperSet;\n    }\n\n    public function getHelperSet(): ?HelperSet\n    {\n        return $this->helperSet;\n    }\n\n    /**\n     * Returns the width of a string, using mb_strwidth if it is available.\n     * The width is how many characters positions the string will use.\n     */\n    public static function width(?string $string): int\n    {\n        $string ??= '';\n\n        if (preg_match('//u', $string)) {\n            return (new UnicodeString($string))->width(false);\n        }\n\n        if (false === $encoding = mb_detect_encoding($string, null, true)) {\n            return \\strlen($string);\n        }\n\n        return mb_strwidth($string, $encoding);\n    }\n\n    /**\n     * Returns the length of a string, using mb_strlen if it is available.\n     * The length is related to how many bytes the string will use.\n     */\n    public static function length(?string $string): int\n    {\n        $string ??= '';\n\n        if (preg_match('//u', $string)) {\n            return (new UnicodeString($string))->length();\n        }\n\n        if (false === $encoding = mb_detect_encoding($string, null, true)) {\n            return \\strlen($string);\n        }\n\n        return mb_strlen($string, $encoding);\n    }\n\n    /**\n     * Returns the subset of a string, using mb_substr if it is available.\n     */\n    public static function substr(?string $string, int $from, ?int $length = null): string\n    {\n        $string ??= '';\n\n        if (false === $encoding = mb_detect_encoding($string, null, true)) {\n            return substr($string, $from, $length);\n        }\n\n        return mb_substr($string, $from, $length, $encoding);\n    }\n\n    public static function formatTime(int|float $secs, int $precision = 1): string\n    {\n        $secs = (int) floor($secs);\n\n        if (0 === $secs) {\n            return '< 1 sec';\n        }\n\n        static $timeFormats = [\n            [1, '1 sec', 'secs'],\n            [60, '1 min', 'mins'],\n            [3600, '1 hr', 'hrs'],\n            [86400, '1 day', 'days'],\n        ];\n\n        $times = [];\n        foreach ($timeFormats as $index => $format) {\n            $seconds = isset($timeFormats[$index + 1]) ? $secs % $timeFormats[$index + 1][0] : $secs;\n\n            if (isset($times[$index - $precision])) {\n                unset($times[$index - $precision]);\n            }\n\n            if (0 === $seconds) {\n                continue;\n            }\n\n            $unitCount = ($seconds / $format[0]);\n            $times[$index] = 1 === $unitCount ? $format[1] : $unitCount.' '.$format[2];\n\n            if ($secs === $seconds) {\n                break;\n            }\n\n            $secs -= $seconds;\n        }\n\n        return implode(', ', array_reverse($times));\n    }\n\n    public static function formatMemory(int $memory): string\n    {\n        if ($memory >= 1024 * 1024 * 1024) {\n            return \\sprintf('%.1f GiB', $memory / 1024 / 1024 / 1024);\n        }\n\n        if ($memory >= 1024 * 1024) {\n            return \\sprintf('%.1f MiB', $memory / 1024 / 1024);\n        }\n\n        if ($memory >= 1024) {\n            return \\sprintf('%d KiB', $memory / 1024);\n        }\n\n        return \\sprintf('%d B', $memory);\n    }\n\n    public static function removeDecoration(OutputFormatterInterface $formatter, ?string $string): string\n    {\n        $isDecorated = $formatter->isDecorated();\n        $formatter->setDecorated(false);\n        // remove <...> formatting\n        $string = $formatter->format($string ?? '');\n        // remove already formatted characters\n        $string = preg_replace(\"/\\033\\[[^m]*m/\", '', $string ?? '');\n        // remove terminal hyperlinks\n        $string = preg_replace('/\\\\033]8;[^;]*;[^\\\\033]*\\\\033\\\\\\\\/', '', $string ?? '');\n        $formatter->setDecorated($isDecorated);\n\n        return $string;\n    }\n}\n\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 5: Command Discovery and Loading\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 20 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 5: Command Discovery and Loading\n\n## Motivation\n\nIn our previous chapters, we learned how to handle user inputs, validate them, and execute commands. But what if you want to add more commands or change existing ones easily? How do you make sure your application knows about all the available commands without needing to hard-code them everywhere?\n\nImagine you're organizing a book fair. You have different roles like registering authors, adding books, and listing available books. Each role is a command in our console app. To manage these efficiently, we need an easy way to discover and load these commands.\n\n## Key Concepts\n\n### 1. Command Discovery\nCommand discovery is like a librarian organizing books on shelves. It ensures all your book-related commands are neatly arranged so users can easily find them.\n\n### 2. Command Loading\nLoading commands means making sure the application knows about these commands when it starts up, similar to how you might check a catalog before setting up an event.\n\n## How to Use This Abstraction\n\nLet's see how we can use command discovery and loading in our library app:\n\n1. **Define Commands**: We create different commands for adding books, removing books, and listing all books.\n2. **Discover and Load Commands**: We make sure the application knows about these commands so it can handle them.\n\n## Example Scenario: Adding Book Command\n\nLet's define a simple command to add a book:\n\n```php\n// In AddBookCommand.php\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Implementation details here\n    }\n}\n```\n\n### Explanation\n\n- **Command Definition**: We create an `AddBookCommand` class that extends from Symfony's `Command`.\n- **Configuration**: The `configure` method sets the name and description of the command.\n- **Execution**: In the `execute` method, we can add logic to handle adding a book.\n\n## Example Code\n\nNow, let's see how we can discover and load these commands:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\CommandLoader\\ContainerCommandLoader;\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Define the command map with command names as keys and service ids as values\n$commandMap = [\n    'add-book' => AddBookCommand::class,\n];\n\n// Load commands using ContainerCommandLoader\n$loader = new ContainerCommandLoader($application->getContainer(), $commandMap);\n$application->setCommandLoader($loader);\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n- **Application Instance**: We create an `Application` instance with a name and version.\n- **Command Map**: We define a map that links command names to their respective classes.\n- **Loading Commands**: Using `ContainerCommandLoader`, we load the commands from our application container.\n\n## Internal Implementation\n\nLet's see how the internal implementation works:\n\n1. **User Starts Application**:\n   - The user starts the application and calls the `run` method.\n2. **Application Loads Commands**:\n   - The application uses the command loader to discover and load all available commands based on our defined map.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandLoader as CL\n    participant Application as A\n    participant AddBookCommand as AB\n\n    U->>A: Start application\n    A->>CL: Load commands from command map\n    CL->>AB: Discover and load add-book command\n```\n\n### Explanation of Sequence Diagram\n\n- **User Starts Application**: The user initiates the application.\n- **Application Loads Commands**: The application uses `ContainerCommandLoader` to discover and load all available commands.\n- **Discover and Load Command**: The loader finds the `AddBookCommand` class and loads it.\n\n## Conclusion\n\nIn this chapter, we learned about command discovery and loading. We saw how to define commands and ensure our application knows about them when it starts up. Next, we\u2019ll explore more advanced concepts like signal handling!\n\nStay tuned for the next chapter: [Signal Handling](06_signal_handling_.md)",
    "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `console` about the concept: \"Signal Handling\n\". This is Chapter 6.\n\nConcept Details:\n- Name: Signal Handling\n\n- Description:\nThis abstraction manages signals that can be received during command execution, acting as a listener for external events. It's like a security guard watching for alarms and taking appropriate actions.\n\n\nComplete Tutorial Structure:\n1. [Input Handling and Validation\n](01_input_handling_and_validation_.md)\n2. [Input Definition and Validation\n](02_input_definition_and_validation_.md)\n3. [Event Handling and Dispatching\n](03_event_handling_and_dispatching_.md)\n4. [Command Execution Flow\n](04_command_execution_flow_.md)\n5. [Command Discovery and Loading\n](05_command_discovery_and_loading_.md)\n6. [Signal Handling\n](06_signal_handling_.md)\n7. [Logging and Debugging\n](07_logging_and_debugging_.md)\n8. [Command Testing\n](08_command_testing_.md)\n9. [Output Wrapping\n](09_output_wrapping_.md)\n10. [Output and Formatting\n](10_output_and_formatting_.md)\n\nContext from previous chapters:\n# Chapter 1: Input Handling and Validation\n\nWelcome to our journey into building robust console applications! In the previous chapter, we started exploring how to create commands that can be executed from the command line. However, there's an important aspect we haven't covered yet\u2014ensuring that the input provided by users is valid before proceeding with execution. Think of it like a gatekeeper at an event who checks IDs and only allows entry if they meet specific criteria.\n\n## Why Validation Matters\n\nImagine you're building a console application to manage a library. You have a command to add books, but what happens when someone inputs invalid data? For example, entering a negative number for the book's price or leaving fields blank. Without proper validation, your program might crash or produce incorrect results. This is where input handling and validation come in.\n\n## Key Concepts\n\n### 1. Question Class\nThe `Question` class acts as our gatekeeper. It ensures that user inputs are valid before proceeding with any further actions. Let's break down how it works.\n\n#### Example Scenario: Adding a Book\nSuppose we want to add a new book to the library using a command-line interface. We need to ask for the book's title, author, and price. If any of these fields are invalid (e.g., an empty string or a negative number), our program should not proceed.\n\n### 2. Setting Up Questions\nIn the `Question` class, we can set up questions with default values and validators. For instance, when asking for the book's title, if no value is provided by the user, it defaults to \"Unknown\". If the price is inputted incorrectly (e.g., a negative number), the program will throw an error.\n\n### 3. Using Choice Questions\nSometimes, users might need to make choices from predefined options. For example, we could ask them to select if the book is fiction or non-fiction. The `ChoiceQuestion` class ensures that only valid choices are accepted.\n\n## How to Use It\n\nLet's see how we can use these classes in a practical scenario:\n\n### Example Code\nHere\u2019s a simple example of setting up questions and handling user input using the `Question` and `ChoiceQuestion` classes.\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create a confirmation question to ask if the book should be added.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question for the genre of the book.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask the user questions and handle their responses.\n$helperSet = \\Symfony\\Component\\Console\\Helper\\HelperSet::create();\n$io = $helperSet->get('io');\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Step-by-Step Explanation\n1. **Create Confirmation Question**: We ask the user if they want to add a book.\n2. **Create Choice Question**: We give the user options for the genre of the book.\n3. **Ask Questions and Handle Responses**: The program waits for user input, validates it using built-in validators, and handles any errors.\n\n### Internal Walkthrough\nWhen you run this code:\n- First, you\u2019ll be prompted with a confirmation question: `Do you want to add this book? (yes/no): yes`\n- Then, another prompt will appear asking about the genre: `What is the genre of the book? [fiction, non-fiction]: fiction`\n\nIf any input is invalid, an error message will be displayed.\n\n### Mermaid Diagram\nHere\u2019s a simple sequence diagram illustrating the flow:\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## Conclusion\nIn this chapter, we learned how to handle user inputs using the `Question` class. We saw how to create questions with validation and choices, ensuring that our application handles invalid data gracefully. Next, we\u2019ll dive deeper into the internal implementation of these classes.\n\nStay tuned for the next chapter where we will explore more about event handling and dispatching! [Next Chapter: Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 2: Input Definition and Validation\n\nWelcome back! In our last chapter, we explored how to handle user inputs in our console applications. Now, let's take it one step further by defining the rules for those inputs\u2014essentially creating a set of guidelines that ensure users provide valid data.\n\n## Why Do We Need This?\n\nImagine you're building an application where users can add books to a library. You want them to be able to enter details like the book's title, author, and price. However, what if someone types in a negative price or forgets to fill out required fields? To avoid such issues, we need to define these rules and check that users follow them.\n\n## Key Concepts\n\n### 1. Setting Up Questions\nThink of questions as the gatekeepers at an event. They ensure only valid entries get through. In our library app scenario, we'll set up a series of questions for users to answer when adding a book.\n\n```php\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create confirmation and choice questions.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask users questions and handle their responses.\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### 2. Using the Question Class\nThe `Question` class is like a form where you can ask for specific pieces of information. You can create questions that require yes/no answers or multiple-choice options.\n\n- **ConfirmationQuestion**: Asks a user to confirm something.\n- **ChoiceQuestion**: Provides users with a list of choices from which they must select one.\n\n### Example Walkthrough\nLet's walk through an example where we use these classes:\n\n1. We ask the user if they want to add a book. If they say \"yes,\" we proceed; otherwise, nothing happens.\n2. Next, we ask them to choose the genre of the book from two options: fiction or non-fiction.\n\nIf any input is invalid (e.g., an empty response), the program will display an error message and not proceed with adding the book.\n\n## Sequence Diagram\nHere\u2019s a simple sequence diagram illustrating how these questions work:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## How It Works Internally\nNow, let's peek under the hood. The `Question` class handles user inputs by validating them based on predefined rules.\n\n1. **Create Questions**: Define what kind of question it is (confirmation or choice).\n2. **Ask for Input**: Display the question to the user.\n3. **Validate Response**: Check if the response meets the expected criteria.\n4. **Handle Errors**: If the input isn't valid, display an error message and ask again.\n\n## Internal Implementation\nLet's look at how this works with some simple code snippets:\n\n### Example Code\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion;\n\n// Create a confirmation question.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask users questions and handle their responses.\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Explanation\n1. **Creating Questions**: We define the type of question we want to ask (confirmation or choice) and provide default values if needed.\n2. **Asking for Input**: The `ask` method displays the question to the user and waits for their response.\n3. **Validating Response**: If the input is invalid, an error message is displayed.\n\n## Conclusion\nIn this chapter, we learned how to use the `Question` class to define rules for user inputs in our console applications. We saw how to create confirmation questions and choice questions, ensuring that users provide valid data before proceeding with further actions. Next, we\u2019ll dive into event handling and dispatching!\n\nStay tuned for the next chapter: [Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 3: Event Handling and Dispatching\n\nWelcome back! In our last chapters, we learned about handling user inputs in our console applications and setting up validation rules to ensure those inputs are correct. Now, let's dive into how events work in these systems, much like traffic lights control the flow of vehicles on a road.\n\n## Why Do We Need Event Handling?\n\nImagine you're building an application where users can add books to a library. When someone adds a book, various things might happen\u2014like updating the database, sending a notification, or logging the action. How do we make sure all these actions are handled correctly and efficiently? That's where event handling comes in.\n\n## Key Concepts\n\n### 1. What is an Event?\nAn event is like a signal that tells our application something important has happened. For example, when a user adds a book, it triggers the \"book added\" event.\n\n### 2. Event Handling\nEvent handling means catching these signals and responding to them. Our application can listen for specific events and then perform actions based on those events.\n\n## Example Scenario: Adding a Book\n\nLet's use our library example again. When a user wants to add a book, here are the steps we might want to follow:\n\n1. Validate the input (like checking if the price is positive).\n2. Log the action in a database.\n3. Send a notification to other parts of the system.\n\nWe can set up events for each of these actions and ensure they all work smoothly together.\n\n## How It Works\n\nImagine we have an event like \"BookAddedEvent\". When this event happens, our application will take note and perform the necessary actions.\n\n### 1. Defining Events\nFirst, we define what kind of events we want to handle. For example:\n\n```php\n// In BookAddedEvent.php\nclass BookAddedEvent {\n    private $bookId;\n\n    public function __construct($bookId) {\n        $this->bookId = $bookId;\n    }\n\n    public function getBookId() {\n        return $this->bookId;\n    }\n}\n```\n\n### 2. Dispatching Events\nWhen a book is added, we dispatch (or trigger) the event:\n\n```php\n// In AddBookCommand.php\npublic function execute(InputInterface $input, OutputInterface $output) {\n    // Validate and add the book to the database.\n    \n    $bookId = $this->database->addBook($title, $author, $price);\n    \n    // Dispatch the event\n    $eventDispatcher->dispatch(new BookAddedEvent($bookId));\n}\n```\n\n### 3. Handling Events\nOther parts of our application can listen for this event and perform actions:\n\n```php\n// In DatabaseLogger.php\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass DatabaseLogger implements EventSubscriberInterface {\n    public static function getSubscribedEvents() {\n        return [\n            BookAddedEvent::class => 'logBookAddition',\n        ];\n    }\n\n    public function logBookAddition(BookAddedEvent $event) {\n        $bookId = $event->getBookId();\n        // Log the book addition in a database\n        echo \"Logging that book with ID $bookId was added.\\n\";\n    }\n}\n```\n\n### 4. Example Walkthrough\n\nLet's walk through an example sequence diagram to see how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandHandler as CH\n    participant DatabaseLogger as DL\n    participant BookAddedEvent as E\n\n    U->>CH: Add book \"The Great Gatsby\"\n    CH->>DatabaseLogger: Dispatch BookAddedEvent\n    DL->>DB: Log the addition of the book with ID 123456\n```\n\n## Internal Implementation\n\nNow, let's look at what happens step-by-step:\n\n1. **User Inputs a Command**: The user adds a book.\n2. **Command Handler Validates and Adds the Book**: It checks if all inputs are valid and adds the book to the database.\n3. **Dispatch Event**: The `BookAddedEvent` is dispatched with the book's ID.\n4. **Event Listeners Handle the Event**: The `DatabaseLogger` listens for this event and logs the addition in a database.\n\n## Conclusion\n\nIn this chapter, we learned about event handling and dispatching. We saw how events help coordinate different parts of an application to ensure everything works smoothly together. Next, we'll explore more advanced concepts like command execution flow, which will take us one step further in building robust applications.\n\nStay tuned for the next chapter: [Command Execution Flow](04_command_execution_flow_.md)\n---\n# Chapter 4: Command Execution Flow\n\nWelcome back! In our previous chapters, we explored how to handle user inputs and define validation rules in our console applications. Now, let's dive into the concept of command execution flow. This is like choreographing a dance where each step (command) has its role.\n\n## Motivation\n\nImagine you're building an application that allows users to manage a library. Users can add books, remove books, and list all available books. Each action is a command in our console app. To ensure these commands work smoothly, we need a structured way to handle their execution. This is where the concept of \"Command Execution Flow\" comes in.\n\n## Key Concepts\n\n### What is Command Execution Flow?\n\nThink of it like organizing a school play. You have actors (commands) who each have specific roles and follow a script (execution flow). Just as a director ensures everything runs smoothly, we need to structure our commands so they execute correctly.\n\n### How Does It Work?\n\nLet's use the library example again. When a user wants to add a book, here are the steps:\n\n1. **Validate Input**: Ensure the user inputs valid data.\n2. **Execute Command**: Add the book to the database.\n3. **Notify Other Systems**: Send a notification if needed.\n\nWe'll set up events for each of these actions and make sure they work together seamlessly.\n\n## How to Use It\n\n### Example Scenario: Adding a Book\n\nLet's walk through adding a book step-by-step:\n\n1. **User Input**: The user provides the title, author, and price.\n2. **Validation**: We check if all inputs are valid (e.g., non-negative prices).\n3. **Add to Database**: If validation passes, we add the book to our database.\n4. **Log Action**: Log this action in a database for tracking.\n\n### Example Code\n\nHere\u2019s how we can set up these steps using Symfony Console:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Define the add book command\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Validation: Check if all inputs are valid\n        $title = $input->getArgument('title');\n        $author = $input->getArgument('author');\n        $price = (float)$input->getArgument('price');\n\n        if ($price < 0) {\n            throw new \\Exception(\"Price cannot be negative.\");\n        }\n\n        // Add the book to the database\n        $database = new Database();\n        $bookId = $database->addBook($title, $author, $price);\n\n        // Log action in a database\n        logAction('Add Book', 'Library App', $bookId);\n\n        return 0;\n    }\n}\n\n// Add the command to the application\n$application->add(new AddBookCommand());\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n1. **Application**: We create an `Application` instance with a name and version.\n2. **Add Book Command**: We define a new `Command` class that handles adding books.\n3. **Validation**: Inside the command, we check if the price is valid.\n4. **Database Interaction**: If validation passes, we add the book to our database.\n5. **Logging**: We log the action in a database for tracking.\n\n## Internal Implementation\n\nNow, let's see what happens step-by-step when this command executes:\n\n1. **User Inputs**:\n   - The user provides `title`, `author`, and `price`.\n2. **Validation**:\n   - The command checks if the price is valid.\n3. **Execute Command**:\n   - If validation passes, it adds the book to the database.\n4. **Log Action**:\n   - It logs the action in a database.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandHandler as CH\n    participant Database as DB\n    participant Logger as L\n\n    U->>CH: Add Book \"The Great Gatsby\"\n    CH-->>DB: Validate and add to database\n    CH-->>L: Log action in the database\n```\n\n### Internal Code Walkthrough\n\nLet's dive deeper into the internal code:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\n\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Validation: Check if all inputs are valid\n        $title = $input->getArgument('title');\n        $author = $input->getArgument('author');\n        $price = (float)$input->getArgument('price');\n\n        if ($price < 0) {\n            throw new \\Exception(\"Price cannot be negative.\");\n        }\n\n        // Add the book to the database\n        $database = new Database();\n        $bookId = $database->addBook($title, $author, $price);\n\n        // Log action in a database\n        logAction('Add Book', 'Library App', $bookId);\n\n        return 0;\n    }\n}\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Add the command to the application\n$application->add(new AddBookCommand());\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n- **Command Definition**: We define a command class with validation and database interaction.\n- **Validation**: Ensure inputs are valid before proceeding.\n- **Database Interaction**: Add the book to our database if validation passes.\n- **Logging**: Log the action for tracking.\n\n## Conclusion\n\nIn this chapter, we learned about command execution flow by creating a structured way to handle user commands in our console application. We saw how to validate inputs, execute commands, and notify other systems. Next, we'll explore more advanced concepts like event handling and dispatching!\n\nStay tuned for the next chapter: [Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 5: Command Discovery and Loading\n\n## Motivation\n\nIn our previous chapters, we learned how to handle user inputs, validate them, and execute commands. But what if you want to add more commands or change existing ones easily? How do you make sure your application knows about all the available commands without needing to hard-code them everywhere?\n\nImagine you're organizing a book fair. You have different roles like registering authors, adding books, and listing available books. Each role is a command in our console app. To manage these efficiently, we need an easy way to discover and load these commands.\n\n## Key Concepts\n\n### 1. Command Discovery\nCommand discovery is like a librarian organizing books on shelves. It ensures all your book-related commands are neatly arranged so users can easily find them.\n\n### 2. Command Loading\nLoading commands means making sure the application knows about these commands when it starts up, similar to how you might check a catalog before setting up an event.\n\n## How to Use This Abstraction\n\nLet's see how we can use command discovery and loading in our library app:\n\n1. **Define Commands**: We create different commands for adding books, removing books, and listing all books.\n2. **Discover and Load Commands**: We make sure the application knows about these commands so it can handle them.\n\n## Example Scenario: Adding Book Command\n\nLet's define a simple command to add a book:\n\n```php\n// In AddBookCommand.php\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Implementation details here\n    }\n}\n```\n\n### Explanation\n\n- **Command Definition**: We create an `AddBookCommand` class that extends from Symfony's `Command`.\n- **Configuration**: The `configure` method sets the name and description of the command.\n- **Execution**: In the `execute` method, we can add logic to handle adding a book.\n\n## Example Code\n\nNow, let's see how we can discover and load these commands:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\CommandLoader\\ContainerCommandLoader;\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Define the command map with command names as keys and service ids as values\n$commandMap = [\n    'add-book' => AddBookCommand::class,\n];\n\n// Load commands using ContainerCommandLoader\n$loader = new ContainerCommandLoader($application->getContainer(), $commandMap);\n$application->setCommandLoader($loader);\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n- **Application Instance**: We create an `Application` instance with a name and version.\n- **Command Map**: We define a map that links command names to their respective classes.\n- **Loading Commands**: Using `ContainerCommandLoader`, we load the commands from our application container.\n\n## Internal Implementation\n\nLet's see how the internal implementation works:\n\n1. **User Starts Application**:\n   - The user starts the application and calls the `run` method.\n2. **Application Loads Commands**:\n   - The application uses the command loader to discover and load all available commands based on our defined map.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandLoader as CL\n    participant Application as A\n    participant AddBookCommand as AB\n\n    U->>A: Start application\n    A->>CL: Load commands from command map\n    CL->>AB: Discover and load add-book command\n```\n\n### Explanation of Sequence Diagram\n\n- **User Starts Application**: The user initiates the application.\n- **Application Loads Commands**: The application uses `ContainerCommandLoader` to discover and load all available commands.\n- **Discover and Load Command**: The loader finds the `AddBookCommand` class and loads it.\n\n## Conclusion\n\nIn this chapter, we learned about command discovery and loading. We saw how to define commands and ensure our application knows about them when it starts up. Next, we\u2019ll explore more advanced concepts like signal handling!\n\nStay tuned for the next chapter: [Signal Handling](06_signal_handling_.md)\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: Formatter/OutputFormatterStyle.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Formatter;\n\nuse Symfony\\Component\\Console\\Color;\n\n/**\n * Formatter style class for defining styles.\n *\n * @author Konstantin Kudryashov <ever.zet@gmail.com>\n */\nclass OutputFormatterStyle implements OutputFormatterStyleInterface\n{\n    private Color $color;\n    private string $foreground;\n    private string $background;\n    private array $options;\n    private ?string $href = null;\n    private bool $handlesHrefGracefully;\n\n    /**\n     * Initializes output formatter style.\n     *\n     * @param string|null $foreground The style foreground color name\n     * @param string|null $background The style background color name\n     */\n    public function __construct(?string $foreground = null, ?string $background = null, array $options = [])\n    {\n        $this->color = new Color($this->foreground = $foreground ?: '', $this->background = $background ?: '', $this->options = $options);\n    }\n\n    public function setForeground(?string $color): void\n    {\n        $this->color = new Color($this->foreground = $color ?: '', $this->background, $this->options);\n    }\n\n    public function setBackground(?string $color): void\n    {\n        $this->color = new Color($this->foreground, $this->background = $color ?: '', $this->options);\n    }\n\n    public function setHref(string $url): void\n    {\n        $this->href = $url;\n    }\n\n    public function setOption(string $option): void\n    {\n        $this->options[] = $option;\n        $this->color = new Color($this->foreground, $this->background, $this->options);\n    }\n\n    public function unsetOption(string $option): void\n    {\n        $pos = array_search($option, $this->options);\n        if (false !== $pos) {\n            unset($this->options[$pos]);\n        }\n\n        $this->color = new Color($this->foreground, $this->background, $this->options);\n    }\n\n    public function setOptions(array $options): void\n    {\n        $this->color = new Color($this->foreground, $this->background, $this->options = $options);\n    }\n\n    public function apply(string $text): string\n    {\n        $this->handlesHrefGracefully ??= 'JetBrains-JediTerm' !== getenv('TERMINAL_EMULATOR')\n            && (!getenv('KONSOLE_VERSION') || (int) getenv('KONSOLE_VERSION') > 201100)\n            && !isset($_SERVER['IDEA_INITIAL_DIRECTORY']);\n\n        if (null !== $this->href && $this->handlesHrefGracefully) {\n            $text = \"\\033]8;;$this->href\\033\\\\$text\\033]8;;\\033\\\\\";\n        }\n\n        return $this->color->apply($text);\n    }\n}\n\n\n--- File: DependencyInjection/AddConsoleCommandPass.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\DependencyInjection;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Command\\LazyCommand;\nuse Symfony\\Component\\Console\\CommandLoader\\ContainerCommandLoader;\nuse Symfony\\Component\\DependencyInjection\\Argument\\ServiceClosureArgument;\nuse Symfony\\Component\\DependencyInjection\\Compiler\\CompilerPassInterface;\nuse Symfony\\Component\\DependencyInjection\\Compiler\\ServiceLocatorTagPass;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\DependencyInjection\\Reference;\nuse Symfony\\Component\\DependencyInjection\\TypedReference;\n\n/**\n * Registers console commands.\n *\n * @author Gr\u00e9goire Pineau <lyrixx@lyrixx.info>\n */\nclass AddConsoleCommandPass implements CompilerPassInterface\n{\n    public function process(ContainerBuilder $container): void\n    {\n        $commandServices = $container->findTaggedServiceIds('console.command', true);\n        $lazyCommandMap = [];\n        $lazyCommandRefs = [];\n        $serviceIds = [];\n\n        foreach ($commandServices as $id => $tags) {\n            $definition = $container->getDefinition($id);\n            $definition->addTag('container.no_preload');\n            $class = $container->getParameterBag()->resolveValue($definition->getClass());\n\n            if (isset($tags[0]['command'])) {\n                $aliases = $tags[0]['command'];\n            } else {\n                if (!$r = $container->getReflectionClass($class)) {\n                    throw new InvalidArgumentException(\\sprintf('Class \"%s\" used for service \"%s\" cannot be found.', $class, $id));\n                }\n                if (!$r->isSubclassOf(Command::class)) {\n                    throw new InvalidArgumentException(\\sprintf('The service \"%s\" tagged \"%s\" must be a subclass of \"%s\".', $id, 'console.command', Command::class));\n                }\n                $aliases = str_replace('%', '%%', $class::getDefaultName() ?? '');\n            }\n\n            $aliases = explode('|', $aliases);\n            $commandName = array_shift($aliases);\n\n            if ($isHidden = '' === $commandName) {\n                $commandName = array_shift($aliases);\n            }\n\n            if (null === $commandName) {\n                if (!$definition->isPublic() || $definition->isPrivate() || $definition->hasTag('container.private')) {\n                    $commandId = 'console.command.public_alias.'.$id;\n                    $container->setAlias($commandId, $id)->setPublic(true);\n                    $id = $commandId;\n                }\n                $serviceIds[] = $id;\n\n                continue;\n            }\n\n            $description = $tags[0]['description'] ?? null;\n\n            unset($tags[0]);\n            $lazyCommandMap[$commandName] = $id;\n            $lazyCommandRefs[$id] = new TypedReference($id, $class);\n\n            foreach ($aliases as $alias) {\n                $lazyCommandMap[$alias] = $id;\n            }\n\n            foreach ($tags as $tag) {\n                if (isset($tag['command'])) {\n                    $aliases[] = $tag['command'];\n                    $lazyCommandMap[$tag['command']] = $id;\n                }\n\n                $description ??= $tag['description'] ?? null;\n            }\n\n            $definition->addMethodCall('setName', [$commandName]);\n\n            if ($aliases) {\n                $definition->addMethodCall('setAliases', [$aliases]);\n            }\n\n            if ($isHidden) {\n                $definition->addMethodCall('setHidden', [true]);\n            }\n\n            if (!$description) {\n                if (!$r = $container->getReflectionClass($class)) {\n                    throw new InvalidArgumentException(\\sprintf('Class \"%s\" used for service \"%s\" cannot be found.', $class, $id));\n                }\n                if (!$r->isSubclassOf(Command::class)) {\n                    throw new InvalidArgumentException(\\sprintf('The service \"%s\" tagged \"%s\" must be a subclass of \"%s\".', $id, 'console.command', Command::class));\n                }\n                $description = str_replace('%', '%%', $class::getDefaultDescription() ?? '');\n            }\n\n            if ($description) {\n                $definition->addMethodCall('setDescription', [$description]);\n\n                $container->register('.'.$id.'.lazy', LazyCommand::class)\n                    ->setArguments([$commandName, $aliases, $description, $isHidden, new ServiceClosureArgument($lazyCommandRefs[$id])]);\n\n                $lazyCommandRefs[$id] = new Reference('.'.$id.'.lazy');\n            }\n        }\n\n        $container\n            ->register('console.command_loader', ContainerCommandLoader::class)\n            ->setPublic(true)\n            ->addTag('container.no_preload')\n            ->setArguments([ServiceLocatorTagPass::register($container, $lazyCommandRefs), $lazyCommandMap]);\n\n        $container->setParameter('console.command.ids', $serviceIds);\n    }\n}\n\n\n--- File: Event/ConsoleSignalEvent.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * @author marie <marie@users.noreply.github.com>\n */\nfinal class ConsoleSignalEvent extends ConsoleEvent\n{\n    public function __construct(\n        Command $command,\n        InputInterface $input,\n        OutputInterface $output,\n        private int $handlingSignal,\n        private int|false $exitCode = 0,\n    ) {\n        parent::__construct($command, $input, $output);\n    }\n\n    public function getHandlingSignal(): int\n    {\n        return $this->handlingSignal;\n    }\n\n    public function setExitCode(int $exitCode): void\n    {\n        if ($exitCode < 0 || $exitCode > 255) {\n            throw new \\InvalidArgumentException('Exit code must be between 0 and 255.');\n        }\n\n        $this->exitCode = $exitCode;\n    }\n\n    public function abortExit(): void\n    {\n        $this->exitCode = false;\n    }\n\n    public function getExitCode(): int|false\n    {\n        return $this->exitCode;\n    }\n}\n\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 6: Signal Handling\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 20 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 6: Signal Handling\n\n## Motivation\n\nIn our previous chapters, we learned how to handle user inputs and validate them before processing commands. However, sometimes the application might need to react to external events or signals that come from outside. Think of it like a traffic light system where different lights (signals) trigger actions in the console app.\n\nImagine you're building an application that runs on a server. Sometimes, this server needs to stop running the application due to certain conditions\u2014like when the server is shut down or receives a specific command. In these situations, we need to catch and handle such signals.\n\n## Key Concepts\n\n### 1. What is a Signal?\nA signal is like an emergency bell that rings in your console app. It's a notification from outside (e.g., operating system) that something important has happened.\n\n### 2. Handling Signals\nHandling signals means setting up listeners to catch these bells and take appropriate actions, just as you would listen for fire alarms and evacuate the building accordingly.\n\n## How to Use Signal Handling\n\nLet's use an example: You're developing a backup tool that should run every night. However, if someone sends a shutdown signal (like pressing `Ctrl+C`), your application needs to stop running gracefully instead of crashing.\n\n### Example Scenario: Backup Tool\n\n1. **User Starts Application**: The user runs the backup tool.\n2. **Backup in Progress**: The app starts backing up files.\n3. **Signal Received**: If someone sends a shutdown signal, the app stops and exits cleanly.\n\n## Code to Handle Signals\n\nHere's how we can handle signals in our application:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\nuse Symfony\\Component\\Console\\Output\\NullOutput;\n\n// Create an Application instance\n$application = new Application('Backup Tool', '1.0');\n\n// Define the command to run backups\nclass BackupCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('backup')\n            ->setDescription('Run a backup of the files');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Perform file backup logic here\n        echo \"Starting backup...\\n\";\n        sleep(5);  // Simulate backup process\n        echo \"Backup completed!\\n\";\n    }\n}\n\n// Add the command to the application\n$application->add(new BackupCommand());\n\n// Run the application\ntry {\n    $exitCode = $application->run(new ArrayInput([]), new NullOutput());\n} catch (\\Exception $e) {\n    // Handle signals by catching exceptions\n    echo \"Caught an exception: \" . $e->getMessage() . \"\\n\";\n}\n```\n\n### Explanation\n\n1. **Application Instance**: We create a `Symfony\\Component\\Console\\Application` instance with the app name and version.\n2. **Command Definition**: We define a `BackupCommand` to handle file backups.\n3. **Running Application**: We try to run the application using `run` method, which catches exceptions thrown by signals.\n\n## Internal Implementation\n\nLet's see what happens step-by-step:\n\n1. **User Starts Application**:\n   - The user runs the backup tool.\n2. **Application Runs Command**:\n   - The app starts performing file backups.\n3. **Signal Received**:\n   - If a signal is received, it throws an exception which we catch and handle.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Application as A\n    participant CommandHandler as CH\n\n    U->>A: Start application\n    A->>CH: Run backup command\n    alt Signal received (Ctrl+C)\n        A-->>CH: Catches exception and handles signal\n    else Backup completed\n        CH-->>A: Reports completion\n    end\n```\n\n### Explanation of Sequence Diagram\n\n- **User Starts Application**: The user initiates the application.\n- **Application Runs Command**: The app starts running the backup command.\n- **Signal Received (Ctrl+C)**: If a signal is received, it catches and handles the exception gracefully.\n- **Backup Completed**: If no signals are caught, the backup process completes.\n\n## Conclusion\n\nIn this chapter, we learned how to handle signals in our console application. We saw how to set up listeners for external events and ensure that our app behaves correctly when receiving these signals. Next, we'll explore more advanced concepts like logging and debugging!\n\nStay tuned for the next chapter: [Logging and Debugging](07_logging_and_debugging_.md)",
    "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `console` about the concept: \"Logging and Debugging\n\". This is Chapter 7.\n\nConcept Details:\n- Name: Logging and Debugging\n\n- Description:\nThis abstraction provides mechanisms for logging and debugging, similar to how a detective collects evidence. It helps in tracing the flow of execution and identifying issues.\n\n\nComplete Tutorial Structure:\n1. [Input Handling and Validation\n](01_input_handling_and_validation_.md)\n2. [Input Definition and Validation\n](02_input_definition_and_validation_.md)\n3. [Event Handling and Dispatching\n](03_event_handling_and_dispatching_.md)\n4. [Command Execution Flow\n](04_command_execution_flow_.md)\n5. [Command Discovery and Loading\n](05_command_discovery_and_loading_.md)\n6. [Signal Handling\n](06_signal_handling_.md)\n7. [Logging and Debugging\n](07_logging_and_debugging_.md)\n8. [Command Testing\n](08_command_testing_.md)\n9. [Output Wrapping\n](09_output_wrapping_.md)\n10. [Output and Formatting\n](10_output_and_formatting_.md)\n\nContext from previous chapters:\n# Chapter 1: Input Handling and Validation\n\nWelcome to our journey into building robust console applications! In the previous chapter, we started exploring how to create commands that can be executed from the command line. However, there's an important aspect we haven't covered yet\u2014ensuring that the input provided by users is valid before proceeding with execution. Think of it like a gatekeeper at an event who checks IDs and only allows entry if they meet specific criteria.\n\n## Why Validation Matters\n\nImagine you're building a console application to manage a library. You have a command to add books, but what happens when someone inputs invalid data? For example, entering a negative number for the book's price or leaving fields blank. Without proper validation, your program might crash or produce incorrect results. This is where input handling and validation come in.\n\n## Key Concepts\n\n### 1. Question Class\nThe `Question` class acts as our gatekeeper. It ensures that user inputs are valid before proceeding with any further actions. Let's break down how it works.\n\n#### Example Scenario: Adding a Book\nSuppose we want to add a new book to the library using a command-line interface. We need to ask for the book's title, author, and price. If any of these fields are invalid (e.g., an empty string or a negative number), our program should not proceed.\n\n### 2. Setting Up Questions\nIn the `Question` class, we can set up questions with default values and validators. For instance, when asking for the book's title, if no value is provided by the user, it defaults to \"Unknown\". If the price is inputted incorrectly (e.g., a negative number), the program will throw an error.\n\n### 3. Using Choice Questions\nSometimes, users might need to make choices from predefined options. For example, we could ask them to select if the book is fiction or non-fiction. The `ChoiceQuestion` class ensures that only valid choices are accepted.\n\n## How to Use It\n\nLet's see how we can use these classes in a practical scenario:\n\n### Example Code\nHere\u2019s a simple example of setting up questions and handling user input using the `Question` and `ChoiceQuestion` classes.\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create a confirmation question to ask if the book should be added.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question for the genre of the book.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask the user questions and handle their responses.\n$helperSet = \\Symfony\\Component\\Console\\Helper\\HelperSet::create();\n$io = $helperSet->get('io');\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Step-by-Step Explanation\n1. **Create Confirmation Question**: We ask the user if they want to add a book.\n2. **Create Choice Question**: We give the user options for the genre of the book.\n3. **Ask Questions and Handle Responses**: The program waits for user input, validates it using built-in validators, and handles any errors.\n\n### Internal Walkthrough\nWhen you run this code:\n- First, you\u2019ll be prompted with a confirmation question: `Do you want to add this book? (yes/no): yes`\n- Then, another prompt will appear asking about the genre: `What is the genre of the book? [fiction, non-fiction]: fiction`\n\nIf any input is invalid, an error message will be displayed.\n\n### Mermaid Diagram\nHere\u2019s a simple sequence diagram illustrating the flow:\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## Conclusion\nIn this chapter, we learned how to handle user inputs using the `Question` class. We saw how to create questions with validation and choices, ensuring that our application handles invalid data gracefully. Next, we\u2019ll dive deeper into the internal implementation of these classes.\n\nStay tuned for the next chapter where we will explore more about event handling and dispatching! [Next Chapter: Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 2: Input Definition and Validation\n\nWelcome back! In our last chapter, we explored how to handle user inputs in our console applications. Now, let's take it one step further by defining the rules for those inputs\u2014essentially creating a set of guidelines that ensure users provide valid data.\n\n## Why Do We Need This?\n\nImagine you're building an application where users can add books to a library. You want them to be able to enter details like the book's title, author, and price. However, what if someone types in a negative price or forgets to fill out required fields? To avoid such issues, we need to define these rules and check that users follow them.\n\n## Key Concepts\n\n### 1. Setting Up Questions\nThink of questions as the gatekeepers at an event. They ensure only valid entries get through. In our library app scenario, we'll set up a series of questions for users to answer when adding a book.\n\n```php\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create confirmation and choice questions.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask users questions and handle their responses.\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### 2. Using the Question Class\nThe `Question` class is like a form where you can ask for specific pieces of information. You can create questions that require yes/no answers or multiple-choice options.\n\n- **ConfirmationQuestion**: Asks a user to confirm something.\n- **ChoiceQuestion**: Provides users with a list of choices from which they must select one.\n\n### Example Walkthrough\nLet's walk through an example where we use these classes:\n\n1. We ask the user if they want to add a book. If they say \"yes,\" we proceed; otherwise, nothing happens.\n2. Next, we ask them to choose the genre of the book from two options: fiction or non-fiction.\n\nIf any input is invalid (e.g., an empty response), the program will display an error message and not proceed with adding the book.\n\n## Sequence Diagram\nHere\u2019s a simple sequence diagram illustrating how these questions work:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## How It Works Internally\nNow, let's peek under the hood. The `Question` class handles user inputs by validating them based on predefined rules.\n\n1. **Create Questions**: Define what kind of question it is (confirmation or choice).\n2. **Ask for Input**: Display the question to the user.\n3. **Validate Response**: Check if the response meets the expected criteria.\n4. **Handle Errors**: If the input isn't valid, display an error message and ask again.\n\n## Internal Implementation\nLet's look at how this works with some simple code snippets:\n\n### Example Code\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion;\n\n// Create a confirmation question.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask users questions and handle their responses.\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Explanation\n1. **Creating Questions**: We define the type of question we want to ask (confirmation or choice) and provide default values if needed.\n2. **Asking for Input**: The `ask` method displays the question to the user and waits for their response.\n3. **Validating Response**: If the input is invalid, an error message is displayed.\n\n## Conclusion\nIn this chapter, we learned how to use the `Question` class to define rules for user inputs in our console applications. We saw how to create confirmation questions and choice questions, ensuring that users provide valid data before proceeding with further actions. Next, we\u2019ll dive into event handling and dispatching!\n\nStay tuned for the next chapter: [Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 3: Event Handling and Dispatching\n\nWelcome back! In our last chapters, we learned about handling user inputs in our console applications and setting up validation rules to ensure those inputs are correct. Now, let's dive into how events work in these systems, much like traffic lights control the flow of vehicles on a road.\n\n## Why Do We Need Event Handling?\n\nImagine you're building an application where users can add books to a library. When someone adds a book, various things might happen\u2014like updating the database, sending a notification, or logging the action. How do we make sure all these actions are handled correctly and efficiently? That's where event handling comes in.\n\n## Key Concepts\n\n### 1. What is an Event?\nAn event is like a signal that tells our application something important has happened. For example, when a user adds a book, it triggers the \"book added\" event.\n\n### 2. Event Handling\nEvent handling means catching these signals and responding to them. Our application can listen for specific events and then perform actions based on those events.\n\n## Example Scenario: Adding a Book\n\nLet's use our library example again. When a user wants to add a book, here are the steps we might want to follow:\n\n1. Validate the input (like checking if the price is positive).\n2. Log the action in a database.\n3. Send a notification to other parts of the system.\n\nWe can set up events for each of these actions and ensure they all work smoothly together.\n\n## How It Works\n\nImagine we have an event like \"BookAddedEvent\". When this event happens, our application will take note and perform the necessary actions.\n\n### 1. Defining Events\nFirst, we define what kind of events we want to handle. For example:\n\n```php\n// In BookAddedEvent.php\nclass BookAddedEvent {\n    private $bookId;\n\n    public function __construct($bookId) {\n        $this->bookId = $bookId;\n    }\n\n    public function getBookId() {\n        return $this->bookId;\n    }\n}\n```\n\n### 2. Dispatching Events\nWhen a book is added, we dispatch (or trigger) the event:\n\n```php\n// In AddBookCommand.php\npublic function execute(InputInterface $input, OutputInterface $output) {\n    // Validate and add the book to the database.\n    \n    $bookId = $this->database->addBook($title, $author, $price);\n    \n    // Dispatch the event\n    $eventDispatcher->dispatch(new BookAddedEvent($bookId));\n}\n```\n\n### 3. Handling Events\nOther parts of our application can listen for this event and perform actions:\n\n```php\n// In DatabaseLogger.php\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass DatabaseLogger implements EventSubscriberInterface {\n    public static function getSubscribedEvents() {\n        return [\n            BookAddedEvent::class => 'logBookAddition',\n        ];\n    }\n\n    public function logBookAddition(BookAddedEvent $event) {\n        $bookId = $event->getBookId();\n        // Log the book addition in a database\n        echo \"Logging that book with ID $bookId was added.\\n\";\n    }\n}\n```\n\n### 4. Example Walkthrough\n\nLet's walk through an example sequence diagram to see how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandHandler as CH\n    participant DatabaseLogger as DL\n    participant BookAddedEvent as E\n\n    U->>CH: Add book \"The Great Gatsby\"\n    CH->>DatabaseLogger: Dispatch BookAddedEvent\n    DL->>DB: Log the addition of the book with ID 123456\n```\n\n## Internal Implementation\n\nNow, let's look at what happens step-by-step:\n\n1. **User Inputs a Command**: The user adds a book.\n2. **Command Handler Validates and Adds the Book**: It checks if all inputs are valid and adds the book to the database.\n3. **Dispatch Event**: The `BookAddedEvent` is dispatched with the book's ID.\n4. **Event Listeners Handle the Event**: The `DatabaseLogger` listens for this event and logs the addition in a database.\n\n## Conclusion\n\nIn this chapter, we learned about event handling and dispatching. We saw how events help coordinate different parts of an application to ensure everything works smoothly together. Next, we'll explore more advanced concepts like command execution flow, which will take us one step further in building robust applications.\n\nStay tuned for the next chapter: [Command Execution Flow](04_command_execution_flow_.md)\n---\n# Chapter 4: Command Execution Flow\n\nWelcome back! In our previous chapters, we explored how to handle user inputs and define validation rules in our console applications. Now, let's dive into the concept of command execution flow. This is like choreographing a dance where each step (command) has its role.\n\n## Motivation\n\nImagine you're building an application that allows users to manage a library. Users can add books, remove books, and list all available books. Each action is a command in our console app. To ensure these commands work smoothly, we need a structured way to handle their execution. This is where the concept of \"Command Execution Flow\" comes in.\n\n## Key Concepts\n\n### What is Command Execution Flow?\n\nThink of it like organizing a school play. You have actors (commands) who each have specific roles and follow a script (execution flow). Just as a director ensures everything runs smoothly, we need to structure our commands so they execute correctly.\n\n### How Does It Work?\n\nLet's use the library example again. When a user wants to add a book, here are the steps:\n\n1. **Validate Input**: Ensure the user inputs valid data.\n2. **Execute Command**: Add the book to the database.\n3. **Notify Other Systems**: Send a notification if needed.\n\nWe'll set up events for each of these actions and make sure they work together seamlessly.\n\n## How to Use It\n\n### Example Scenario: Adding a Book\n\nLet's walk through adding a book step-by-step:\n\n1. **User Input**: The user provides the title, author, and price.\n2. **Validation**: We check if all inputs are valid (e.g., non-negative prices).\n3. **Add to Database**: If validation passes, we add the book to our database.\n4. **Log Action**: Log this action in a database for tracking.\n\n### Example Code\n\nHere\u2019s how we can set up these steps using Symfony Console:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Define the add book command\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Validation: Check if all inputs are valid\n        $title = $input->getArgument('title');\n        $author = $input->getArgument('author');\n        $price = (float)$input->getArgument('price');\n\n        if ($price < 0) {\n            throw new \\Exception(\"Price cannot be negative.\");\n        }\n\n        // Add the book to the database\n        $database = new Database();\n        $bookId = $database->addBook($title, $author, $price);\n\n        // Log action in a database\n        logAction('Add Book', 'Library App', $bookId);\n\n        return 0;\n    }\n}\n\n// Add the command to the application\n$application->add(new AddBookCommand());\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n1. **Application**: We create an `Application` instance with a name and version.\n2. **Add Book Command**: We define a new `Command` class that handles adding books.\n3. **Validation**: Inside the command, we check if the price is valid.\n4. **Database Interaction**: If validation passes, we add the book to our database.\n5. **Logging**: We log the action in a database for tracking.\n\n## Internal Implementation\n\nNow, let's see what happens step-by-step when this command executes:\n\n1. **User Inputs**:\n   - The user provides `title`, `author`, and `price`.\n2. **Validation**:\n   - The command checks if the price is valid.\n3. **Execute Command**:\n   - If validation passes, it adds the book to the database.\n4. **Log Action**:\n   - It logs the action in a database.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandHandler as CH\n    participant Database as DB\n    participant Logger as L\n\n    U->>CH: Add Book \"The Great Gatsby\"\n    CH-->>DB: Validate and add to database\n    CH-->>L: Log action in the database\n```\n\n### Internal Code Walkthrough\n\nLet's dive deeper into the internal code:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\n\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Validation: Check if all inputs are valid\n        $title = $input->getArgument('title');\n        $author = $input->getArgument('author');\n        $price = (float)$input->getArgument('price');\n\n        if ($price < 0) {\n            throw new \\Exception(\"Price cannot be negative.\");\n        }\n\n        // Add the book to the database\n        $database = new Database();\n        $bookId = $database->addBook($title, $author, $price);\n\n        // Log action in a database\n        logAction('Add Book', 'Library App', $bookId);\n\n        return 0;\n    }\n}\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Add the command to the application\n$application->add(new AddBookCommand());\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n- **Command Definition**: We define a command class with validation and database interaction.\n- **Validation**: Ensure inputs are valid before proceeding.\n- **Database Interaction**: Add the book to our database if validation passes.\n- **Logging**: Log the action for tracking.\n\n## Conclusion\n\nIn this chapter, we learned about command execution flow by creating a structured way to handle user commands in our console application. We saw how to validate inputs, execute commands, and notify other systems. Next, we'll explore more advanced concepts like event handling and dispatching!\n\nStay tuned for the next chapter: [Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 5: Command Discovery and Loading\n\n## Motivation\n\nIn our previous chapters, we learned how to handle user inputs, validate them, and execute commands. But what if you want to add more commands or change existing ones easily? How do you make sure your application knows about all the available commands without needing to hard-code them everywhere?\n\nImagine you're organizing a book fair. You have different roles like registering authors, adding books, and listing available books. Each role is a command in our console app. To manage these efficiently, we need an easy way to discover and load these commands.\n\n## Key Concepts\n\n### 1. Command Discovery\nCommand discovery is like a librarian organizing books on shelves. It ensures all your book-related commands are neatly arranged so users can easily find them.\n\n### 2. Command Loading\nLoading commands means making sure the application knows about these commands when it starts up, similar to how you might check a catalog before setting up an event.\n\n## How to Use This Abstraction\n\nLet's see how we can use command discovery and loading in our library app:\n\n1. **Define Commands**: We create different commands for adding books, removing books, and listing all books.\n2. **Discover and Load Commands**: We make sure the application knows about these commands so it can handle them.\n\n## Example Scenario: Adding Book Command\n\nLet's define a simple command to add a book:\n\n```php\n// In AddBookCommand.php\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Implementation details here\n    }\n}\n```\n\n### Explanation\n\n- **Command Definition**: We create an `AddBookCommand` class that extends from Symfony's `Command`.\n- **Configuration**: The `configure` method sets the name and description of the command.\n- **Execution**: In the `execute` method, we can add logic to handle adding a book.\n\n## Example Code\n\nNow, let's see how we can discover and load these commands:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\CommandLoader\\ContainerCommandLoader;\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Define the command map with command names as keys and service ids as values\n$commandMap = [\n    'add-book' => AddBookCommand::class,\n];\n\n// Load commands using ContainerCommandLoader\n$loader = new ContainerCommandLoader($application->getContainer(), $commandMap);\n$application->setCommandLoader($loader);\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n- **Application Instance**: We create an `Application` instance with a name and version.\n- **Command Map**: We define a map that links command names to their respective classes.\n- **Loading Commands**: Using `ContainerCommandLoader`, we load the commands from our application container.\n\n## Internal Implementation\n\nLet's see how the internal implementation works:\n\n1. **User Starts Application**:\n   - The user starts the application and calls the `run` method.\n2. **Application Loads Commands**:\n   - The application uses the command loader to discover and load all available commands based on our defined map.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandLoader as CL\n    participant Application as A\n    participant AddBookCommand as AB\n\n    U->>A: Start application\n    A->>CL: Load commands from command map\n    CL->>AB: Discover and load add-book command\n```\n\n### Explanation of Sequence Diagram\n\n- **User Starts Application**: The user initiates the application.\n- **Application Loads Commands**: The application uses `ContainerCommandLoader` to discover and load all available commands.\n- **Discover and Load Command**: The loader finds the `AddBookCommand` class and loads it.\n\n## Conclusion\n\nIn this chapter, we learned about command discovery and loading. We saw how to define commands and ensure our application knows about them when it starts up. Next, we\u2019ll explore more advanced concepts like signal handling!\n\nStay tuned for the next chapter: [Signal Handling](06_signal_handling_.md)\n---\n# Chapter 6: Signal Handling\n\n## Motivation\n\nIn our previous chapters, we learned how to handle user inputs and validate them before processing commands. However, sometimes the application might need to react to external events or signals that come from outside. Think of it like a traffic light system where different lights (signals) trigger actions in the console app.\n\nImagine you're building an application that runs on a server. Sometimes, this server needs to stop running the application due to certain conditions\u2014like when the server is shut down or receives a specific command. In these situations, we need to catch and handle such signals.\n\n## Key Concepts\n\n### 1. What is a Signal?\nA signal is like an emergency bell that rings in your console app. It's a notification from outside (e.g., operating system) that something important has happened.\n\n### 2. Handling Signals\nHandling signals means setting up listeners to catch these bells and take appropriate actions, just as you would listen for fire alarms and evacuate the building accordingly.\n\n## How to Use Signal Handling\n\nLet's use an example: You're developing a backup tool that should run every night. However, if someone sends a shutdown signal (like pressing `Ctrl+C`), your application needs to stop running gracefully instead of crashing.\n\n### Example Scenario: Backup Tool\n\n1. **User Starts Application**: The user runs the backup tool.\n2. **Backup in Progress**: The app starts backing up files.\n3. **Signal Received**: If someone sends a shutdown signal, the app stops and exits cleanly.\n\n## Code to Handle Signals\n\nHere's how we can handle signals in our application:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\nuse Symfony\\Component\\Console\\Output\\NullOutput;\n\n// Create an Application instance\n$application = new Application('Backup Tool', '1.0');\n\n// Define the command to run backups\nclass BackupCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('backup')\n            ->setDescription('Run a backup of the files');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Perform file backup logic here\n        echo \"Starting backup...\\n\";\n        sleep(5);  // Simulate backup process\n        echo \"Backup completed!\\n\";\n    }\n}\n\n// Add the command to the application\n$application->add(new BackupCommand());\n\n// Run the application\ntry {\n    $exitCode = $application->run(new ArrayInput([]), new NullOutput());\n} catch (\\Exception $e) {\n    // Handle signals by catching exceptions\n    echo \"Caught an exception: \" . $e->getMessage() . \"\\n\";\n}\n```\n\n### Explanation\n\n1. **Application Instance**: We create a `Symfony\\Component\\Console\\Application` instance with the app name and version.\n2. **Command Definition**: We define a `BackupCommand` to handle file backups.\n3. **Running Application**: We try to run the application using `run` method, which catches exceptions thrown by signals.\n\n## Internal Implementation\n\nLet's see what happens step-by-step:\n\n1. **User Starts Application**:\n   - The user runs the backup tool.\n2. **Application Runs Command**:\n   - The app starts performing file backups.\n3. **Signal Received**:\n   - If a signal is received, it throws an exception which we catch and handle.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Application as A\n    participant CommandHandler as CH\n\n    U->>A: Start application\n    A->>CH: Run backup command\n    alt Signal received (Ctrl+C)\n        A-->>CH: Catches exception and handles signal\n    else Backup completed\n        CH-->>A: Reports completion\n    end\n```\n\n### Explanation of Sequence Diagram\n\n- **User Starts Application**: The user initiates the application.\n- **Application Runs Command**: The app starts running the backup command.\n- **Signal Received (Ctrl+C)**: If a signal is received, it catches and handles the exception gracefully.\n- **Backup Completed**: If no signals are caught, the backup process completes.\n\n## Conclusion\n\nIn this chapter, we learned how to handle signals in our console application. We saw how to set up listeners for external events and ensure that our app behaves correctly when receiving these signals. Next, we'll explore more advanced concepts like logging and debugging!\n\nStay tuned for the next chapter: [Logging and Debugging](07_logging_and_debugging_.md)\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: Logger/ConsoleLogger.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Logger;\n\nuse Psr\\Log\\AbstractLogger;\nuse Psr\\Log\\InvalidArgumentException;\nuse Psr\\Log\\LogLevel;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * PSR-3 compliant console logger.\n *\n * @author K\u00e9vin Dunglas <dunglas@gmail.com>\n *\n * @see https://www.php-fig.org/psr/psr-3/\n */\nclass ConsoleLogger extends AbstractLogger\n{\n    public const INFO = 'info';\n    public const ERROR = 'error';\n\n    private array $verbosityLevelMap = [\n        LogLevel::EMERGENCY => OutputInterface::VERBOSITY_NORMAL,\n        LogLevel::ALERT => OutputInterface::VERBOSITY_NORMAL,\n        LogLevel::CRITICAL => OutputInterface::VERBOSITY_NORMAL,\n        LogLevel::ERROR => OutputInterface::VERBOSITY_NORMAL,\n        LogLevel::WARNING => OutputInterface::VERBOSITY_NORMAL,\n        LogLevel::NOTICE => OutputInterface::VERBOSITY_VERBOSE,\n        LogLevel::INFO => OutputInterface::VERBOSITY_VERY_VERBOSE,\n        LogLevel::DEBUG => OutputInterface::VERBOSITY_DEBUG,\n    ];\n    private array $formatLevelMap = [\n        LogLevel::EMERGENCY => self::ERROR,\n        LogLevel::ALERT => self::ERROR,\n        LogLevel::CRITICAL => self::ERROR,\n        LogLevel::ERROR => self::ERROR,\n        LogLevel::WARNING => self::INFO,\n        LogLevel::NOTICE => self::INFO,\n        LogLevel::INFO => self::INFO,\n        LogLevel::DEBUG => self::INFO,\n    ];\n    private bool $errored = false;\n\n    public function __construct(\n        private OutputInterface $output,\n        array $verbosityLevelMap = [],\n        array $formatLevelMap = [],\n    ) {\n        $this->verbosityLevelMap = $verbosityLevelMap + $this->verbosityLevelMap;\n        $this->formatLevelMap = $formatLevelMap + $this->formatLevelMap;\n    }\n\n    public function log($level, $message, array $context = []): void\n    {\n        if (!isset($this->verbosityLevelMap[$level])) {\n            throw new InvalidArgumentException(\\sprintf('The log level \"%s\" does not exist.', $level));\n        }\n\n        $output = $this->output;\n\n        // Write to the error output if necessary and available\n        if (self::ERROR === $this->formatLevelMap[$level]) {\n            if ($this->output instanceof ConsoleOutputInterface) {\n                $output = $output->getErrorOutput();\n            }\n            $this->errored = true;\n        }\n\n        // the if condition check isn't necessary -- it's the same one that $output will do internally anyway.\n        // We only do it for efficiency here as the message formatting is relatively expensive.\n        if ($output->getVerbosity() >= $this->verbosityLevelMap[$level]) {\n            $output->writeln(\\sprintf('<%1$s>[%2$s] %3$s</%1$s>', $this->formatLevelMap[$level], $level, $this->interpolate($message, $context)), $this->verbosityLevelMap[$level]);\n        }\n    }\n\n    /**\n     * Returns true when any messages have been logged at error levels.\n     */\n    public function hasErrored(): bool\n    {\n        return $this->errored;\n    }\n\n    /**\n     * Interpolates context values into the message placeholders.\n     *\n     * @author PHP Framework Interoperability Group\n     */\n    private function interpolate(string $message, array $context): string\n    {\n        if (!str_contains($message, '{')) {\n            return $message;\n        }\n\n        $replacements = [];\n        foreach ($context as $key => $val) {\n            if (null === $val || \\is_scalar($val) || $val instanceof \\Stringable) {\n                $replacements[\"{{$key}}\"] = $val;\n            } elseif ($val instanceof \\DateTimeInterface) {\n                $replacements[\"{{$key}}\"] = $val->format(\\DateTimeInterface::RFC3339);\n            } elseif (\\is_object($val)) {\n                $replacements[\"{{$key}}\"] = '[object '.$val::class.']';\n            } else {\n                $replacements[\"{{$key}}\"] = '['.\\gettype($val).']';\n            }\n        }\n\n        return strtr($message, $replacements);\n    }\n}\n\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 7: Logging and Debugging\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 20 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 7: Logging and Debugging\n\nWelcome back! In our last chapters, we explored how to handle user inputs, validate them, execute commands, and even discover and load different commands. But what happens when something goes wrong in your application? How do you know where the issue is coming from or if everything is working as expected? This is where logging and debugging come into play.\n\nImagine you're building a library management system. You want to make sure that every time a book is added, removed, or updated, there's a record of what happened. Logging helps you track these events so you can understand the flow of your application and debug any issues if they arise.\n\n## What is Logging?\n\nLogging is like keeping a diary for your console app. It records important information about what\u2019s happening inside the application, such as actions performed by users or errors that occur. This information can be very useful when troubleshooting problems.\n\n### Example Scenario: Adding Books\n\nLet's say you have a command to add books in your library management system. You want to log every time someone adds a book so you can keep track of all additions and make sure nothing is missed.\n\n## How to Use Logging\n\nIn our example, we'll use the `ConsoleLogger` class from Symfony Console to handle logging. This class helps us write logs to the console or file in a structured way.\n\n### Example Code\n\nHere\u2019s how we can set up basic logging:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Output\\ConsoleOutput;\nuse Symfony\\Component\\Console\\Logger\\ConsoleLogger;\n\n// Create a logger instance\n$logger = new ConsoleLogger(new ConsoleOutput());\n\n// Log some information\n$logger->info('Adding book: The Great Gatsby');\n```\n\n### Explanation\n\n1. **Creating a Logger**: We create an instance of `ConsoleLogger` which takes care of logging to the console.\n2. **Logging Information**: Using the `info` method, we log a message when adding a book.\n\n## How It Works Internally\n\nLet\u2019s see how the internal implementation works:\n\n### Step-by-Step Walkthrough\n\n1. **User Initiates Command**: The user runs an add-book command.\n2. **Logger Catches Event**: When logging happens (e.g., `info` method is called), the logger formats and outputs the message to the console.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Logger as L\n    participant ConsoleOutput as CO\n\n    U->>L: Log \"Adding book: The Great Gatsby\"\n    L->>CO: Format and output the message\n```\n\n### Explanation of Sequence Diagram\n\n- **User Initiates Command**: The user runs an add-book command.\n- **Logger Catches Event**: When logging happens, the logger formats the message.\n- **Output to Console**: The formatted message is sent to the console.\n\n## Setting Up Error Logging\n\nSometimes, you might want to log errors differently from regular information. For example, if something goes wrong during the book addition process, you may want to highlight it more prominently.\n\n### Example Code for Error Logging\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Output\\ConsoleOutput;\nuse Symfony\\Component\\Console\\Logger\\ConsoleLogger;\n\n// Create a logger instance\n$logger = new ConsoleLogger(new ConsoleOutput());\n\ntry {\n    // Attempt to add a book\n    $bookId = addBook(\"The Great Gatsby\", \"F. Scott Fitzgerald\");\n} catch (\\Exception $e) {\n    // Log the error with a higher severity level\n    $logger->error('Failed to add book: ' . $e->getMessage());\n}\n\nfunction addBook($title, $author) {\n    // Simulated function that might throw an exception\n    if ($title === \"The Great Gatsby\") {\n        throw new \\Exception(\"Title already exists.\");\n    }\n    \n    return 123456;\n}\n```\n\n### Explanation\n\n1. **Creating a Logger**: We create an instance of `ConsoleLogger` with `ConsoleOutput`.\n2. **Error Handling**: Inside the try-catch block, we attempt to add a book and catch any exceptions.\n3. **Logging Error**: If an error occurs, we log it using the `error` method.\n\n## Internal Implementation\n\nNow let's dive deeper into how logging works internally:\n\n### Code Breakdown\n\n1. **Logger Class**: The `ConsoleLogger` class handles the formatting and output of logs.\n2. **Logging Methods**: Methods like `info`, `error`, etc., format and send messages to the console or file.\n\n### Example Code for ConsoleLogger\n\n```php\nclass ConsoleLogger extends AbstractLogger\n{\n    public function log($level, $message, array $context = [])\n    {\n        if ($level === LogLevel::ERROR) {\n            // Log errors with a higher verbosity level\n            $this->output->getErrorOutput()->writeln(\"<error>$message</error>\");\n        } else {\n            // Log other messages at the appropriate verbosity level\n            $this->output->writeln($message);\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Logging Levels**: The `log` method checks the log level and outputs the message to the appropriate output.\n2. **Formatting Messages**: Messages are formatted using placeholders for context values.\n\n## Conclusion\n\nIn this chapter, we learned about logging in our console application. We saw how to set up basic logging and handle error logging to keep track of important events. This helps us debug issues and understand the flow of our application.\n\nNext, we'll explore debugging techniques that complement logging. Debugging allows us to inspect the state of the application at different points to find and fix issues more efficiently.\n\nStay tuned for the next chapter: [Debugging Techniques](07_debugging_techniques_.md)",
    "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `console` about the concept: \"Command Testing\n\". This is Chapter 8.\n\nConcept Details:\n- Name: Command Testing\n\n- Description:\nThis abstraction facilitates testing commands by providing test classes and methods. It\u2019s like having a practice room where developers can test their musical compositions before performing them in public.\n\n\nComplete Tutorial Structure:\n1. [Input Handling and Validation\n](01_input_handling_and_validation_.md)\n2. [Input Definition and Validation\n](02_input_definition_and_validation_.md)\n3. [Event Handling and Dispatching\n](03_event_handling_and_dispatching_.md)\n4. [Command Execution Flow\n](04_command_execution_flow_.md)\n5. [Command Discovery and Loading\n](05_command_discovery_and_loading_.md)\n6. [Signal Handling\n](06_signal_handling_.md)\n7. [Logging and Debugging\n](07_logging_and_debugging_.md)\n8. [Command Testing\n](08_command_testing_.md)\n9. [Output Wrapping\n](09_output_wrapping_.md)\n10. [Output and Formatting\n](10_output_and_formatting_.md)\n\nContext from previous chapters:\n# Chapter 1: Input Handling and Validation\n\nWelcome to our journey into building robust console applications! In the previous chapter, we started exploring how to create commands that can be executed from the command line. However, there's an important aspect we haven't covered yet\u2014ensuring that the input provided by users is valid before proceeding with execution. Think of it like a gatekeeper at an event who checks IDs and only allows entry if they meet specific criteria.\n\n## Why Validation Matters\n\nImagine you're building a console application to manage a library. You have a command to add books, but what happens when someone inputs invalid data? For example, entering a negative number for the book's price or leaving fields blank. Without proper validation, your program might crash or produce incorrect results. This is where input handling and validation come in.\n\n## Key Concepts\n\n### 1. Question Class\nThe `Question` class acts as our gatekeeper. It ensures that user inputs are valid before proceeding with any further actions. Let's break down how it works.\n\n#### Example Scenario: Adding a Book\nSuppose we want to add a new book to the library using a command-line interface. We need to ask for the book's title, author, and price. If any of these fields are invalid (e.g., an empty string or a negative number), our program should not proceed.\n\n### 2. Setting Up Questions\nIn the `Question` class, we can set up questions with default values and validators. For instance, when asking for the book's title, if no value is provided by the user, it defaults to \"Unknown\". If the price is inputted incorrectly (e.g., a negative number), the program will throw an error.\n\n### 3. Using Choice Questions\nSometimes, users might need to make choices from predefined options. For example, we could ask them to select if the book is fiction or non-fiction. The `ChoiceQuestion` class ensures that only valid choices are accepted.\n\n## How to Use It\n\nLet's see how we can use these classes in a practical scenario:\n\n### Example Code\nHere\u2019s a simple example of setting up questions and handling user input using the `Question` and `ChoiceQuestion` classes.\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create a confirmation question to ask if the book should be added.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question for the genre of the book.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask the user questions and handle their responses.\n$helperSet = \\Symfony\\Component\\Console\\Helper\\HelperSet::create();\n$io = $helperSet->get('io');\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Step-by-Step Explanation\n1. **Create Confirmation Question**: We ask the user if they want to add a book.\n2. **Create Choice Question**: We give the user options for the genre of the book.\n3. **Ask Questions and Handle Responses**: The program waits for user input, validates it using built-in validators, and handles any errors.\n\n### Internal Walkthrough\nWhen you run this code:\n- First, you\u2019ll be prompted with a confirmation question: `Do you want to add this book? (yes/no): yes`\n- Then, another prompt will appear asking about the genre: `What is the genre of the book? [fiction, non-fiction]: fiction`\n\nIf any input is invalid, an error message will be displayed.\n\n### Mermaid Diagram\nHere\u2019s a simple sequence diagram illustrating the flow:\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## Conclusion\nIn this chapter, we learned how to handle user inputs using the `Question` class. We saw how to create questions with validation and choices, ensuring that our application handles invalid data gracefully. Next, we\u2019ll dive deeper into the internal implementation of these classes.\n\nStay tuned for the next chapter where we will explore more about event handling and dispatching! [Next Chapter: Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 2: Input Definition and Validation\n\nWelcome back! In our last chapter, we explored how to handle user inputs in our console applications. Now, let's take it one step further by defining the rules for those inputs\u2014essentially creating a set of guidelines that ensure users provide valid data.\n\n## Why Do We Need This?\n\nImagine you're building an application where users can add books to a library. You want them to be able to enter details like the book's title, author, and price. However, what if someone types in a negative price or forgets to fill out required fields? To avoid such issues, we need to define these rules and check that users follow them.\n\n## Key Concepts\n\n### 1. Setting Up Questions\nThink of questions as the gatekeepers at an event. They ensure only valid entries get through. In our library app scenario, we'll set up a series of questions for users to answer when adding a book.\n\n```php\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create confirmation and choice questions.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask users questions and handle their responses.\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### 2. Using the Question Class\nThe `Question` class is like a form where you can ask for specific pieces of information. You can create questions that require yes/no answers or multiple-choice options.\n\n- **ConfirmationQuestion**: Asks a user to confirm something.\n- **ChoiceQuestion**: Provides users with a list of choices from which they must select one.\n\n### Example Walkthrough\nLet's walk through an example where we use these classes:\n\n1. We ask the user if they want to add a book. If they say \"yes,\" we proceed; otherwise, nothing happens.\n2. Next, we ask them to choose the genre of the book from two options: fiction or non-fiction.\n\nIf any input is invalid (e.g., an empty response), the program will display an error message and not proceed with adding the book.\n\n## Sequence Diagram\nHere\u2019s a simple sequence diagram illustrating how these questions work:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## How It Works Internally\nNow, let's peek under the hood. The `Question` class handles user inputs by validating them based on predefined rules.\n\n1. **Create Questions**: Define what kind of question it is (confirmation or choice).\n2. **Ask for Input**: Display the question to the user.\n3. **Validate Response**: Check if the response meets the expected criteria.\n4. **Handle Errors**: If the input isn't valid, display an error message and ask again.\n\n## Internal Implementation\nLet's look at how this works with some simple code snippets:\n\n### Example Code\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion;\n\n// Create a confirmation question.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask users questions and handle their responses.\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Explanation\n1. **Creating Questions**: We define the type of question we want to ask (confirmation or choice) and provide default values if needed.\n2. **Asking for Input**: The `ask` method displays the question to the user and waits for their response.\n3. **Validating Response**: If the input is invalid, an error message is displayed.\n\n## Conclusion\nIn this chapter, we learned how to use the `Question` class to define rules for user inputs in our console applications. We saw how to create confirmation questions and choice questions, ensuring that users provide valid data before proceeding with further actions. Next, we\u2019ll dive into event handling and dispatching!\n\nStay tuned for the next chapter: [Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 3: Event Handling and Dispatching\n\nWelcome back! In our last chapters, we learned about handling user inputs in our console applications and setting up validation rules to ensure those inputs are correct. Now, let's dive into how events work in these systems, much like traffic lights control the flow of vehicles on a road.\n\n## Why Do We Need Event Handling?\n\nImagine you're building an application where users can add books to a library. When someone adds a book, various things might happen\u2014like updating the database, sending a notification, or logging the action. How do we make sure all these actions are handled correctly and efficiently? That's where event handling comes in.\n\n## Key Concepts\n\n### 1. What is an Event?\nAn event is like a signal that tells our application something important has happened. For example, when a user adds a book, it triggers the \"book added\" event.\n\n### 2. Event Handling\nEvent handling means catching these signals and responding to them. Our application can listen for specific events and then perform actions based on those events.\n\n## Example Scenario: Adding a Book\n\nLet's use our library example again. When a user wants to add a book, here are the steps we might want to follow:\n\n1. Validate the input (like checking if the price is positive).\n2. Log the action in a database.\n3. Send a notification to other parts of the system.\n\nWe can set up events for each of these actions and ensure they all work smoothly together.\n\n## How It Works\n\nImagine we have an event like \"BookAddedEvent\". When this event happens, our application will take note and perform the necessary actions.\n\n### 1. Defining Events\nFirst, we define what kind of events we want to handle. For example:\n\n```php\n// In BookAddedEvent.php\nclass BookAddedEvent {\n    private $bookId;\n\n    public function __construct($bookId) {\n        $this->bookId = $bookId;\n    }\n\n    public function getBookId() {\n        return $this->bookId;\n    }\n}\n```\n\n### 2. Dispatching Events\nWhen a book is added, we dispatch (or trigger) the event:\n\n```php\n// In AddBookCommand.php\npublic function execute(InputInterface $input, OutputInterface $output) {\n    // Validate and add the book to the database.\n    \n    $bookId = $this->database->addBook($title, $author, $price);\n    \n    // Dispatch the event\n    $eventDispatcher->dispatch(new BookAddedEvent($bookId));\n}\n```\n\n### 3. Handling Events\nOther parts of our application can listen for this event and perform actions:\n\n```php\n// In DatabaseLogger.php\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass DatabaseLogger implements EventSubscriberInterface {\n    public static function getSubscribedEvents() {\n        return [\n            BookAddedEvent::class => 'logBookAddition',\n        ];\n    }\n\n    public function logBookAddition(BookAddedEvent $event) {\n        $bookId = $event->getBookId();\n        // Log the book addition in a database\n        echo \"Logging that book with ID $bookId was added.\\n\";\n    }\n}\n```\n\n### 4. Example Walkthrough\n\nLet's walk through an example sequence diagram to see how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandHandler as CH\n    participant DatabaseLogger as DL\n    participant BookAddedEvent as E\n\n    U->>CH: Add book \"The Great Gatsby\"\n    CH->>DatabaseLogger: Dispatch BookAddedEvent\n    DL->>DB: Log the addition of the book with ID 123456\n```\n\n## Internal Implementation\n\nNow, let's look at what happens step-by-step:\n\n1. **User Inputs a Command**: The user adds a book.\n2. **Command Handler Validates and Adds the Book**: It checks if all inputs are valid and adds the book to the database.\n3. **Dispatch Event**: The `BookAddedEvent` is dispatched with the book's ID.\n4. **Event Listeners Handle the Event**: The `DatabaseLogger` listens for this event and logs the addition in a database.\n\n## Conclusion\n\nIn this chapter, we learned about event handling and dispatching. We saw how events help coordinate different parts of an application to ensure everything works smoothly together. Next, we'll explore more advanced concepts like command execution flow, which will take us one step further in building robust applications.\n\nStay tuned for the next chapter: [Command Execution Flow](04_command_execution_flow_.md)\n---\n# Chapter 4: Command Execution Flow\n\nWelcome back! In our previous chapters, we explored how to handle user inputs and define validation rules in our console applications. Now, let's dive into the concept of command execution flow. This is like choreographing a dance where each step (command) has its role.\n\n## Motivation\n\nImagine you're building an application that allows users to manage a library. Users can add books, remove books, and list all available books. Each action is a command in our console app. To ensure these commands work smoothly, we need a structured way to handle their execution. This is where the concept of \"Command Execution Flow\" comes in.\n\n## Key Concepts\n\n### What is Command Execution Flow?\n\nThink of it like organizing a school play. You have actors (commands) who each have specific roles and follow a script (execution flow). Just as a director ensures everything runs smoothly, we need to structure our commands so they execute correctly.\n\n### How Does It Work?\n\nLet's use the library example again. When a user wants to add a book, here are the steps:\n\n1. **Validate Input**: Ensure the user inputs valid data.\n2. **Execute Command**: Add the book to the database.\n3. **Notify Other Systems**: Send a notification if needed.\n\nWe'll set up events for each of these actions and make sure they work together seamlessly.\n\n## How to Use It\n\n### Example Scenario: Adding a Book\n\nLet's walk through adding a book step-by-step:\n\n1. **User Input**: The user provides the title, author, and price.\n2. **Validation**: We check if all inputs are valid (e.g., non-negative prices).\n3. **Add to Database**: If validation passes, we add the book to our database.\n4. **Log Action**: Log this action in a database for tracking.\n\n### Example Code\n\nHere\u2019s how we can set up these steps using Symfony Console:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Define the add book command\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Validation: Check if all inputs are valid\n        $title = $input->getArgument('title');\n        $author = $input->getArgument('author');\n        $price = (float)$input->getArgument('price');\n\n        if ($price < 0) {\n            throw new \\Exception(\"Price cannot be negative.\");\n        }\n\n        // Add the book to the database\n        $database = new Database();\n        $bookId = $database->addBook($title, $author, $price);\n\n        // Log action in a database\n        logAction('Add Book', 'Library App', $bookId);\n\n        return 0;\n    }\n}\n\n// Add the command to the application\n$application->add(new AddBookCommand());\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n1. **Application**: We create an `Application` instance with a name and version.\n2. **Add Book Command**: We define a new `Command` class that handles adding books.\n3. **Validation**: Inside the command, we check if the price is valid.\n4. **Database Interaction**: If validation passes, we add the book to our database.\n5. **Logging**: We log the action in a database for tracking.\n\n## Internal Implementation\n\nNow, let's see what happens step-by-step when this command executes:\n\n1. **User Inputs**:\n   - The user provides `title`, `author`, and `price`.\n2. **Validation**:\n   - The command checks if the price is valid.\n3. **Execute Command**:\n   - If validation passes, it adds the book to the database.\n4. **Log Action**:\n   - It logs the action in a database.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandHandler as CH\n    participant Database as DB\n    participant Logger as L\n\n    U->>CH: Add Book \"The Great Gatsby\"\n    CH-->>DB: Validate and add to database\n    CH-->>L: Log action in the database\n```\n\n### Internal Code Walkthrough\n\nLet's dive deeper into the internal code:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\n\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Validation: Check if all inputs are valid\n        $title = $input->getArgument('title');\n        $author = $input->getArgument('author');\n        $price = (float)$input->getArgument('price');\n\n        if ($price < 0) {\n            throw new \\Exception(\"Price cannot be negative.\");\n        }\n\n        // Add the book to the database\n        $database = new Database();\n        $bookId = $database->addBook($title, $author, $price);\n\n        // Log action in a database\n        logAction('Add Book', 'Library App', $bookId);\n\n        return 0;\n    }\n}\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Add the command to the application\n$application->add(new AddBookCommand());\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n- **Command Definition**: We define a command class with validation and database interaction.\n- **Validation**: Ensure inputs are valid before proceeding.\n- **Database Interaction**: Add the book to our database if validation passes.\n- **Logging**: Log the action for tracking.\n\n## Conclusion\n\nIn this chapter, we learned about command execution flow by creating a structured way to handle user commands in our console application. We saw how to validate inputs, execute commands, and notify other systems. Next, we'll explore more advanced concepts like event handling and dispatching!\n\nStay tuned for the next chapter: [Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 5: Command Discovery and Loading\n\n## Motivation\n\nIn our previous chapters, we learned how to handle user inputs, validate them, and execute commands. But what if you want to add more commands or change existing ones easily? How do you make sure your application knows about all the available commands without needing to hard-code them everywhere?\n\nImagine you're organizing a book fair. You have different roles like registering authors, adding books, and listing available books. Each role is a command in our console app. To manage these efficiently, we need an easy way to discover and load these commands.\n\n## Key Concepts\n\n### 1. Command Discovery\nCommand discovery is like a librarian organizing books on shelves. It ensures all your book-related commands are neatly arranged so users can easily find them.\n\n### 2. Command Loading\nLoading commands means making sure the application knows about these commands when it starts up, similar to how you might check a catalog before setting up an event.\n\n## How to Use This Abstraction\n\nLet's see how we can use command discovery and loading in our library app:\n\n1. **Define Commands**: We create different commands for adding books, removing books, and listing all books.\n2. **Discover and Load Commands**: We make sure the application knows about these commands so it can handle them.\n\n## Example Scenario: Adding Book Command\n\nLet's define a simple command to add a book:\n\n```php\n// In AddBookCommand.php\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Implementation details here\n    }\n}\n```\n\n### Explanation\n\n- **Command Definition**: We create an `AddBookCommand` class that extends from Symfony's `Command`.\n- **Configuration**: The `configure` method sets the name and description of the command.\n- **Execution**: In the `execute` method, we can add logic to handle adding a book.\n\n## Example Code\n\nNow, let's see how we can discover and load these commands:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\CommandLoader\\ContainerCommandLoader;\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Define the command map with command names as keys and service ids as values\n$commandMap = [\n    'add-book' => AddBookCommand::class,\n];\n\n// Load commands using ContainerCommandLoader\n$loader = new ContainerCommandLoader($application->getContainer(), $commandMap);\n$application->setCommandLoader($loader);\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n- **Application Instance**: We create an `Application` instance with a name and version.\n- **Command Map**: We define a map that links command names to their respective classes.\n- **Loading Commands**: Using `ContainerCommandLoader`, we load the commands from our application container.\n\n## Internal Implementation\n\nLet's see how the internal implementation works:\n\n1. **User Starts Application**:\n   - The user starts the application and calls the `run` method.\n2. **Application Loads Commands**:\n   - The application uses the command loader to discover and load all available commands based on our defined map.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandLoader as CL\n    participant Application as A\n    participant AddBookCommand as AB\n\n    U->>A: Start application\n    A->>CL: Load commands from command map\n    CL->>AB: Discover and load add-book command\n```\n\n### Explanation of Sequence Diagram\n\n- **User Starts Application**: The user initiates the application.\n- **Application Loads Commands**: The application uses `ContainerCommandLoader` to discover and load all available commands.\n- **Discover and Load Command**: The loader finds the `AddBookCommand` class and loads it.\n\n## Conclusion\n\nIn this chapter, we learned about command discovery and loading. We saw how to define commands and ensure our application knows about them when it starts up. Next, we\u2019ll explore more advanced concepts like signal handling!\n\nStay tuned for the next chapter: [Signal Handling](06_signal_handling_.md)\n---\n# Chapter 6: Signal Handling\n\n## Motivation\n\nIn our previous chapters, we learned how to handle user inputs and validate them before processing commands. However, sometimes the application might need to react to external events or signals that come from outside. Think of it like a traffic light system where different lights (signals) trigger actions in the console app.\n\nImagine you're building an application that runs on a server. Sometimes, this server needs to stop running the application due to certain conditions\u2014like when the server is shut down or receives a specific command. In these situations, we need to catch and handle such signals.\n\n## Key Concepts\n\n### 1. What is a Signal?\nA signal is like an emergency bell that rings in your console app. It's a notification from outside (e.g., operating system) that something important has happened.\n\n### 2. Handling Signals\nHandling signals means setting up listeners to catch these bells and take appropriate actions, just as you would listen for fire alarms and evacuate the building accordingly.\n\n## How to Use Signal Handling\n\nLet's use an example: You're developing a backup tool that should run every night. However, if someone sends a shutdown signal (like pressing `Ctrl+C`), your application needs to stop running gracefully instead of crashing.\n\n### Example Scenario: Backup Tool\n\n1. **User Starts Application**: The user runs the backup tool.\n2. **Backup in Progress**: The app starts backing up files.\n3. **Signal Received**: If someone sends a shutdown signal, the app stops and exits cleanly.\n\n## Code to Handle Signals\n\nHere's how we can handle signals in our application:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\nuse Symfony\\Component\\Console\\Output\\NullOutput;\n\n// Create an Application instance\n$application = new Application('Backup Tool', '1.0');\n\n// Define the command to run backups\nclass BackupCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('backup')\n            ->setDescription('Run a backup of the files');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Perform file backup logic here\n        echo \"Starting backup...\\n\";\n        sleep(5);  // Simulate backup process\n        echo \"Backup completed!\\n\";\n    }\n}\n\n// Add the command to the application\n$application->add(new BackupCommand());\n\n// Run the application\ntry {\n    $exitCode = $application->run(new ArrayInput([]), new NullOutput());\n} catch (\\Exception $e) {\n    // Handle signals by catching exceptions\n    echo \"Caught an exception: \" . $e->getMessage() . \"\\n\";\n}\n```\n\n### Explanation\n\n1. **Application Instance**: We create a `Symfony\\Component\\Console\\Application` instance with the app name and version.\n2. **Command Definition**: We define a `BackupCommand` to handle file backups.\n3. **Running Application**: We try to run the application using `run` method, which catches exceptions thrown by signals.\n\n## Internal Implementation\n\nLet's see what happens step-by-step:\n\n1. **User Starts Application**:\n   - The user runs the backup tool.\n2. **Application Runs Command**:\n   - The app starts performing file backups.\n3. **Signal Received**:\n   - If a signal is received, it throws an exception which we catch and handle.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Application as A\n    participant CommandHandler as CH\n\n    U->>A: Start application\n    A->>CH: Run backup command\n    alt Signal received (Ctrl+C)\n        A-->>CH: Catches exception and handles signal\n    else Backup completed\n        CH-->>A: Reports completion\n    end\n```\n\n### Explanation of Sequence Diagram\n\n- **User Starts Application**: The user initiates the application.\n- **Application Runs Command**: The app starts running the backup command.\n- **Signal Received (Ctrl+C)**: If a signal is received, it catches and handles the exception gracefully.\n- **Backup Completed**: If no signals are caught, the backup process completes.\n\n## Conclusion\n\nIn this chapter, we learned how to handle signals in our console application. We saw how to set up listeners for external events and ensure that our app behaves correctly when receiving these signals. Next, we'll explore more advanced concepts like logging and debugging!\n\nStay tuned for the next chapter: [Logging and Debugging](07_logging_and_debugging_.md)\n---\n# Chapter 7: Logging and Debugging\n\nWelcome back! In our last chapters, we explored how to handle user inputs, validate them, execute commands, and even discover and load different commands. But what happens when something goes wrong in your application? How do you know where the issue is coming from or if everything is working as expected? This is where logging and debugging come into play.\n\nImagine you're building a library management system. You want to make sure that every time a book is added, removed, or updated, there's a record of what happened. Logging helps you track these events so you can understand the flow of your application and debug any issues if they arise.\n\n## What is Logging?\n\nLogging is like keeping a diary for your console app. It records important information about what\u2019s happening inside the application, such as actions performed by users or errors that occur. This information can be very useful when troubleshooting problems.\n\n### Example Scenario: Adding Books\n\nLet's say you have a command to add books in your library management system. You want to log every time someone adds a book so you can keep track of all additions and make sure nothing is missed.\n\n## How to Use Logging\n\nIn our example, we'll use the `ConsoleLogger` class from Symfony Console to handle logging. This class helps us write logs to the console or file in a structured way.\n\n### Example Code\n\nHere\u2019s how we can set up basic logging:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Output\\ConsoleOutput;\nuse Symfony\\Component\\Console\\Logger\\ConsoleLogger;\n\n// Create a logger instance\n$logger = new ConsoleLogger(new ConsoleOutput());\n\n// Log some information\n$logger->info('Adding book: The Great Gatsby');\n```\n\n### Explanation\n\n1. **Creating a Logger**: We create an instance of `ConsoleLogger` which takes care of logging to the console.\n2. **Logging Information**: Using the `info` method, we log a message when adding a book.\n\n## How It Works Internally\n\nLet\u2019s see how the internal implementation works:\n\n### Step-by-Step Walkthrough\n\n1. **User Initiates Command**: The user runs an add-book command.\n2. **Logger Catches Event**: When logging happens (e.g., `info` method is called), the logger formats and outputs the message to the console.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Logger as L\n    participant ConsoleOutput as CO\n\n    U->>L: Log \"Adding book: The Great Gatsby\"\n    L->>CO: Format and output the message\n```\n\n### Explanation of Sequence Diagram\n\n- **User Initiates Command**: The user runs an add-book command.\n- **Logger Catches Event**: When logging happens, the logger formats the message.\n- **Output to Console**: The formatted message is sent to the console.\n\n## Setting Up Error Logging\n\nSometimes, you might want to log errors differently from regular information. For example, if something goes wrong during the book addition process, you may want to highlight it more prominently.\n\n### Example Code for Error Logging\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Output\\ConsoleOutput;\nuse Symfony\\Component\\Console\\Logger\\ConsoleLogger;\n\n// Create a logger instance\n$logger = new ConsoleLogger(new ConsoleOutput());\n\ntry {\n    // Attempt to add a book\n    $bookId = addBook(\"The Great Gatsby\", \"F. Scott Fitzgerald\");\n} catch (\\Exception $e) {\n    // Log the error with a higher severity level\n    $logger->error('Failed to add book: ' . $e->getMessage());\n}\n\nfunction addBook($title, $author) {\n    // Simulated function that might throw an exception\n    if ($title === \"The Great Gatsby\") {\n        throw new \\Exception(\"Title already exists.\");\n    }\n    \n    return 123456;\n}\n```\n\n### Explanation\n\n1. **Creating a Logger**: We create an instance of `ConsoleLogger` with `ConsoleOutput`.\n2. **Error Handling**: Inside the try-catch block, we attempt to add a book and catch any exceptions.\n3. **Logging Error**: If an error occurs, we log it using the `error` method.\n\n## Internal Implementation\n\nNow let's dive deeper into how logging works internally:\n\n### Code Breakdown\n\n1. **Logger Class**: The `ConsoleLogger` class handles the formatting and output of logs.\n2. **Logging Methods**: Methods like `info`, `error`, etc., format and send messages to the console or file.\n\n### Example Code for ConsoleLogger\n\n```php\nclass ConsoleLogger extends AbstractLogger\n{\n    public function log($level, $message, array $context = [])\n    {\n        if ($level === LogLevel::ERROR) {\n            // Log errors with a higher verbosity level\n            $this->output->getErrorOutput()->writeln(\"<error>$message</error>\");\n        } else {\n            // Log other messages at the appropriate verbosity level\n            $this->output->writeln($message);\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Logging Levels**: The `log` method checks the log level and outputs the message to the appropriate output.\n2. **Formatting Messages**: Messages are formatted using placeholders for context values.\n\n## Conclusion\n\nIn this chapter, we learned about logging in our console application. We saw how to set up basic logging and handle error logging to keep track of important events. This helps us debug issues and understand the flow of our application.\n\nNext, we'll explore debugging techniques that complement logging. Debugging allows us to inspect the state of the application at different points to find and fix issues more efficiently.\n\nStay tuned for the next chapter: [Debugging Techniques](07_debugging_techniques_.md)\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: Tester/ApplicationTester.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Tester;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\n\n/**\n * Eases the testing of console applications.\n *\n * When testing an application, don't forget to disable the auto exit flag:\n *\n *     $application = new Application();\n *     $application->setAutoExit(false);\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass ApplicationTester\n{\n    use TesterTrait;\n\n    public function __construct(\n        private Application $application,\n    ) {\n    }\n\n    /**\n     * Executes the application.\n     *\n     * Available options:\n     *\n     *  * interactive:               Sets the input interactive flag\n     *  * decorated:                 Sets the output decorated flag\n     *  * verbosity:                 Sets the output verbosity flag\n     *  * capture_stderr_separately: Make output of stdOut and stdErr separately available\n     *\n     * @return int The command exit code\n     */\n    public function run(array $input, array $options = []): int\n    {\n        $prevShellVerbosity = getenv('SHELL_VERBOSITY');\n\n        try {\n            $this->input = new ArrayInput($input);\n            if (isset($options['interactive'])) {\n                $this->input->setInteractive($options['interactive']);\n            }\n\n            if ($this->inputs) {\n                $this->input->setStream(self::createStream($this->inputs));\n            }\n\n            $this->initOutput($options);\n\n            return $this->statusCode = $this->application->run($this->input, $this->output);\n        } finally {\n            // SHELL_VERBOSITY is set by Application::configureIO so we need to unset/reset it\n            // to its previous value to avoid one test's verbosity to spread to the following tests\n            if (false === $prevShellVerbosity) {\n                if (\\function_exists('putenv')) {\n                    @putenv('SHELL_VERBOSITY');\n                }\n                unset($_ENV['SHELL_VERBOSITY']);\n                unset($_SERVER['SHELL_VERBOSITY']);\n            } else {\n                if (\\function_exists('putenv')) {\n                    @putenv('SHELL_VERBOSITY='.$prevShellVerbosity);\n                }\n                $_ENV['SHELL_VERBOSITY'] = $prevShellVerbosity;\n                $_SERVER['SHELL_VERBOSITY'] = $prevShellVerbosity;\n            }\n        }\n    }\n}\n\n\n--- File: Tester/CommandCompletionTester.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Tester;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Completion\\CompletionInput;\nuse Symfony\\Component\\Console\\Completion\\CompletionSuggestions;\n\n/**\n * Eases the testing of command completion.\n *\n * @author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>\n */\nclass CommandCompletionTester\n{\n    public function __construct(\n        private Command $command,\n    ) {\n    }\n\n    /**\n     * Create completion suggestions from input tokens.\n     */\n    public function complete(array $input): array\n    {\n        $currentIndex = \\count($input);\n        if ('' === end($input)) {\n            array_pop($input);\n        }\n        array_unshift($input, $this->command->getName());\n\n        $completionInput = CompletionInput::fromTokens($input, $currentIndex);\n        $completionInput->bind($this->command->getDefinition());\n        $suggestions = new CompletionSuggestions();\n\n        $this->command->complete($completionInput, $suggestions);\n\n        $options = [];\n        foreach ($suggestions->getOptionSuggestions() as $option) {\n            $options[] = '--'.$option->getName();\n        }\n\n        return array_map('strval', array_merge($options, $suggestions->getValueSuggestions()));\n    }\n}\n\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 8: Command Testing\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 20 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 8: Command Testing\n\n## Transition from Previous Chapter\n\nIn our last chapter, we explored logging and debugging techniques to keep track of what's happening inside our console application. Now, let's move on to another crucial aspect\u2014testing commands. This is like practicing a musical piece before performing it in front of an audience.\n\n## Motivation\n\nImagine you're building a library management system where users can add, remove, or search for books. Before releasing this system, you want to make sure that each command works perfectly without any issues. How do you ensure everything runs smoothly? This is where **command testing** comes into play.\n\nCommand testing allows you to write tests for your commands so that you can validate their behavior and ensure they work as expected before deploying them in a production environment. Just like practicing a piece of music multiple times, command testing helps you fine-tune each part until it sounds perfect.\n\n## Key Concepts\n\n### 1. What is Command Testing?\n\nCommand testing is about creating test cases for your console commands to verify that they behave correctly. It's like setting up a practice room where developers can test their musical compositions before performing them in public.\n\n### Example Scenario: Adding a Book\n\nLet's say we have an `add-book` command. We want to ensure it works correctly by testing various scenarios:\n- Adding a book with valid data.\n- Handling invalid inputs (e.g., negative price or empty title).\n- Checking if the book is added successfully.\n\n## How to Use Command Testing\n\n### Setting Up Test Cases\n\nTo start, we'll use a test case class provided by Symfony Console. This class helps us write tests for our commands easily.\n\n#### Example Code\nHere\u2019s how you can set up a basic command test:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Tester\\CommandTester;\nuse Symfony\\Component\\Console\\Application;\n\n// Create an Application instance with your commands loaded.\n$application = new Application();\n$command = $application->find('add-book');\n\n// Create a CommandTester to run the command in a test environment.\n$commandTester = new CommandTester($command);\n\n// Run the command and capture its output.\n$commandTester->execute([\n    'title' => 'The Great Gatsby',\n    'author' => 'F. Scott Fitzgerald',\n    'price' => 10,\n]);\n\n// Check if the book was added successfully.\n$output = $commandTester->getDisplay();\nif (strpos($output, \"Book added successfully\") !== false) {\n    echo \"Test passed: Book added successfully.\\n\";\n} else {\n    echo \"Test failed: Book addition did not work as expected.\\n\";\n}\n```\n\n### Explanation\n\n1. **Create Application Instance**: We create an `Application` instance and load our commands.\n2. **Find Command**: Using the `find` method, we locate the `add-book` command.\n3. **Command Tester**: We use a `CommandTester` to run the command in a test environment.\n4. **Execute Command**: We pass arguments to the command and capture its output.\n5. **Check Output**: We verify if the book was added successfully by checking the output.\n\n## Internal Implementation\n\nLet's see what happens step-by-step when we run this code:\n\n1. **User Starts Application**: The user runs the test script.\n2. **Application Runs Command**: The `CommandTester` runs the command with provided arguments.\n3. **Capture Output**: It captures the console output to check if the book was added successfully.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Application as A\n    participant CommandTester as CT\n    participant ConsoleOutput as CO\n\n    U->>A: Run add-book command tester\n    A->>CT: Execute add-book with arguments\n    CT->>CO: Capture console output\n    CT-->>U: Display output and verify result\n```\n\n### Explanation of Sequence Diagram\n\n- **User Starts Application**: The user runs the test script.\n- **Application Runs Command Tester**: The `CommandTester` executes the command with specified arguments.\n- **Capture Console Output**: It captures the console output to check the result.\n- **Display Result**: Finally, it displays the output and verifies if the book was added successfully.\n\n## Conclusion\n\nIn this chapter, we learned about command testing in our console application. We saw how to set up test cases for commands to ensure they work as expected. This helps us catch any issues early on before deploying them in a production environment.\n\nNext, we'll explore more advanced concepts like output wrapping and formatting! [Next Chapter: Output Wrapping](09_output_wrapping_.md)",
    "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `console` about the concept: \"Output Wrapping\n\". This is Chapter 9.\n\nConcept Details:\n- Name: Output Wrapping\n\n- Description:\nThis abstraction handles the wrapping of text to ensure it fits within terminal width, similar to how a tailor measures and adjusts clothing for different body types. It ensures that output is neatly formatted.\n\n\nComplete Tutorial Structure:\n1. [Input Handling and Validation\n](01_input_handling_and_validation_.md)\n2. [Input Definition and Validation\n](02_input_definition_and_validation_.md)\n3. [Event Handling and Dispatching\n](03_event_handling_and_dispatching_.md)\n4. [Command Execution Flow\n](04_command_execution_flow_.md)\n5. [Command Discovery and Loading\n](05_command_discovery_and_loading_.md)\n6. [Signal Handling\n](06_signal_handling_.md)\n7. [Logging and Debugging\n](07_logging_and_debugging_.md)\n8. [Command Testing\n](08_command_testing_.md)\n9. [Output Wrapping\n](09_output_wrapping_.md)\n10. [Output and Formatting\n](10_output_and_formatting_.md)\n\nContext from previous chapters:\n# Chapter 1: Input Handling and Validation\n\nWelcome to our journey into building robust console applications! In the previous chapter, we started exploring how to create commands that can be executed from the command line. However, there's an important aspect we haven't covered yet\u2014ensuring that the input provided by users is valid before proceeding with execution. Think of it like a gatekeeper at an event who checks IDs and only allows entry if they meet specific criteria.\n\n## Why Validation Matters\n\nImagine you're building a console application to manage a library. You have a command to add books, but what happens when someone inputs invalid data? For example, entering a negative number for the book's price or leaving fields blank. Without proper validation, your program might crash or produce incorrect results. This is where input handling and validation come in.\n\n## Key Concepts\n\n### 1. Question Class\nThe `Question` class acts as our gatekeeper. It ensures that user inputs are valid before proceeding with any further actions. Let's break down how it works.\n\n#### Example Scenario: Adding a Book\nSuppose we want to add a new book to the library using a command-line interface. We need to ask for the book's title, author, and price. If any of these fields are invalid (e.g., an empty string or a negative number), our program should not proceed.\n\n### 2. Setting Up Questions\nIn the `Question` class, we can set up questions with default values and validators. For instance, when asking for the book's title, if no value is provided by the user, it defaults to \"Unknown\". If the price is inputted incorrectly (e.g., a negative number), the program will throw an error.\n\n### 3. Using Choice Questions\nSometimes, users might need to make choices from predefined options. For example, we could ask them to select if the book is fiction or non-fiction. The `ChoiceQuestion` class ensures that only valid choices are accepted.\n\n## How to Use It\n\nLet's see how we can use these classes in a practical scenario:\n\n### Example Code\nHere\u2019s a simple example of setting up questions and handling user input using the `Question` and `ChoiceQuestion` classes.\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create a confirmation question to ask if the book should be added.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question for the genre of the book.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask the user questions and handle their responses.\n$helperSet = \\Symfony\\Component\\Console\\Helper\\HelperSet::create();\n$io = $helperSet->get('io');\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Step-by-Step Explanation\n1. **Create Confirmation Question**: We ask the user if they want to add a book.\n2. **Create Choice Question**: We give the user options for the genre of the book.\n3. **Ask Questions and Handle Responses**: The program waits for user input, validates it using built-in validators, and handles any errors.\n\n### Internal Walkthrough\nWhen you run this code:\n- First, you\u2019ll be prompted with a confirmation question: `Do you want to add this book? (yes/no): yes`\n- Then, another prompt will appear asking about the genre: `What is the genre of the book? [fiction, non-fiction]: fiction`\n\nIf any input is invalid, an error message will be displayed.\n\n### Mermaid Diagram\nHere\u2019s a simple sequence diagram illustrating the flow:\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## Conclusion\nIn this chapter, we learned how to handle user inputs using the `Question` class. We saw how to create questions with validation and choices, ensuring that our application handles invalid data gracefully. Next, we\u2019ll dive deeper into the internal implementation of these classes.\n\nStay tuned for the next chapter where we will explore more about event handling and dispatching! [Next Chapter: Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 2: Input Definition and Validation\n\nWelcome back! In our last chapter, we explored how to handle user inputs in our console applications. Now, let's take it one step further by defining the rules for those inputs\u2014essentially creating a set of guidelines that ensure users provide valid data.\n\n## Why Do We Need This?\n\nImagine you're building an application where users can add books to a library. You want them to be able to enter details like the book's title, author, and price. However, what if someone types in a negative price or forgets to fill out required fields? To avoid such issues, we need to define these rules and check that users follow them.\n\n## Key Concepts\n\n### 1. Setting Up Questions\nThink of questions as the gatekeepers at an event. They ensure only valid entries get through. In our library app scenario, we'll set up a series of questions for users to answer when adding a book.\n\n```php\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create confirmation and choice questions.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask users questions and handle their responses.\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### 2. Using the Question Class\nThe `Question` class is like a form where you can ask for specific pieces of information. You can create questions that require yes/no answers or multiple-choice options.\n\n- **ConfirmationQuestion**: Asks a user to confirm something.\n- **ChoiceQuestion**: Provides users with a list of choices from which they must select one.\n\n### Example Walkthrough\nLet's walk through an example where we use these classes:\n\n1. We ask the user if they want to add a book. If they say \"yes,\" we proceed; otherwise, nothing happens.\n2. Next, we ask them to choose the genre of the book from two options: fiction or non-fiction.\n\nIf any input is invalid (e.g., an empty response), the program will display an error message and not proceed with adding the book.\n\n## Sequence Diagram\nHere\u2019s a simple sequence diagram illustrating how these questions work:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## How It Works Internally\nNow, let's peek under the hood. The `Question` class handles user inputs by validating them based on predefined rules.\n\n1. **Create Questions**: Define what kind of question it is (confirmation or choice).\n2. **Ask for Input**: Display the question to the user.\n3. **Validate Response**: Check if the response meets the expected criteria.\n4. **Handle Errors**: If the input isn't valid, display an error message and ask again.\n\n## Internal Implementation\nLet's look at how this works with some simple code snippets:\n\n### Example Code\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion;\n\n// Create a confirmation question.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask users questions and handle their responses.\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Explanation\n1. **Creating Questions**: We define the type of question we want to ask (confirmation or choice) and provide default values if needed.\n2. **Asking for Input**: The `ask` method displays the question to the user and waits for their response.\n3. **Validating Response**: If the input is invalid, an error message is displayed.\n\n## Conclusion\nIn this chapter, we learned how to use the `Question` class to define rules for user inputs in our console applications. We saw how to create confirmation questions and choice questions, ensuring that users provide valid data before proceeding with further actions. Next, we\u2019ll dive into event handling and dispatching!\n\nStay tuned for the next chapter: [Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 3: Event Handling and Dispatching\n\nWelcome back! In our last chapters, we learned about handling user inputs in our console applications and setting up validation rules to ensure those inputs are correct. Now, let's dive into how events work in these systems, much like traffic lights control the flow of vehicles on a road.\n\n## Why Do We Need Event Handling?\n\nImagine you're building an application where users can add books to a library. When someone adds a book, various things might happen\u2014like updating the database, sending a notification, or logging the action. How do we make sure all these actions are handled correctly and efficiently? That's where event handling comes in.\n\n## Key Concepts\n\n### 1. What is an Event?\nAn event is like a signal that tells our application something important has happened. For example, when a user adds a book, it triggers the \"book added\" event.\n\n### 2. Event Handling\nEvent handling means catching these signals and responding to them. Our application can listen for specific events and then perform actions based on those events.\n\n## Example Scenario: Adding a Book\n\nLet's use our library example again. When a user wants to add a book, here are the steps we might want to follow:\n\n1. Validate the input (like checking if the price is positive).\n2. Log the action in a database.\n3. Send a notification to other parts of the system.\n\nWe can set up events for each of these actions and ensure they all work smoothly together.\n\n## How It Works\n\nImagine we have an event like \"BookAddedEvent\". When this event happens, our application will take note and perform the necessary actions.\n\n### 1. Defining Events\nFirst, we define what kind of events we want to handle. For example:\n\n```php\n// In BookAddedEvent.php\nclass BookAddedEvent {\n    private $bookId;\n\n    public function __construct($bookId) {\n        $this->bookId = $bookId;\n    }\n\n    public function getBookId() {\n        return $this->bookId;\n    }\n}\n```\n\n### 2. Dispatching Events\nWhen a book is added, we dispatch (or trigger) the event:\n\n```php\n// In AddBookCommand.php\npublic function execute(InputInterface $input, OutputInterface $output) {\n    // Validate and add the book to the database.\n    \n    $bookId = $this->database->addBook($title, $author, $price);\n    \n    // Dispatch the event\n    $eventDispatcher->dispatch(new BookAddedEvent($bookId));\n}\n```\n\n### 3. Handling Events\nOther parts of our application can listen for this event and perform actions:\n\n```php\n// In DatabaseLogger.php\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass DatabaseLogger implements EventSubscriberInterface {\n    public static function getSubscribedEvents() {\n        return [\n            BookAddedEvent::class => 'logBookAddition',\n        ];\n    }\n\n    public function logBookAddition(BookAddedEvent $event) {\n        $bookId = $event->getBookId();\n        // Log the book addition in a database\n        echo \"Logging that book with ID $bookId was added.\\n\";\n    }\n}\n```\n\n### 4. Example Walkthrough\n\nLet's walk through an example sequence diagram to see how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandHandler as CH\n    participant DatabaseLogger as DL\n    participant BookAddedEvent as E\n\n    U->>CH: Add book \"The Great Gatsby\"\n    CH->>DatabaseLogger: Dispatch BookAddedEvent\n    DL->>DB: Log the addition of the book with ID 123456\n```\n\n## Internal Implementation\n\nNow, let's look at what happens step-by-step:\n\n1. **User Inputs a Command**: The user adds a book.\n2. **Command Handler Validates and Adds the Book**: It checks if all inputs are valid and adds the book to the database.\n3. **Dispatch Event**: The `BookAddedEvent` is dispatched with the book's ID.\n4. **Event Listeners Handle the Event**: The `DatabaseLogger` listens for this event and logs the addition in a database.\n\n## Conclusion\n\nIn this chapter, we learned about event handling and dispatching. We saw how events help coordinate different parts of an application to ensure everything works smoothly together. Next, we'll explore more advanced concepts like command execution flow, which will take us one step further in building robust applications.\n\nStay tuned for the next chapter: [Command Execution Flow](04_command_execution_flow_.md)\n---\n# Chapter 4: Command Execution Flow\n\nWelcome back! In our previous chapters, we explored how to handle user inputs and define validation rules in our console applications. Now, let's dive into the concept of command execution flow. This is like choreographing a dance where each step (command) has its role.\n\n## Motivation\n\nImagine you're building an application that allows users to manage a library. Users can add books, remove books, and list all available books. Each action is a command in our console app. To ensure these commands work smoothly, we need a structured way to handle their execution. This is where the concept of \"Command Execution Flow\" comes in.\n\n## Key Concepts\n\n### What is Command Execution Flow?\n\nThink of it like organizing a school play. You have actors (commands) who each have specific roles and follow a script (execution flow). Just as a director ensures everything runs smoothly, we need to structure our commands so they execute correctly.\n\n### How Does It Work?\n\nLet's use the library example again. When a user wants to add a book, here are the steps:\n\n1. **Validate Input**: Ensure the user inputs valid data.\n2. **Execute Command**: Add the book to the database.\n3. **Notify Other Systems**: Send a notification if needed.\n\nWe'll set up events for each of these actions and make sure they work together seamlessly.\n\n## How to Use It\n\n### Example Scenario: Adding a Book\n\nLet's walk through adding a book step-by-step:\n\n1. **User Input**: The user provides the title, author, and price.\n2. **Validation**: We check if all inputs are valid (e.g., non-negative prices).\n3. **Add to Database**: If validation passes, we add the book to our database.\n4. **Log Action**: Log this action in a database for tracking.\n\n### Example Code\n\nHere\u2019s how we can set up these steps using Symfony Console:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Define the add book command\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Validation: Check if all inputs are valid\n        $title = $input->getArgument('title');\n        $author = $input->getArgument('author');\n        $price = (float)$input->getArgument('price');\n\n        if ($price < 0) {\n            throw new \\Exception(\"Price cannot be negative.\");\n        }\n\n        // Add the book to the database\n        $database = new Database();\n        $bookId = $database->addBook($title, $author, $price);\n\n        // Log action in a database\n        logAction('Add Book', 'Library App', $bookId);\n\n        return 0;\n    }\n}\n\n// Add the command to the application\n$application->add(new AddBookCommand());\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n1. **Application**: We create an `Application` instance with a name and version.\n2. **Add Book Command**: We define a new `Command` class that handles adding books.\n3. **Validation**: Inside the command, we check if the price is valid.\n4. **Database Interaction**: If validation passes, we add the book to our database.\n5. **Logging**: We log the action in a database for tracking.\n\n## Internal Implementation\n\nNow, let's see what happens step-by-step when this command executes:\n\n1. **User Inputs**:\n   - The user provides `title`, `author`, and `price`.\n2. **Validation**:\n   - The command checks if the price is valid.\n3. **Execute Command**:\n   - If validation passes, it adds the book to the database.\n4. **Log Action**:\n   - It logs the action in a database.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandHandler as CH\n    participant Database as DB\n    participant Logger as L\n\n    U->>CH: Add Book \"The Great Gatsby\"\n    CH-->>DB: Validate and add to database\n    CH-->>L: Log action in the database\n```\n\n### Internal Code Walkthrough\n\nLet's dive deeper into the internal code:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\n\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Validation: Check if all inputs are valid\n        $title = $input->getArgument('title');\n        $author = $input->getArgument('author');\n        $price = (float)$input->getArgument('price');\n\n        if ($price < 0) {\n            throw new \\Exception(\"Price cannot be negative.\");\n        }\n\n        // Add the book to the database\n        $database = new Database();\n        $bookId = $database->addBook($title, $author, $price);\n\n        // Log action in a database\n        logAction('Add Book', 'Library App', $bookId);\n\n        return 0;\n    }\n}\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Add the command to the application\n$application->add(new AddBookCommand());\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n- **Command Definition**: We define a command class with validation and database interaction.\n- **Validation**: Ensure inputs are valid before proceeding.\n- **Database Interaction**: Add the book to our database if validation passes.\n- **Logging**: Log the action for tracking.\n\n## Conclusion\n\nIn this chapter, we learned about command execution flow by creating a structured way to handle user commands in our console application. We saw how to validate inputs, execute commands, and notify other systems. Next, we'll explore more advanced concepts like event handling and dispatching!\n\nStay tuned for the next chapter: [Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 5: Command Discovery and Loading\n\n## Motivation\n\nIn our previous chapters, we learned how to handle user inputs, validate them, and execute commands. But what if you want to add more commands or change existing ones easily? How do you make sure your application knows about all the available commands without needing to hard-code them everywhere?\n\nImagine you're organizing a book fair. You have different roles like registering authors, adding books, and listing available books. Each role is a command in our console app. To manage these efficiently, we need an easy way to discover and load these commands.\n\n## Key Concepts\n\n### 1. Command Discovery\nCommand discovery is like a librarian organizing books on shelves. It ensures all your book-related commands are neatly arranged so users can easily find them.\n\n### 2. Command Loading\nLoading commands means making sure the application knows about these commands when it starts up, similar to how you might check a catalog before setting up an event.\n\n## How to Use This Abstraction\n\nLet's see how we can use command discovery and loading in our library app:\n\n1. **Define Commands**: We create different commands for adding books, removing books, and listing all books.\n2. **Discover and Load Commands**: We make sure the application knows about these commands so it can handle them.\n\n## Example Scenario: Adding Book Command\n\nLet's define a simple command to add a book:\n\n```php\n// In AddBookCommand.php\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Implementation details here\n    }\n}\n```\n\n### Explanation\n\n- **Command Definition**: We create an `AddBookCommand` class that extends from Symfony's `Command`.\n- **Configuration**: The `configure` method sets the name and description of the command.\n- **Execution**: In the `execute` method, we can add logic to handle adding a book.\n\n## Example Code\n\nNow, let's see how we can discover and load these commands:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\CommandLoader\\ContainerCommandLoader;\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Define the command map with command names as keys and service ids as values\n$commandMap = [\n    'add-book' => AddBookCommand::class,\n];\n\n// Load commands using ContainerCommandLoader\n$loader = new ContainerCommandLoader($application->getContainer(), $commandMap);\n$application->setCommandLoader($loader);\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n- **Application Instance**: We create an `Application` instance with a name and version.\n- **Command Map**: We define a map that links command names to their respective classes.\n- **Loading Commands**: Using `ContainerCommandLoader`, we load the commands from our application container.\n\n## Internal Implementation\n\nLet's see how the internal implementation works:\n\n1. **User Starts Application**:\n   - The user starts the application and calls the `run` method.\n2. **Application Loads Commands**:\n   - The application uses the command loader to discover and load all available commands based on our defined map.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandLoader as CL\n    participant Application as A\n    participant AddBookCommand as AB\n\n    U->>A: Start application\n    A->>CL: Load commands from command map\n    CL->>AB: Discover and load add-book command\n```\n\n### Explanation of Sequence Diagram\n\n- **User Starts Application**: The user initiates the application.\n- **Application Loads Commands**: The application uses `ContainerCommandLoader` to discover and load all available commands.\n- **Discover and Load Command**: The loader finds the `AddBookCommand` class and loads it.\n\n## Conclusion\n\nIn this chapter, we learned about command discovery and loading. We saw how to define commands and ensure our application knows about them when it starts up. Next, we\u2019ll explore more advanced concepts like signal handling!\n\nStay tuned for the next chapter: [Signal Handling](06_signal_handling_.md)\n---\n# Chapter 6: Signal Handling\n\n## Motivation\n\nIn our previous chapters, we learned how to handle user inputs and validate them before processing commands. However, sometimes the application might need to react to external events or signals that come from outside. Think of it like a traffic light system where different lights (signals) trigger actions in the console app.\n\nImagine you're building an application that runs on a server. Sometimes, this server needs to stop running the application due to certain conditions\u2014like when the server is shut down or receives a specific command. In these situations, we need to catch and handle such signals.\n\n## Key Concepts\n\n### 1. What is a Signal?\nA signal is like an emergency bell that rings in your console app. It's a notification from outside (e.g., operating system) that something important has happened.\n\n### 2. Handling Signals\nHandling signals means setting up listeners to catch these bells and take appropriate actions, just as you would listen for fire alarms and evacuate the building accordingly.\n\n## How to Use Signal Handling\n\nLet's use an example: You're developing a backup tool that should run every night. However, if someone sends a shutdown signal (like pressing `Ctrl+C`), your application needs to stop running gracefully instead of crashing.\n\n### Example Scenario: Backup Tool\n\n1. **User Starts Application**: The user runs the backup tool.\n2. **Backup in Progress**: The app starts backing up files.\n3. **Signal Received**: If someone sends a shutdown signal, the app stops and exits cleanly.\n\n## Code to Handle Signals\n\nHere's how we can handle signals in our application:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\nuse Symfony\\Component\\Console\\Output\\NullOutput;\n\n// Create an Application instance\n$application = new Application('Backup Tool', '1.0');\n\n// Define the command to run backups\nclass BackupCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('backup')\n            ->setDescription('Run a backup of the files');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Perform file backup logic here\n        echo \"Starting backup...\\n\";\n        sleep(5);  // Simulate backup process\n        echo \"Backup completed!\\n\";\n    }\n}\n\n// Add the command to the application\n$application->add(new BackupCommand());\n\n// Run the application\ntry {\n    $exitCode = $application->run(new ArrayInput([]), new NullOutput());\n} catch (\\Exception $e) {\n    // Handle signals by catching exceptions\n    echo \"Caught an exception: \" . $e->getMessage() . \"\\n\";\n}\n```\n\n### Explanation\n\n1. **Application Instance**: We create a `Symfony\\Component\\Console\\Application` instance with the app name and version.\n2. **Command Definition**: We define a `BackupCommand` to handle file backups.\n3. **Running Application**: We try to run the application using `run` method, which catches exceptions thrown by signals.\n\n## Internal Implementation\n\nLet's see what happens step-by-step:\n\n1. **User Starts Application**:\n   - The user runs the backup tool.\n2. **Application Runs Command**:\n   - The app starts performing file backups.\n3. **Signal Received**:\n   - If a signal is received, it throws an exception which we catch and handle.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Application as A\n    participant CommandHandler as CH\n\n    U->>A: Start application\n    A->>CH: Run backup command\n    alt Signal received (Ctrl+C)\n        A-->>CH: Catches exception and handles signal\n    else Backup completed\n        CH-->>A: Reports completion\n    end\n```\n\n### Explanation of Sequence Diagram\n\n- **User Starts Application**: The user initiates the application.\n- **Application Runs Command**: The app starts running the backup command.\n- **Signal Received (Ctrl+C)**: If a signal is received, it catches and handles the exception gracefully.\n- **Backup Completed**: If no signals are caught, the backup process completes.\n\n## Conclusion\n\nIn this chapter, we learned how to handle signals in our console application. We saw how to set up listeners for external events and ensure that our app behaves correctly when receiving these signals. Next, we'll explore more advanced concepts like logging and debugging!\n\nStay tuned for the next chapter: [Logging and Debugging](07_logging_and_debugging_.md)\n---\n# Chapter 7: Logging and Debugging\n\nWelcome back! In our last chapters, we explored how to handle user inputs, validate them, execute commands, and even discover and load different commands. But what happens when something goes wrong in your application? How do you know where the issue is coming from or if everything is working as expected? This is where logging and debugging come into play.\n\nImagine you're building a library management system. You want to make sure that every time a book is added, removed, or updated, there's a record of what happened. Logging helps you track these events so you can understand the flow of your application and debug any issues if they arise.\n\n## What is Logging?\n\nLogging is like keeping a diary for your console app. It records important information about what\u2019s happening inside the application, such as actions performed by users or errors that occur. This information can be very useful when troubleshooting problems.\n\n### Example Scenario: Adding Books\n\nLet's say you have a command to add books in your library management system. You want to log every time someone adds a book so you can keep track of all additions and make sure nothing is missed.\n\n## How to Use Logging\n\nIn our example, we'll use the `ConsoleLogger` class from Symfony Console to handle logging. This class helps us write logs to the console or file in a structured way.\n\n### Example Code\n\nHere\u2019s how we can set up basic logging:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Output\\ConsoleOutput;\nuse Symfony\\Component\\Console\\Logger\\ConsoleLogger;\n\n// Create a logger instance\n$logger = new ConsoleLogger(new ConsoleOutput());\n\n// Log some information\n$logger->info('Adding book: The Great Gatsby');\n```\n\n### Explanation\n\n1. **Creating a Logger**: We create an instance of `ConsoleLogger` which takes care of logging to the console.\n2. **Logging Information**: Using the `info` method, we log a message when adding a book.\n\n## How It Works Internally\n\nLet\u2019s see how the internal implementation works:\n\n### Step-by-Step Walkthrough\n\n1. **User Initiates Command**: The user runs an add-book command.\n2. **Logger Catches Event**: When logging happens (e.g., `info` method is called), the logger formats and outputs the message to the console.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Logger as L\n    participant ConsoleOutput as CO\n\n    U->>L: Log \"Adding book: The Great Gatsby\"\n    L->>CO: Format and output the message\n```\n\n### Explanation of Sequence Diagram\n\n- **User Initiates Command**: The user runs an add-book command.\n- **Logger Catches Event**: When logging happens, the logger formats the message.\n- **Output to Console**: The formatted message is sent to the console.\n\n## Setting Up Error Logging\n\nSometimes, you might want to log errors differently from regular information. For example, if something goes wrong during the book addition process, you may want to highlight it more prominently.\n\n### Example Code for Error Logging\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Output\\ConsoleOutput;\nuse Symfony\\Component\\Console\\Logger\\ConsoleLogger;\n\n// Create a logger instance\n$logger = new ConsoleLogger(new ConsoleOutput());\n\ntry {\n    // Attempt to add a book\n    $bookId = addBook(\"The Great Gatsby\", \"F. Scott Fitzgerald\");\n} catch (\\Exception $e) {\n    // Log the error with a higher severity level\n    $logger->error('Failed to add book: ' . $e->getMessage());\n}\n\nfunction addBook($title, $author) {\n    // Simulated function that might throw an exception\n    if ($title === \"The Great Gatsby\") {\n        throw new \\Exception(\"Title already exists.\");\n    }\n    \n    return 123456;\n}\n```\n\n### Explanation\n\n1. **Creating a Logger**: We create an instance of `ConsoleLogger` with `ConsoleOutput`.\n2. **Error Handling**: Inside the try-catch block, we attempt to add a book and catch any exceptions.\n3. **Logging Error**: If an error occurs, we log it using the `error` method.\n\n## Internal Implementation\n\nNow let's dive deeper into how logging works internally:\n\n### Code Breakdown\n\n1. **Logger Class**: The `ConsoleLogger` class handles the formatting and output of logs.\n2. **Logging Methods**: Methods like `info`, `error`, etc., format and send messages to the console or file.\n\n### Example Code for ConsoleLogger\n\n```php\nclass ConsoleLogger extends AbstractLogger\n{\n    public function log($level, $message, array $context = [])\n    {\n        if ($level === LogLevel::ERROR) {\n            // Log errors with a higher verbosity level\n            $this->output->getErrorOutput()->writeln(\"<error>$message</error>\");\n        } else {\n            // Log other messages at the appropriate verbosity level\n            $this->output->writeln($message);\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Logging Levels**: The `log` method checks the log level and outputs the message to the appropriate output.\n2. **Formatting Messages**: Messages are formatted using placeholders for context values.\n\n## Conclusion\n\nIn this chapter, we learned about logging in our console application. We saw how to set up basic logging and handle error logging to keep track of important events. This helps us debug issues and understand the flow of our application.\n\nNext, we'll explore debugging techniques that complement logging. Debugging allows us to inspect the state of the application at different points to find and fix issues more efficiently.\n\nStay tuned for the next chapter: [Debugging Techniques](07_debugging_techniques_.md)\n---\n# Chapter 8: Command Testing\n\n## Transition from Previous Chapter\n\nIn our last chapter, we explored logging and debugging techniques to keep track of what's happening inside our console application. Now, let's move on to another crucial aspect\u2014testing commands. This is like practicing a musical piece before performing it in front of an audience.\n\n## Motivation\n\nImagine you're building a library management system where users can add, remove, or search for books. Before releasing this system, you want to make sure that each command works perfectly without any issues. How do you ensure everything runs smoothly? This is where **command testing** comes into play.\n\nCommand testing allows you to write tests for your commands so that you can validate their behavior and ensure they work as expected before deploying them in a production environment. Just like practicing a piece of music multiple times, command testing helps you fine-tune each part until it sounds perfect.\n\n## Key Concepts\n\n### 1. What is Command Testing?\n\nCommand testing is about creating test cases for your console commands to verify that they behave correctly. It's like setting up a practice room where developers can test their musical compositions before performing them in public.\n\n### Example Scenario: Adding a Book\n\nLet's say we have an `add-book` command. We want to ensure it works correctly by testing various scenarios:\n- Adding a book with valid data.\n- Handling invalid inputs (e.g., negative price or empty title).\n- Checking if the book is added successfully.\n\n## How to Use Command Testing\n\n### Setting Up Test Cases\n\nTo start, we'll use a test case class provided by Symfony Console. This class helps us write tests for our commands easily.\n\n#### Example Code\nHere\u2019s how you can set up a basic command test:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Tester\\CommandTester;\nuse Symfony\\Component\\Console\\Application;\n\n// Create an Application instance with your commands loaded.\n$application = new Application();\n$command = $application->find('add-book');\n\n// Create a CommandTester to run the command in a test environment.\n$commandTester = new CommandTester($command);\n\n// Run the command and capture its output.\n$commandTester->execute([\n    'title' => 'The Great Gatsby',\n    'author' => 'F. Scott Fitzgerald',\n    'price' => 10,\n]);\n\n// Check if the book was added successfully.\n$output = $commandTester->getDisplay();\nif (strpos($output, \"Book added successfully\") !== false) {\n    echo \"Test passed: Book added successfully.\\n\";\n} else {\n    echo \"Test failed: Book addition did not work as expected.\\n\";\n}\n```\n\n### Explanation\n\n1. **Create Application Instance**: We create an `Application` instance and load our commands.\n2. **Find Command**: Using the `find` method, we locate the `add-book` command.\n3. **Command Tester**: We use a `CommandTester` to run the command in a test environment.\n4. **Execute Command**: We pass arguments to the command and capture its output.\n5. **Check Output**: We verify if the book was added successfully by checking the output.\n\n## Internal Implementation\n\nLet's see what happens step-by-step when we run this code:\n\n1. **User Starts Application**: The user runs the test script.\n2. **Application Runs Command**: The `CommandTester` runs the command with provided arguments.\n3. **Capture Output**: It captures the console output to check if the book was added successfully.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Application as A\n    participant CommandTester as CT\n    participant ConsoleOutput as CO\n\n    U->>A: Run add-book command tester\n    A->>CT: Execute add-book with arguments\n    CT->>CO: Capture console output\n    CT-->>U: Display output and verify result\n```\n\n### Explanation of Sequence Diagram\n\n- **User Starts Application**: The user runs the test script.\n- **Application Runs Command Tester**: The `CommandTester` executes the command with specified arguments.\n- **Capture Console Output**: It captures the console output to check the result.\n- **Display Result**: Finally, it displays the output and verifies if the book was added successfully.\n\n## Conclusion\n\nIn this chapter, we learned about command testing in our console application. We saw how to set up test cases for commands to ensure they work as expected. This helps us catch any issues early on before deploying them in a production environment.\n\nNext, we'll explore more advanced concepts like output wrapping and formatting! [Next Chapter: Output Wrapping](09_output_wrapping_.md)\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: Helper/TableRows.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\n/**\n * @internal\n */\nclass TableRows implements \\IteratorAggregate\n{\n    public function __construct(\n        private \\Closure $generator,\n    ) {\n    }\n\n    public function getIterator(): \\Traversable\n    {\n        return ($this->generator)();\n    }\n}\n\n\n--- File: Helper/OutputWrapper.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\n/**\n * Simple output wrapper for \"tagged outputs\" instead of wordwrap(). This solution is based on a StackOverflow\n * answer: https://stackoverflow.com/a/20434776/1476819 from user557597 (alias SLN).\n *\n *  (?:\n *       # -- Words/Characters\n *       (                       # (1 start)\n *            (?>                     # Atomic Group - Match words with valid breaks\n *                 .{1,16}                 #  1-N characters\n *                                         #  Followed by one of 4 prioritized, non-linebreak whitespace\n *                 (?:                     #  break types:\n *                      (?<= [^\\S\\r\\n] )        # 1. - Behind a non-linebreak whitespace\n *                      [^\\S\\r\\n]?              #      ( optionally accept an extra non-linebreak whitespace )\n *                   |  (?= \\r? \\n )            # 2. - Ahead a linebreak\n *                   |  $                       # 3. - EOS\n *                   |  [^\\S\\r\\n]               # 4. - Accept an extra non-linebreak whitespace\n *                 )\n *            )                       # End atomic group\n *         |\n *            .{1,16}                 # No valid word breaks, just break on the N'th character\n *       )                       # (1 end)\n *       (?: \\r? \\n )?           # Optional linebreak after Words/Characters\n *    |\n *       # -- Or, Linebreak\n *       (?: \\r? \\n | $ )        # Stand alone linebreak or at EOS\n *  )\n *\n * @author Kriszti\u00e1n Ferenczi <ferenczi.krisztian@gmail.com>\n *\n * @see https://stackoverflow.com/a/20434776/1476819\n */\nfinal class OutputWrapper\n{\n    private const TAG_OPEN_REGEX_SEGMENT = '[a-z](?:[^\\\\\\\\<>]*+ | \\\\\\\\.)*';\n    private const TAG_CLOSE_REGEX_SEGMENT = '[a-z][^<>]*+';\n    private const URL_PATTERN = 'https?://\\S+';\n\n    public function __construct(\n        private bool $allowCutUrls = false,\n    ) {\n    }\n\n    public function wrap(string $text, int $width, string $break = \"\\n\"): string\n    {\n        if (!$width) {\n            return $text;\n        }\n\n        $tagPattern = \\sprintf('<(?:(?:%s)|/(?:%s)?)>', self::TAG_OPEN_REGEX_SEGMENT, self::TAG_CLOSE_REGEX_SEGMENT);\n        $limitPattern = \"{1,$width}\";\n        $patternBlocks = [$tagPattern];\n        if (!$this->allowCutUrls) {\n            $patternBlocks[] = self::URL_PATTERN;\n        }\n        $patternBlocks[] = '.';\n        $blocks = implode('|', $patternBlocks);\n        $rowPattern = \"(?:$blocks)$limitPattern\";\n        $pattern = \\sprintf('#(?:((?>(%1$s)((?<=[^\\S\\r\\n])[^\\S\\r\\n]?|(?=\\r?\\n)|$|[^\\S\\r\\n]))|(%1$s))(?:\\r?\\n)?|(?:\\r?\\n|$))#imux', $rowPattern);\n        $output = rtrim(preg_replace($pattern, '\\\\1'.$break, $text), $break);\n\n        return str_replace(' '.$break, $break, $output);\n    }\n}\n\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 9: Output Wrapping\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 20 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 9: Output Wrapping\n\n## Transition from Previous Chapter\n\nIn our previous chapter on [Output and Formatting](10_output_and_formatting_.md), we learned about making our console application's output look neat and pretty. Now, let's dive deeper into a specific aspect of formatting\u2014ensuring that long lines don't go beyond the terminal width. This is like when you're writing an essay and want to make sure each line fits neatly on the page.\n\n## Motivation\n\nImagine you're working on a library management system where users can see lists of books. When there are many books, some titles might be very long. If these titles go beyond the terminal width, it can look messy and hard to read. This is where output wrapping comes into play!\n\nOutput wrapping means breaking up long lines so they fit nicely within the terminal width. It's like manually adjusting each line in a paragraph to make sure no word goes beyond the margin.\n\n## Key Concepts\n\n### 1. What is Output Wrapping?\n\nOutput wrapping is about taking text and breaking it into smaller, manageable pieces that fit within the terminal width. This ensures the output looks clean and readable.\n\n### Example Scenario: Book List\n\nSuppose you have a list of books in your library management system. Each book title might be long, like \"The Great American Novel by Mark Twain\". If this title goes beyond the terminal width, it will look messy. Output wrapping helps break this line into smaller pieces so it fits neatly.\n\n## How to Use Output Wrapping\n\nLet's see how we can use output wrapping in our application:\n\n### Example Code\n\nHere\u2019s a simple example of using output wrapping:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Helper\\OutputWrapper;\n\n// Create an instance of OutputWrapper with default settings.\n$outputWrapper = new OutputWrapper();\n\n$text = \"The Great American Novel by Mark Twain is one of the most famous books in literature.\";\n$wrappedText = $outputWrapper->wrap($text, 40);\n\necho $wrappedText;\n```\n\n### Explanation\n\n1. **Create an Instance**: We create a `OutputWrapper` instance.\n2. **Wrap Text**: The `wrap` method takes the text and the desired width as arguments. It returns the wrapped text.\n\nThe output might look like this:\n\n```\nThe Great American Novel by M\nark Twain is one of the mo\nst famous books in literatu\nre.\n```\n\nNow, let's break down what happens step-by-step when we run this code:\n\n1. **User Runs Code**: The user runs the script to see the wrapped text.\n2. **Wrap Text**: The `wrap` method processes the text and breaks it into smaller pieces that fit within the specified width.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant OutputWrapper as OW\n    participant WrappedText as WT\n\n    U->>OW: Wrap \"The Great American Novel by Mark Twain is one of the most famous books in literature.\" with width 40\n    OW-->>WT: Returns wrapped text\n    U-->>U: Display wrapped text on console\n```\n\n### Explanation of Sequence Diagram\n\n- **User Runs Code**: The user runs the script.\n- **Wrap Text**: The `OutputWrapper` processes the input text and wraps it to fit within the specified width.\n- **Display Wrapped Text**: The result is displayed on the console.\n\n## Internal Implementation\n\nNow, let's take a closer look at how the internal implementation works:\n\n### Code Breakdown\n\nThe `wrap` method uses regular expressions and pattern matching to break up lines. Here\u2019s a simplified version of what happens inside:\n\n```php\nclass OutputWrapper {\n    private $allowCutUrls = false;\n\n    public function wrap(string $text, int $width): string {\n        if (!$width) {\n            return $text;\n        }\n\n        // Define patterns for tags and URLs\n        $tagPattern = '<[a-z](?:[^\\\\\\\\<>]*+ | \\\\\\\\.)*/(?:[a-z][^<>]*+)?>';\n        $urlPattern = 'https?://\\S+';\n\n        // Create the pattern to match text within the width limit\n        $rowPattern = \"(?:$tagPattern|$urlPattern|.){1,$width}(?:\\r?\\n)?\";\n        $pattern = \"#(?:((?>(?$1)((?<=[^\\S\\r\\n])[^\\S\\r\\n]?|(?=\\r?\\n)|$|[^\\S\\r\\n]))|($tagPattern))(?:\\r?\\n)?|(?:\\r?\\n|$))#imux\";\n\n        // Replace the text with wrapped lines\n        $output = preg_replace($pattern, '\\\\1', $text);\n\n        return str_replace(' '.$break, $break, $output);\n    }\n}\n```\n\n### Explanation\n\n1. **Check Width**: If no width is specified, it returns the original text.\n2. **Define Patterns**: It defines patterns for tags and URLs to handle them separately.\n3. **Create Pattern**: It creates a pattern that matches lines within the specified width limit.\n4. **Replace Text**: It uses `preg_replace` to replace the original text with wrapped lines.\n\n## Conclusion\n\nIn this chapter, we learned about output wrapping in our console application. We saw how to ensure long text fits nicely within terminal width using the `OutputWrapper` class. This helps make our output look clean and readable.\n\nNext, we'll explore more advanced concepts like handling URLs in wrapped text! [Next Chapter: Output Handling](10_output_and_formatting_.md)",
    "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `console` about the concept: \"Output and Formatting\n\". This is Chapter 10.\n\nConcept Details:\n- Name: Output and Formatting\n\n- Description:\nThis abstraction controls how information is displayed to the user, ensuring it\u2019s formatted correctly. It's like a chef preparing food for a banquet, making sure each dish is presented beautifully.\n\n\nComplete Tutorial Structure:\n1. [Input Handling and Validation\n](01_input_handling_and_validation_.md)\n2. [Input Definition and Validation\n](02_input_definition_and_validation_.md)\n3. [Event Handling and Dispatching\n](03_event_handling_and_dispatching_.md)\n4. [Command Execution Flow\n](04_command_execution_flow_.md)\n5. [Command Discovery and Loading\n](05_command_discovery_and_loading_.md)\n6. [Signal Handling\n](06_signal_handling_.md)\n7. [Logging and Debugging\n](07_logging_and_debugging_.md)\n8. [Command Testing\n](08_command_testing_.md)\n9. [Output Wrapping\n](09_output_wrapping_.md)\n10. [Output and Formatting\n](10_output_and_formatting_.md)\n\nContext from previous chapters:\n# Chapter 1: Input Handling and Validation\n\nWelcome to our journey into building robust console applications! In the previous chapter, we started exploring how to create commands that can be executed from the command line. However, there's an important aspect we haven't covered yet\u2014ensuring that the input provided by users is valid before proceeding with execution. Think of it like a gatekeeper at an event who checks IDs and only allows entry if they meet specific criteria.\n\n## Why Validation Matters\n\nImagine you're building a console application to manage a library. You have a command to add books, but what happens when someone inputs invalid data? For example, entering a negative number for the book's price or leaving fields blank. Without proper validation, your program might crash or produce incorrect results. This is where input handling and validation come in.\n\n## Key Concepts\n\n### 1. Question Class\nThe `Question` class acts as our gatekeeper. It ensures that user inputs are valid before proceeding with any further actions. Let's break down how it works.\n\n#### Example Scenario: Adding a Book\nSuppose we want to add a new book to the library using a command-line interface. We need to ask for the book's title, author, and price. If any of these fields are invalid (e.g., an empty string or a negative number), our program should not proceed.\n\n### 2. Setting Up Questions\nIn the `Question` class, we can set up questions with default values and validators. For instance, when asking for the book's title, if no value is provided by the user, it defaults to \"Unknown\". If the price is inputted incorrectly (e.g., a negative number), the program will throw an error.\n\n### 3. Using Choice Questions\nSometimes, users might need to make choices from predefined options. For example, we could ask them to select if the book is fiction or non-fiction. The `ChoiceQuestion` class ensures that only valid choices are accepted.\n\n## How to Use It\n\nLet's see how we can use these classes in a practical scenario:\n\n### Example Code\nHere\u2019s a simple example of setting up questions and handling user input using the `Question` and `ChoiceQuestion` classes.\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create a confirmation question to ask if the book should be added.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question for the genre of the book.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask the user questions and handle their responses.\n$helperSet = \\Symfony\\Component\\Console\\Helper\\HelperSet::create();\n$io = $helperSet->get('io');\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Step-by-Step Explanation\n1. **Create Confirmation Question**: We ask the user if they want to add a book.\n2. **Create Choice Question**: We give the user options for the genre of the book.\n3. **Ask Questions and Handle Responses**: The program waits for user input, validates it using built-in validators, and handles any errors.\n\n### Internal Walkthrough\nWhen you run this code:\n- First, you\u2019ll be prompted with a confirmation question: `Do you want to add this book? (yes/no): yes`\n- Then, another prompt will appear asking about the genre: `What is the genre of the book? [fiction, non-fiction]: fiction`\n\nIf any input is invalid, an error message will be displayed.\n\n### Mermaid Diagram\nHere\u2019s a simple sequence diagram illustrating the flow:\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## Conclusion\nIn this chapter, we learned how to handle user inputs using the `Question` class. We saw how to create questions with validation and choices, ensuring that our application handles invalid data gracefully. Next, we\u2019ll dive deeper into the internal implementation of these classes.\n\nStay tuned for the next chapter where we will explore more about event handling and dispatching! [Next Chapter: Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 2: Input Definition and Validation\n\nWelcome back! In our last chapter, we explored how to handle user inputs in our console applications. Now, let's take it one step further by defining the rules for those inputs\u2014essentially creating a set of guidelines that ensure users provide valid data.\n\n## Why Do We Need This?\n\nImagine you're building an application where users can add books to a library. You want them to be able to enter details like the book's title, author, and price. However, what if someone types in a negative price or forgets to fill out required fields? To avoid such issues, we need to define these rules and check that users follow them.\n\n## Key Concepts\n\n### 1. Setting Up Questions\nThink of questions as the gatekeepers at an event. They ensure only valid entries get through. In our library app scenario, we'll set up a series of questions for users to answer when adding a book.\n\n```php\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// Create confirmation and choice questions.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask users questions and handle their responses.\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### 2. Using the Question Class\nThe `Question` class is like a form where you can ask for specific pieces of information. You can create questions that require yes/no answers or multiple-choice options.\n\n- **ConfirmationQuestion**: Asks a user to confirm something.\n- **ChoiceQuestion**: Provides users with a list of choices from which they must select one.\n\n### Example Walkthrough\nLet's walk through an example where we use these classes:\n\n1. We ask the user if they want to add a book. If they say \"yes,\" we proceed; otherwise, nothing happens.\n2. Next, we ask them to choose the genre of the book from two options: fiction or non-fiction.\n\nIf any input is invalid (e.g., an empty response), the program will display an error message and not proceed with adding the book.\n\n## Sequence Diagram\nHere\u2019s a simple sequence diagram illustrating how these questions work:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Program as P\n    participant ConfirmationQuestion as Q1\n    participant ChoiceQuestion as Q2\n\n    U->>P: Input \"yes\" for confirmation question\n    P->>Q1: Validate input\n    Q1-->>P: Valid response \"yes\"\n    P->>U: Display book added successfully message\n\n    U->>P: Input \"fiction\" for genre question\n    P->>Q2: Validate input\n    Q2-->>P: Valid response \"fiction\"\n    P->>U: Display confirmation and genre choice\n```\n\n## How It Works Internally\nNow, let's peek under the hood. The `Question` class handles user inputs by validating them based on predefined rules.\n\n1. **Create Questions**: Define what kind of question it is (confirmation or choice).\n2. **Ask for Input**: Display the question to the user.\n3. **Validate Response**: Check if the response meets the expected criteria.\n4. **Handle Errors**: If the input isn't valid, display an error message and ask again.\n\n## Internal Implementation\nLet's look at how this works with some simple code snippets:\n\n### Example Code\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion;\n\n// Create a confirmation question.\n$confirmQuestion = new ConfirmationQuestion(\"Do you want to add this book? (yes/no): \", true);\n\n// Create a choice question.\n$genreQuestion = new ChoiceQuestion(\"What is the genre of the book?\", [\"fiction\", \"non-fiction\"], \"fiction\");\n\n// Ask users questions and handle their responses.\n$response = $io->ask($confirmQuestion);\n$genre = $io->ask($genreQuestion);\n\necho \"Book added successfully with confirmation: $response, Genre: $genre\\n\";\n```\n\n### Explanation\n1. **Creating Questions**: We define the type of question we want to ask (confirmation or choice) and provide default values if needed.\n2. **Asking for Input**: The `ask` method displays the question to the user and waits for their response.\n3. **Validating Response**: If the input is invalid, an error message is displayed.\n\n## Conclusion\nIn this chapter, we learned how to use the `Question` class to define rules for user inputs in our console applications. We saw how to create confirmation questions and choice questions, ensuring that users provide valid data before proceeding with further actions. Next, we\u2019ll dive into event handling and dispatching!\n\nStay tuned for the next chapter: [Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 3: Event Handling and Dispatching\n\nWelcome back! In our last chapters, we learned about handling user inputs in our console applications and setting up validation rules to ensure those inputs are correct. Now, let's dive into how events work in these systems, much like traffic lights control the flow of vehicles on a road.\n\n## Why Do We Need Event Handling?\n\nImagine you're building an application where users can add books to a library. When someone adds a book, various things might happen\u2014like updating the database, sending a notification, or logging the action. How do we make sure all these actions are handled correctly and efficiently? That's where event handling comes in.\n\n## Key Concepts\n\n### 1. What is an Event?\nAn event is like a signal that tells our application something important has happened. For example, when a user adds a book, it triggers the \"book added\" event.\n\n### 2. Event Handling\nEvent handling means catching these signals and responding to them. Our application can listen for specific events and then perform actions based on those events.\n\n## Example Scenario: Adding a Book\n\nLet's use our library example again. When a user wants to add a book, here are the steps we might want to follow:\n\n1. Validate the input (like checking if the price is positive).\n2. Log the action in a database.\n3. Send a notification to other parts of the system.\n\nWe can set up events for each of these actions and ensure they all work smoothly together.\n\n## How It Works\n\nImagine we have an event like \"BookAddedEvent\". When this event happens, our application will take note and perform the necessary actions.\n\n### 1. Defining Events\nFirst, we define what kind of events we want to handle. For example:\n\n```php\n// In BookAddedEvent.php\nclass BookAddedEvent {\n    private $bookId;\n\n    public function __construct($bookId) {\n        $this->bookId = $bookId;\n    }\n\n    public function getBookId() {\n        return $this->bookId;\n    }\n}\n```\n\n### 2. Dispatching Events\nWhen a book is added, we dispatch (or trigger) the event:\n\n```php\n// In AddBookCommand.php\npublic function execute(InputInterface $input, OutputInterface $output) {\n    // Validate and add the book to the database.\n    \n    $bookId = $this->database->addBook($title, $author, $price);\n    \n    // Dispatch the event\n    $eventDispatcher->dispatch(new BookAddedEvent($bookId));\n}\n```\n\n### 3. Handling Events\nOther parts of our application can listen for this event and perform actions:\n\n```php\n// In DatabaseLogger.php\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass DatabaseLogger implements EventSubscriberInterface {\n    public static function getSubscribedEvents() {\n        return [\n            BookAddedEvent::class => 'logBookAddition',\n        ];\n    }\n\n    public function logBookAddition(BookAddedEvent $event) {\n        $bookId = $event->getBookId();\n        // Log the book addition in a database\n        echo \"Logging that book with ID $bookId was added.\\n\";\n    }\n}\n```\n\n### 4. Example Walkthrough\n\nLet's walk through an example sequence diagram to see how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandHandler as CH\n    participant DatabaseLogger as DL\n    participant BookAddedEvent as E\n\n    U->>CH: Add book \"The Great Gatsby\"\n    CH->>DatabaseLogger: Dispatch BookAddedEvent\n    DL->>DB: Log the addition of the book with ID 123456\n```\n\n## Internal Implementation\n\nNow, let's look at what happens step-by-step:\n\n1. **User Inputs a Command**: The user adds a book.\n2. **Command Handler Validates and Adds the Book**: It checks if all inputs are valid and adds the book to the database.\n3. **Dispatch Event**: The `BookAddedEvent` is dispatched with the book's ID.\n4. **Event Listeners Handle the Event**: The `DatabaseLogger` listens for this event and logs the addition in a database.\n\n## Conclusion\n\nIn this chapter, we learned about event handling and dispatching. We saw how events help coordinate different parts of an application to ensure everything works smoothly together. Next, we'll explore more advanced concepts like command execution flow, which will take us one step further in building robust applications.\n\nStay tuned for the next chapter: [Command Execution Flow](04_command_execution_flow_.md)\n---\n# Chapter 4: Command Execution Flow\n\nWelcome back! In our previous chapters, we explored how to handle user inputs and define validation rules in our console applications. Now, let's dive into the concept of command execution flow. This is like choreographing a dance where each step (command) has its role.\n\n## Motivation\n\nImagine you're building an application that allows users to manage a library. Users can add books, remove books, and list all available books. Each action is a command in our console app. To ensure these commands work smoothly, we need a structured way to handle their execution. This is where the concept of \"Command Execution Flow\" comes in.\n\n## Key Concepts\n\n### What is Command Execution Flow?\n\nThink of it like organizing a school play. You have actors (commands) who each have specific roles and follow a script (execution flow). Just as a director ensures everything runs smoothly, we need to structure our commands so they execute correctly.\n\n### How Does It Work?\n\nLet's use the library example again. When a user wants to add a book, here are the steps:\n\n1. **Validate Input**: Ensure the user inputs valid data.\n2. **Execute Command**: Add the book to the database.\n3. **Notify Other Systems**: Send a notification if needed.\n\nWe'll set up events for each of these actions and make sure they work together seamlessly.\n\n## How to Use It\n\n### Example Scenario: Adding a Book\n\nLet's walk through adding a book step-by-step:\n\n1. **User Input**: The user provides the title, author, and price.\n2. **Validation**: We check if all inputs are valid (e.g., non-negative prices).\n3. **Add to Database**: If validation passes, we add the book to our database.\n4. **Log Action**: Log this action in a database for tracking.\n\n### Example Code\n\nHere\u2019s how we can set up these steps using Symfony Console:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Define the add book command\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Validation: Check if all inputs are valid\n        $title = $input->getArgument('title');\n        $author = $input->getArgument('author');\n        $price = (float)$input->getArgument('price');\n\n        if ($price < 0) {\n            throw new \\Exception(\"Price cannot be negative.\");\n        }\n\n        // Add the book to the database\n        $database = new Database();\n        $bookId = $database->addBook($title, $author, $price);\n\n        // Log action in a database\n        logAction('Add Book', 'Library App', $bookId);\n\n        return 0;\n    }\n}\n\n// Add the command to the application\n$application->add(new AddBookCommand());\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n1. **Application**: We create an `Application` instance with a name and version.\n2. **Add Book Command**: We define a new `Command` class that handles adding books.\n3. **Validation**: Inside the command, we check if the price is valid.\n4. **Database Interaction**: If validation passes, we add the book to our database.\n5. **Logging**: We log the action in a database for tracking.\n\n## Internal Implementation\n\nNow, let's see what happens step-by-step when this command executes:\n\n1. **User Inputs**:\n   - The user provides `title`, `author`, and `price`.\n2. **Validation**:\n   - The command checks if the price is valid.\n3. **Execute Command**:\n   - If validation passes, it adds the book to the database.\n4. **Log Action**:\n   - It logs the action in a database.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandHandler as CH\n    participant Database as DB\n    participant Logger as L\n\n    U->>CH: Add Book \"The Great Gatsby\"\n    CH-->>DB: Validate and add to database\n    CH-->>L: Log action in the database\n```\n\n### Internal Code Walkthrough\n\nLet's dive deeper into the internal code:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\n\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Validation: Check if all inputs are valid\n        $title = $input->getArgument('title');\n        $author = $input->getArgument('author');\n        $price = (float)$input->getArgument('price');\n\n        if ($price < 0) {\n            throw new \\Exception(\"Price cannot be negative.\");\n        }\n\n        // Add the book to the database\n        $database = new Database();\n        $bookId = $database->addBook($title, $author, $price);\n\n        // Log action in a database\n        logAction('Add Book', 'Library App', $bookId);\n\n        return 0;\n    }\n}\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Add the command to the application\n$application->add(new AddBookCommand());\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n- **Command Definition**: We define a command class with validation and database interaction.\n- **Validation**: Ensure inputs are valid before proceeding.\n- **Database Interaction**: Add the book to our database if validation passes.\n- **Logging**: Log the action for tracking.\n\n## Conclusion\n\nIn this chapter, we learned about command execution flow by creating a structured way to handle user commands in our console application. We saw how to validate inputs, execute commands, and notify other systems. Next, we'll explore more advanced concepts like event handling and dispatching!\n\nStay tuned for the next chapter: [Event Handling and Dispatching](03_event_handling_and_dispatching_.md)\n---\n# Chapter 5: Command Discovery and Loading\n\n## Motivation\n\nIn our previous chapters, we learned how to handle user inputs, validate them, and execute commands. But what if you want to add more commands or change existing ones easily? How do you make sure your application knows about all the available commands without needing to hard-code them everywhere?\n\nImagine you're organizing a book fair. You have different roles like registering authors, adding books, and listing available books. Each role is a command in our console app. To manage these efficiently, we need an easy way to discover and load these commands.\n\n## Key Concepts\n\n### 1. Command Discovery\nCommand discovery is like a librarian organizing books on shelves. It ensures all your book-related commands are neatly arranged so users can easily find them.\n\n### 2. Command Loading\nLoading commands means making sure the application knows about these commands when it starts up, similar to how you might check a catalog before setting up an event.\n\n## How to Use This Abstraction\n\nLet's see how we can use command discovery and loading in our library app:\n\n1. **Define Commands**: We create different commands for adding books, removing books, and listing all books.\n2. **Discover and Load Commands**: We make sure the application knows about these commands so it can handle them.\n\n## Example Scenario: Adding Book Command\n\nLet's define a simple command to add a book:\n\n```php\n// In AddBookCommand.php\nclass AddBookCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('add-book')\n            ->setDescription('Add a book to the library');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Implementation details here\n    }\n}\n```\n\n### Explanation\n\n- **Command Definition**: We create an `AddBookCommand` class that extends from Symfony's `Command`.\n- **Configuration**: The `configure` method sets the name and description of the command.\n- **Execution**: In the `execute` method, we can add logic to handle adding a book.\n\n## Example Code\n\nNow, let's see how we can discover and load these commands:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\CommandLoader\\ContainerCommandLoader;\n\n// Create an Application instance\n$application = new Application('Library App', '1.0');\n\n// Define the command map with command names as keys and service ids as values\n$commandMap = [\n    'add-book' => AddBookCommand::class,\n];\n\n// Load commands using ContainerCommandLoader\n$loader = new ContainerCommandLoader($application->getContainer(), $commandMap);\n$application->setCommandLoader($loader);\n\n// Run the application\n$exitCode = $application->run();\n```\n\n### Explanation\n\n- **Application Instance**: We create an `Application` instance with a name and version.\n- **Command Map**: We define a map that links command names to their respective classes.\n- **Loading Commands**: Using `ContainerCommandLoader`, we load the commands from our application container.\n\n## Internal Implementation\n\nLet's see how the internal implementation works:\n\n1. **User Starts Application**:\n   - The user starts the application and calls the `run` method.\n2. **Application Loads Commands**:\n   - The application uses the command loader to discover and load all available commands based on our defined map.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant CommandLoader as CL\n    participant Application as A\n    participant AddBookCommand as AB\n\n    U->>A: Start application\n    A->>CL: Load commands from command map\n    CL->>AB: Discover and load add-book command\n```\n\n### Explanation of Sequence Diagram\n\n- **User Starts Application**: The user initiates the application.\n- **Application Loads Commands**: The application uses `ContainerCommandLoader` to discover and load all available commands.\n- **Discover and Load Command**: The loader finds the `AddBookCommand` class and loads it.\n\n## Conclusion\n\nIn this chapter, we learned about command discovery and loading. We saw how to define commands and ensure our application knows about them when it starts up. Next, we\u2019ll explore more advanced concepts like signal handling!\n\nStay tuned for the next chapter: [Signal Handling](06_signal_handling_.md)\n---\n# Chapter 6: Signal Handling\n\n## Motivation\n\nIn our previous chapters, we learned how to handle user inputs and validate them before processing commands. However, sometimes the application might need to react to external events or signals that come from outside. Think of it like a traffic light system where different lights (signals) trigger actions in the console app.\n\nImagine you're building an application that runs on a server. Sometimes, this server needs to stop running the application due to certain conditions\u2014like when the server is shut down or receives a specific command. In these situations, we need to catch and handle such signals.\n\n## Key Concepts\n\n### 1. What is a Signal?\nA signal is like an emergency bell that rings in your console app. It's a notification from outside (e.g., operating system) that something important has happened.\n\n### 2. Handling Signals\nHandling signals means setting up listeners to catch these bells and take appropriate actions, just as you would listen for fire alarms and evacuate the building accordingly.\n\n## How to Use Signal Handling\n\nLet's use an example: You're developing a backup tool that should run every night. However, if someone sends a shutdown signal (like pressing `Ctrl+C`), your application needs to stop running gracefully instead of crashing.\n\n### Example Scenario: Backup Tool\n\n1. **User Starts Application**: The user runs the backup tool.\n2. **Backup in Progress**: The app starts backing up files.\n3. **Signal Received**: If someone sends a shutdown signal, the app stops and exits cleanly.\n\n## Code to Handle Signals\n\nHere's how we can handle signals in our application:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\nuse Symfony\\Component\\Console\\Output\\NullOutput;\n\n// Create an Application instance\n$application = new Application('Backup Tool', '1.0');\n\n// Define the command to run backups\nclass BackupCommand extends Command {\n    protected function configure() {\n        $this\n            ->setName('backup')\n            ->setDescription('Run a backup of the files');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        // Perform file backup logic here\n        echo \"Starting backup...\\n\";\n        sleep(5);  // Simulate backup process\n        echo \"Backup completed!\\n\";\n    }\n}\n\n// Add the command to the application\n$application->add(new BackupCommand());\n\n// Run the application\ntry {\n    $exitCode = $application->run(new ArrayInput([]), new NullOutput());\n} catch (\\Exception $e) {\n    // Handle signals by catching exceptions\n    echo \"Caught an exception: \" . $e->getMessage() . \"\\n\";\n}\n```\n\n### Explanation\n\n1. **Application Instance**: We create a `Symfony\\Component\\Console\\Application` instance with the app name and version.\n2. **Command Definition**: We define a `BackupCommand` to handle file backups.\n3. **Running Application**: We try to run the application using `run` method, which catches exceptions thrown by signals.\n\n## Internal Implementation\n\nLet's see what happens step-by-step:\n\n1. **User Starts Application**:\n   - The user runs the backup tool.\n2. **Application Runs Command**:\n   - The app starts performing file backups.\n3. **Signal Received**:\n   - If a signal is received, it throws an exception which we catch and handle.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Application as A\n    participant CommandHandler as CH\n\n    U->>A: Start application\n    A->>CH: Run backup command\n    alt Signal received (Ctrl+C)\n        A-->>CH: Catches exception and handles signal\n    else Backup completed\n        CH-->>A: Reports completion\n    end\n```\n\n### Explanation of Sequence Diagram\n\n- **User Starts Application**: The user initiates the application.\n- **Application Runs Command**: The app starts running the backup command.\n- **Signal Received (Ctrl+C)**: If a signal is received, it catches and handles the exception gracefully.\n- **Backup Completed**: If no signals are caught, the backup process completes.\n\n## Conclusion\n\nIn this chapter, we learned how to handle signals in our console application. We saw how to set up listeners for external events and ensure that our app behaves correctly when receiving these signals. Next, we'll explore more advanced concepts like logging and debugging!\n\nStay tuned for the next chapter: [Logging and Debugging](07_logging_and_debugging_.md)\n---\n# Chapter 7: Logging and Debugging\n\nWelcome back! In our last chapters, we explored how to handle user inputs, validate them, execute commands, and even discover and load different commands. But what happens when something goes wrong in your application? How do you know where the issue is coming from or if everything is working as expected? This is where logging and debugging come into play.\n\nImagine you're building a library management system. You want to make sure that every time a book is added, removed, or updated, there's a record of what happened. Logging helps you track these events so you can understand the flow of your application and debug any issues if they arise.\n\n## What is Logging?\n\nLogging is like keeping a diary for your console app. It records important information about what\u2019s happening inside the application, such as actions performed by users or errors that occur. This information can be very useful when troubleshooting problems.\n\n### Example Scenario: Adding Books\n\nLet's say you have a command to add books in your library management system. You want to log every time someone adds a book so you can keep track of all additions and make sure nothing is missed.\n\n## How to Use Logging\n\nIn our example, we'll use the `ConsoleLogger` class from Symfony Console to handle logging. This class helps us write logs to the console or file in a structured way.\n\n### Example Code\n\nHere\u2019s how we can set up basic logging:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Output\\ConsoleOutput;\nuse Symfony\\Component\\Console\\Logger\\ConsoleLogger;\n\n// Create a logger instance\n$logger = new ConsoleLogger(new ConsoleOutput());\n\n// Log some information\n$logger->info('Adding book: The Great Gatsby');\n```\n\n### Explanation\n\n1. **Creating a Logger**: We create an instance of `ConsoleLogger` which takes care of logging to the console.\n2. **Logging Information**: Using the `info` method, we log a message when adding a book.\n\n## How It Works Internally\n\nLet\u2019s see how the internal implementation works:\n\n### Step-by-Step Walkthrough\n\n1. **User Initiates Command**: The user runs an add-book command.\n2. **Logger Catches Event**: When logging happens (e.g., `info` method is called), the logger formats and outputs the message to the console.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Logger as L\n    participant ConsoleOutput as CO\n\n    U->>L: Log \"Adding book: The Great Gatsby\"\n    L->>CO: Format and output the message\n```\n\n### Explanation of Sequence Diagram\n\n- **User Initiates Command**: The user runs an add-book command.\n- **Logger Catches Event**: When logging happens, the logger formats the message.\n- **Output to Console**: The formatted message is sent to the console.\n\n## Setting Up Error Logging\n\nSometimes, you might want to log errors differently from regular information. For example, if something goes wrong during the book addition process, you may want to highlight it more prominently.\n\n### Example Code for Error Logging\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Output\\ConsoleOutput;\nuse Symfony\\Component\\Console\\Logger\\ConsoleLogger;\n\n// Create a logger instance\n$logger = new ConsoleLogger(new ConsoleOutput());\n\ntry {\n    // Attempt to add a book\n    $bookId = addBook(\"The Great Gatsby\", \"F. Scott Fitzgerald\");\n} catch (\\Exception $e) {\n    // Log the error with a higher severity level\n    $logger->error('Failed to add book: ' . $e->getMessage());\n}\n\nfunction addBook($title, $author) {\n    // Simulated function that might throw an exception\n    if ($title === \"The Great Gatsby\") {\n        throw new \\Exception(\"Title already exists.\");\n    }\n    \n    return 123456;\n}\n```\n\n### Explanation\n\n1. **Creating a Logger**: We create an instance of `ConsoleLogger` with `ConsoleOutput`.\n2. **Error Handling**: Inside the try-catch block, we attempt to add a book and catch any exceptions.\n3. **Logging Error**: If an error occurs, we log it using the `error` method.\n\n## Internal Implementation\n\nNow let's dive deeper into how logging works internally:\n\n### Code Breakdown\n\n1. **Logger Class**: The `ConsoleLogger` class handles the formatting and output of logs.\n2. **Logging Methods**: Methods like `info`, `error`, etc., format and send messages to the console or file.\n\n### Example Code for ConsoleLogger\n\n```php\nclass ConsoleLogger extends AbstractLogger\n{\n    public function log($level, $message, array $context = [])\n    {\n        if ($level === LogLevel::ERROR) {\n            // Log errors with a higher verbosity level\n            $this->output->getErrorOutput()->writeln(\"<error>$message</error>\");\n        } else {\n            // Log other messages at the appropriate verbosity level\n            $this->output->writeln($message);\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Logging Levels**: The `log` method checks the log level and outputs the message to the appropriate output.\n2. **Formatting Messages**: Messages are formatted using placeholders for context values.\n\n## Conclusion\n\nIn this chapter, we learned about logging in our console application. We saw how to set up basic logging and handle error logging to keep track of important events. This helps us debug issues and understand the flow of our application.\n\nNext, we'll explore debugging techniques that complement logging. Debugging allows us to inspect the state of the application at different points to find and fix issues more efficiently.\n\nStay tuned for the next chapter: [Debugging Techniques](07_debugging_techniques_.md)\n---\n# Chapter 8: Command Testing\n\n## Transition from Previous Chapter\n\nIn our last chapter, we explored logging and debugging techniques to keep track of what's happening inside our console application. Now, let's move on to another crucial aspect\u2014testing commands. This is like practicing a musical piece before performing it in front of an audience.\n\n## Motivation\n\nImagine you're building a library management system where users can add, remove, or search for books. Before releasing this system, you want to make sure that each command works perfectly without any issues. How do you ensure everything runs smoothly? This is where **command testing** comes into play.\n\nCommand testing allows you to write tests for your commands so that you can validate their behavior and ensure they work as expected before deploying them in a production environment. Just like practicing a piece of music multiple times, command testing helps you fine-tune each part until it sounds perfect.\n\n## Key Concepts\n\n### 1. What is Command Testing?\n\nCommand testing is about creating test cases for your console commands to verify that they behave correctly. It's like setting up a practice room where developers can test their musical compositions before performing them in public.\n\n### Example Scenario: Adding a Book\n\nLet's say we have an `add-book` command. We want to ensure it works correctly by testing various scenarios:\n- Adding a book with valid data.\n- Handling invalid inputs (e.g., negative price or empty title).\n- Checking if the book is added successfully.\n\n## How to Use Command Testing\n\n### Setting Up Test Cases\n\nTo start, we'll use a test case class provided by Symfony Console. This class helps us write tests for our commands easily.\n\n#### Example Code\nHere\u2019s how you can set up a basic command test:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Tester\\CommandTester;\nuse Symfony\\Component\\Console\\Application;\n\n// Create an Application instance with your commands loaded.\n$application = new Application();\n$command = $application->find('add-book');\n\n// Create a CommandTester to run the command in a test environment.\n$commandTester = new CommandTester($command);\n\n// Run the command and capture its output.\n$commandTester->execute([\n    'title' => 'The Great Gatsby',\n    'author' => 'F. Scott Fitzgerald',\n    'price' => 10,\n]);\n\n// Check if the book was added successfully.\n$output = $commandTester->getDisplay();\nif (strpos($output, \"Book added successfully\") !== false) {\n    echo \"Test passed: Book added successfully.\\n\";\n} else {\n    echo \"Test failed: Book addition did not work as expected.\\n\";\n}\n```\n\n### Explanation\n\n1. **Create Application Instance**: We create an `Application` instance and load our commands.\n2. **Find Command**: Using the `find` method, we locate the `add-book` command.\n3. **Command Tester**: We use a `CommandTester` to run the command in a test environment.\n4. **Execute Command**: We pass arguments to the command and capture its output.\n5. **Check Output**: We verify if the book was added successfully by checking the output.\n\n## Internal Implementation\n\nLet's see what happens step-by-step when we run this code:\n\n1. **User Starts Application**: The user runs the test script.\n2. **Application Runs Command**: The `CommandTester` runs the command with provided arguments.\n3. **Capture Output**: It captures the console output to check if the book was added successfully.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant Application as A\n    participant CommandTester as CT\n    participant ConsoleOutput as CO\n\n    U->>A: Run add-book command tester\n    A->>CT: Execute add-book with arguments\n    CT->>CO: Capture console output\n    CT-->>U: Display output and verify result\n```\n\n### Explanation of Sequence Diagram\n\n- **User Starts Application**: The user runs the test script.\n- **Application Runs Command Tester**: The `CommandTester` executes the command with specified arguments.\n- **Capture Console Output**: It captures the console output to check the result.\n- **Display Result**: Finally, it displays the output and verifies if the book was added successfully.\n\n## Conclusion\n\nIn this chapter, we learned about command testing in our console application. We saw how to set up test cases for commands to ensure they work as expected. This helps us catch any issues early on before deploying them in a production environment.\n\nNext, we'll explore more advanced concepts like output wrapping and formatting! [Next Chapter: Output Wrapping](09_output_wrapping_.md)\n---\n# Chapter 9: Output Wrapping\n\n## Transition from Previous Chapter\n\nIn our previous chapter on [Output and Formatting](10_output_and_formatting_.md), we learned about making our console application's output look neat and pretty. Now, let's dive deeper into a specific aspect of formatting\u2014ensuring that long lines don't go beyond the terminal width. This is like when you're writing an essay and want to make sure each line fits neatly on the page.\n\n## Motivation\n\nImagine you're working on a library management system where users can see lists of books. When there are many books, some titles might be very long. If these titles go beyond the terminal width, it can look messy and hard to read. This is where output wrapping comes into play!\n\nOutput wrapping means breaking up long lines so they fit nicely within the terminal width. It's like manually adjusting each line in a paragraph to make sure no word goes beyond the margin.\n\n## Key Concepts\n\n### 1. What is Output Wrapping?\n\nOutput wrapping is about taking text and breaking it into smaller, manageable pieces that fit within the terminal width. This ensures the output looks clean and readable.\n\n### Example Scenario: Book List\n\nSuppose you have a list of books in your library management system. Each book title might be long, like \"The Great American Novel by Mark Twain\". If this title goes beyond the terminal width, it will look messy. Output wrapping helps break this line into smaller pieces so it fits neatly.\n\n## How to Use Output Wrapping\n\nLet's see how we can use output wrapping in our application:\n\n### Example Code\n\nHere\u2019s a simple example of using output wrapping:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Helper\\OutputWrapper;\n\n// Create an instance of OutputWrapper with default settings.\n$outputWrapper = new OutputWrapper();\n\n$text = \"The Great American Novel by Mark Twain is one of the most famous books in literature.\";\n$wrappedText = $outputWrapper->wrap($text, 40);\n\necho $wrappedText;\n```\n\n### Explanation\n\n1. **Create an Instance**: We create a `OutputWrapper` instance.\n2. **Wrap Text**: The `wrap` method takes the text and the desired width as arguments. It returns the wrapped text.\n\nThe output might look like this:\n\n```\nThe Great American Novel by M\nark Twain is one of the mo\nst famous books in literatu\nre.\n```\n\nNow, let's break down what happens step-by-step when we run this code:\n\n1. **User Runs Code**: The user runs the script to see the wrapped text.\n2. **Wrap Text**: The `wrap` method processes the text and breaks it into smaller pieces that fit within the specified width.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant OutputWrapper as OW\n    participant WrappedText as WT\n\n    U->>OW: Wrap \"The Great American Novel by Mark Twain is one of the most famous books in literature.\" with width 40\n    OW-->>WT: Returns wrapped text\n    U-->>U: Display wrapped text on console\n```\n\n### Explanation of Sequence Diagram\n\n- **User Runs Code**: The user runs the script.\n- **Wrap Text**: The `OutputWrapper` processes the input text and wraps it to fit within the specified width.\n- **Display Wrapped Text**: The result is displayed on the console.\n\n## Internal Implementation\n\nNow, let's take a closer look at how the internal implementation works:\n\n### Code Breakdown\n\nThe `wrap` method uses regular expressions and pattern matching to break up lines. Here\u2019s a simplified version of what happens inside:\n\n```php\nclass OutputWrapper {\n    private $allowCutUrls = false;\n\n    public function wrap(string $text, int $width): string {\n        if (!$width) {\n            return $text;\n        }\n\n        // Define patterns for tags and URLs\n        $tagPattern = '<[a-z](?:[^\\\\\\\\<>]*+ | \\\\\\\\.)*/(?:[a-z][^<>]*+)?>';\n        $urlPattern = 'https?://\\S+';\n\n        // Create the pattern to match text within the width limit\n        $rowPattern = \"(?:$tagPattern|$urlPattern|.){1,$width}(?:\\r?\\n)?\";\n        $pattern = \"#(?:((?>(?$1)((?<=[^\\S\\r\\n])[^\\S\\r\\n]?|(?=\\r?\\n)|$|[^\\S\\r\\n]))|($tagPattern))(?:\\r?\\n)?|(?:\\r?\\n|$))#imux\";\n\n        // Replace the text with wrapped lines\n        $output = preg_replace($pattern, '\\\\1', $text);\n\n        return str_replace(' '.$break, $break, $output);\n    }\n}\n```\n\n### Explanation\n\n1. **Check Width**: If no width is specified, it returns the original text.\n2. **Define Patterns**: It defines patterns for tags and URLs to handle them separately.\n3. **Create Pattern**: It creates a pattern that matches lines within the specified width limit.\n4. **Replace Text**: It uses `preg_replace` to replace the original text with wrapped lines.\n\n## Conclusion\n\nIn this chapter, we learned about output wrapping in our console application. We saw how to ensure long text fits nicely within terminal width using the `OutputWrapper` class. This helps make our output look clean and readable.\n\nNext, we'll explore more advanced concepts like handling URLs in wrapped text! [Next Chapter: Output Handling](10_output_and_formatting_.md)\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: Output/ConsoleSectionOutput.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\nuse Symfony\\Component\\Console\\Helper\\Helper;\nuse Symfony\\Component\\Console\\Terminal;\n\n/**\n * @author Pierre du Plessis <pdples@gmail.com>\n * @author Gabriel Ostroluck\u00fd <gabriel.ostrolucky@gmail.com>\n */\nclass ConsoleSectionOutput extends StreamOutput\n{\n    private array $content = [];\n    private int $lines = 0;\n    private array $sections;\n    private Terminal $terminal;\n    private int $maxHeight = 0;\n\n    /**\n     * @param resource               $stream\n     * @param ConsoleSectionOutput[] $sections\n     */\n    public function __construct($stream, array &$sections, int $verbosity, bool $decorated, OutputFormatterInterface $formatter)\n    {\n        parent::__construct($stream, $verbosity, $decorated, $formatter);\n        array_unshift($sections, $this);\n        $this->sections = &$sections;\n        $this->terminal = new Terminal();\n    }\n\n    /**\n     * Defines a maximum number of lines for this section.\n     *\n     * When more lines are added, the section will automatically scroll to the\n     * end (i.e. remove the first lines to comply with the max height).\n     */\n    public function setMaxHeight(int $maxHeight): void\n    {\n        // when changing max height, clear output of current section and redraw again with the new height\n        $previousMaxHeight = $this->maxHeight;\n        $this->maxHeight = $maxHeight;\n        $existingContent = $this->popStreamContentUntilCurrentSection($previousMaxHeight ? min($previousMaxHeight, $this->lines) : $this->lines);\n\n        parent::doWrite($this->getVisibleContent(), false);\n        parent::doWrite($existingContent, false);\n    }\n\n    /**\n     * Clears previous output for this section.\n     *\n     * @param int $lines Number of lines to clear. If null, then the entire output of this section is cleared\n     */\n    public function clear(?int $lines = null): void\n    {\n        if (!$this->content || !$this->isDecorated()) {\n            return;\n        }\n\n        if ($lines) {\n            array_splice($this->content, -$lines);\n        } else {\n            $lines = $this->lines;\n            $this->content = [];\n        }\n\n        $this->lines -= $lines;\n\n        parent::doWrite($this->popStreamContentUntilCurrentSection($this->maxHeight ? min($this->maxHeight, $lines) : $lines), false);\n    }\n\n    /**\n     * Overwrites the previous output with a new message.\n     */\n    public function overwrite(string|iterable $message): void\n    {\n        $this->clear();\n        $this->writeln($message);\n    }\n\n    public function getContent(): string\n    {\n        return implode('', $this->content);\n    }\n\n    public function getVisibleContent(): string\n    {\n        if (0 === $this->maxHeight) {\n            return $this->getContent();\n        }\n\n        return implode('', \\array_slice($this->content, -$this->maxHeight));\n    }\n\n    /**\n     * @internal\n     */\n    public function addContent(string $input, bool $newline = true): int\n    {\n        $width = $this->terminal->getWidth();\n        $lines = explode(\\PHP_EOL, $input);\n        $linesAdded = 0;\n        $count = \\count($lines) - 1;\n        foreach ($lines as $i => $lineContent) {\n            // re-add the line break (that has been removed in the above `explode()` for\n            // - every line that is not the last line\n            // - if $newline is required, also add it to the last line\n            if ($i < $count || $newline) {\n                $lineContent .= \\PHP_EOL;\n            }\n\n            // skip line if there is no text (or newline for that matter)\n            if ('' === $lineContent) {\n                continue;\n            }\n\n            // For the first line, check if the previous line (last entry of `$this->content`)\n            // needs to be continued (i.e. does not end with a line break).\n            if (0 === $i\n                && (false !== $lastLine = end($this->content))\n                && !str_ends_with($lastLine, \\PHP_EOL)\n            ) {\n                // deduct the line count of the previous line\n                $this->lines -= (int) ceil($this->getDisplayLength($lastLine) / $width) ?: 1;\n                // concatenate previous and new line\n                $lineContent = $lastLine.$lineContent;\n                // replace last entry of `$this->content` with the new expanded line\n                array_splice($this->content, -1, 1, $lineContent);\n            } else {\n                // otherwise just add the new content\n                $this->content[] = $lineContent;\n            }\n\n            $linesAdded += (int) ceil($this->getDisplayLength($lineContent) / $width) ?: 1;\n        }\n\n        $this->lines += $linesAdded;\n\n        return $linesAdded;\n    }\n\n    /**\n     * @internal\n     */\n    public function addNewLineOfInputSubmit(): void\n    {\n        $this->content[] = \\PHP_EOL;\n        ++$this->lines;\n    }\n\n    protected function doWrite(string $message, bool $newline): void\n    {\n        // Simulate newline behavior for consistent output formatting, avoiding extra logic\n        if (!$newline && str_ends_with($message, \\PHP_EOL)) {\n            $message = substr($message, 0, -\\strlen(\\PHP_EOL));\n            $newline = true;\n        }\n\n        if (!$this->isDecorated()) {\n            parent::doWrite($message, $newline);\n\n            return;\n        }\n\n        // Check if the previous line (last entry of `$this->content`) needs to be continued\n        // (i.e. does not end with a line break). In which case, it needs to be erased first.\n        $linesToClear = $deleteLastLine = ($lastLine = end($this->content) ?: '') && !str_ends_with($lastLine, \\PHP_EOL) ? 1 : 0;\n\n        $linesAdded = $this->addContent($message, $newline);\n\n        if ($lineOverflow = $this->maxHeight > 0 && $this->lines > $this->maxHeight) {\n            // on overflow, clear the whole section and redraw again (to remove the first lines)\n            $linesToClear = $this->maxHeight;\n        }\n\n        $erasedContent = $this->popStreamContentUntilCurrentSection($linesToClear);\n\n        if ($lineOverflow) {\n            // redraw existing lines of the section\n            $previousLinesOfSection = \\array_slice($this->content, $this->lines - $this->maxHeight, $this->maxHeight - $linesAdded);\n            parent::doWrite(implode('', $previousLinesOfSection), false);\n        }\n\n        // if the last line was removed, re-print its content together with the new content.\n        // otherwise, just print the new content.\n        parent::doWrite($deleteLastLine ? $lastLine.$message : $message, true);\n        parent::doWrite($erasedContent, false);\n    }\n\n    /**\n     * At initial stage, cursor is at the end of stream output. This method makes cursor crawl upwards until it hits\n     * current section. Then it erases content it crawled through. Optionally, it erases part of current section too.\n     */\n    private function popStreamContentUntilCurrentSection(int $numberOfLinesToClearFromCurrentSection = 0): string\n    {\n        $numberOfLinesToClear = $numberOfLinesToClearFromCurrentSection;\n        $erasedContent = [];\n\n        foreach ($this->sections as $section) {\n            if ($section === $this) {\n                break;\n            }\n\n            $numberOfLinesToClear += $section->maxHeight ? min($section->lines, $section->maxHeight) : $section->lines;\n            if ('' !== $sectionContent = $section->getVisibleContent()) {\n                if (!str_ends_with($sectionContent, \\PHP_EOL)) {\n                    $sectionContent .= \\PHP_EOL;\n                }\n                $erasedContent[] = $sectionContent;\n            }\n        }\n\n        if ($numberOfLinesToClear > 0) {\n            // move cursor up n lines\n            parent::doWrite(\\sprintf(\"\\x1b[%dA\", $numberOfLinesToClear), false);\n            // erase to end of screen\n            parent::doWrite(\"\\x1b[0J\", false);\n        }\n\n        return implode('', array_reverse($erasedContent));\n    }\n\n    private function getDisplayLength(string $text): int\n    {\n        return Helper::width(Helper::removeDecoration($this->getFormatter(), str_replace(\"\\t\", '        ', $text)));\n    }\n}\n\n\n--- File: Output/AnsiColorMode.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\n\n/**\n * @author Fabien Potencier <fabien@symfony.com>\n * @author Julien Boudry <julien@condorcet.vote>\n */\nenum AnsiColorMode\n{\n    /*\n     * Classical 4-bit Ansi colors, including 8 classical colors and 8 bright color. Output syntax is \"ESC[${foreGroundColorcode};${backGroundColorcode}m\"\n     * Must be compatible with all terminals and it's the minimal version supported.\n     */\n    case Ansi4;\n\n    /*\n     * 8-bit Ansi colors (240 different colors + 16 duplicate color codes, ensuring backward compatibility).\n     * Output syntax is: \"ESC[38;5;${foreGroundColorcode};48;5;${backGroundColorcode}m\"\n     * Should be compatible with most terminals.\n     */\n    case Ansi8;\n\n    /*\n     * 24-bit Ansi colors (RGB).\n     * Output syntax is: \"ESC[38;2;${foreGroundColorcodeRed};${foreGroundColorcodeGreen};${foreGroundColorcodeBlue};48;2;${backGroundColorcodeRed};${backGroundColorcodeGreen};${backGroundColorcodeBlue}m\"\n     * May be compatible with many modern terminals.\n     */\n    case Ansi24;\n\n    /**\n     * Converts an RGB hexadecimal color to the corresponding Ansi code.\n     */\n    public function convertFromHexToAnsiColorCode(string $hexColor): string\n    {\n        $hexColor = str_replace('#', '', $hexColor);\n\n        if (3 === \\strlen($hexColor)) {\n            $hexColor = $hexColor[0].$hexColor[0].$hexColor[1].$hexColor[1].$hexColor[2].$hexColor[2];\n        }\n\n        if (6 !== \\strlen($hexColor)) {\n            throw new InvalidArgumentException(\\sprintf('Invalid \"#%s\" color.', $hexColor));\n        }\n\n        $color = hexdec($hexColor);\n\n        $r = ($color >> 16) & 255;\n        $g = ($color >> 8) & 255;\n        $b = $color & 255;\n\n        return match ($this) {\n            self::Ansi4 => (string) $this->convertFromRGB($r, $g, $b),\n            self::Ansi8 => '8;5;'.$this->convertFromRGB($r, $g, $b),\n            self::Ansi24 => \\sprintf('8;2;%d;%d;%d', $r, $g, $b),\n        };\n    }\n\n    private function convertFromRGB(int $r, int $g, int $b): int\n    {\n        return match ($this) {\n            self::Ansi4 => $this->degradeHexColorToAnsi4($r, $g, $b),\n            self::Ansi8 => $this->degradeHexColorToAnsi8($r, $g, $b),\n            default => throw new InvalidArgumentException(\"RGB cannot be converted to {$this->name}.\"),\n        };\n    }\n\n    private function degradeHexColorToAnsi4(int $r, int $g, int $b): int\n    {\n        return round($b / 255) << 2 | (round($g / 255) << 1) | round($r / 255);\n    }\n\n    /**\n     * Inspired from https://github.com/ajalt/colormath/blob/e464e0da1b014976736cf97250063248fc77b8e7/colormath/src/commonMain/kotlin/com/github/ajalt/colormath/model/Ansi256.kt code (MIT license).\n     */\n    private function degradeHexColorToAnsi8(int $r, int $g, int $b): int\n    {\n        if ($r === $g && $g === $b) {\n            if ($r < 8) {\n                return 16;\n            }\n\n            if ($r > 248) {\n                return 231;\n            }\n\n            return (int) round(($r - 8) / 247 * 24) + 232;\n        }\n\n        return 16 +\n            (36 * (int) round($r / 255 * 5)) +\n            (6 * (int) round($g / 255 * 5)) +\n            (int) round($b / 255 * 5);\n    }\n}\n\n\n--- File: Formatter/OutputFormatterInterface.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Formatter;\n\n/**\n * Formatter interface for console output.\n *\n * @author Konstantin Kudryashov <ever.zet@gmail.com>\n */\ninterface OutputFormatterInterface\n{\n    /**\n     * Sets the decorated flag.\n     */\n    public function setDecorated(bool $decorated): void;\n\n    /**\n     * Whether the output will decorate messages.\n     */\n    public function isDecorated(): bool;\n\n    /**\n     * Sets a new style.\n     */\n    public function setStyle(string $name, OutputFormatterStyleInterface $style): void;\n\n    /**\n     * Checks if output formatter has style with specified name.\n     */\n    public function hasStyle(string $name): bool;\n\n    /**\n     * Gets style options from style with specified name.\n     *\n     * @throws \\InvalidArgumentException When style isn't defined\n     */\n    public function getStyle(string $name): OutputFormatterStyleInterface;\n\n    /**\n     * Formats a message according to the given styles.\n     */\n    public function format(?string $message): ?string;\n}\n\n\n--- File: Helper/SymfonyQuestionHelper.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatter;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion;\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\nuse Symfony\\Component\\Console\\Style\\SymfonyStyle;\n\n/**\n * Symfony Style Guide compliant question helper.\n *\n * @author Kevin Bond <kevinbond@gmail.com>\n */\nclass SymfonyQuestionHelper extends QuestionHelper\n{\n    protected function writePrompt(OutputInterface $output, Question $question): void\n    {\n        $text = OutputFormatter::escapeTrailingBackslash($question->getQuestion());\n        $default = $question->getDefault();\n\n        if ($question->isMultiline()) {\n            $text .= \\sprintf(' (press %s to continue)', $this->getEofShortcut());\n        }\n\n        switch (true) {\n            case null === $default:\n                $text = \\sprintf(' <info>%s</info>:', $text);\n\n                break;\n\n            case $question instanceof ConfirmationQuestion:\n                $text = \\sprintf(' <info>%s (yes/no)</info> [<comment>%s</comment>]:', $text, $default ? 'yes' : 'no');\n\n                break;\n\n            case $question instanceof ChoiceQuestion && $question->isMultiselect():\n                $choices = $question->getChoices();\n                $default = explode(',', $default);\n\n                foreach ($default as $key => $value) {\n                    $default[$key] = $choices[trim($value)];\n                }\n\n                $text = \\sprintf(' <info>%s</info> [<comment>%s</comment>]:', $text, OutputFormatter::escape(implode(', ', $default)));\n\n                break;\n\n            case $question instanceof ChoiceQuestion:\n                $choices = $question->getChoices();\n                $text = \\sprintf(' <info>%s</info> [<comment>%s</comment>]:', $text, OutputFormatter::escape($choices[$default] ?? $default));\n\n                break;\n\n            default:\n                $text = \\sprintf(' <info>%s</info> [<comment>%s</comment>]:', $text, OutputFormatter::escape($default));\n        }\n\n        $output->writeln($text);\n\n        $prompt = ' > ';\n\n        if ($question instanceof ChoiceQuestion) {\n            $output->writeln($this->formatChoiceQuestionChoices($question, 'comment'));\n\n            $prompt = $question->getPrompt();\n        }\n\n        $output->write($prompt);\n    }\n\n    protected function writeError(OutputInterface $output, \\Exception $error): void\n    {\n        if ($output instanceof SymfonyStyle) {\n            $output->newLine();\n            $output->error($error->getMessage());\n\n            return;\n        }\n\n        parent::writeError($output, $error);\n    }\n\n    private function getEofShortcut(): string\n    {\n        if ('Windows' === \\PHP_OS_FAMILY) {\n            return '<comment>Ctrl+Z</comment> then <comment>Enter</comment>';\n        }\n\n        return '<comment>Ctrl+D</comment>';\n    }\n}\n\n\n--- File: Helper/TableStyle.php ---\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\n\n/**\n * Defines the styles for a Table.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n * @author \u0421\u0430\u0448\u0430 \u0421\u0442\u0430\u043c\u0435\u043d\u043a\u043e\u0432\u0438\u045b <umpirsky@gmail.com>\n * @author Dany Maillard <danymaillard93b@gmail.com>\n */\nclass TableStyle\n{\n    private string $paddingChar = ' ';\n    private string $horizontalOutsideBorderChar = '-';\n    private string $horizontalInsideBorderChar = '-';\n    private string $verticalOutsideBorderChar = '|';\n    private string $verticalInsideBorderChar = '|';\n    private string $crossingChar = '+';\n    private string $crossingTopRightChar = '+';\n    private string $crossingTopMidChar = '+';\n    private string $crossingTopLeftChar = '+';\n    private string $crossingMidRightChar = '+';\n    private string $crossingBottomRightChar = '+';\n    private string $crossingBottomMidChar = '+';\n    private string $crossingBottomLeftChar = '+';\n    private string $crossingMidLeftChar = '+';\n    private string $crossingTopLeftBottomChar = '+';\n    private string $crossingTopMidBottomChar = '+';\n    private string $crossingTopRightBottomChar = '+';\n    private string $headerTitleFormat = '<fg=black;bg=white;options=bold> %s </>';\n    private string $footerTitleFormat = '<fg=black;bg=white;options=bold> %s </>';\n    private string $cellHeaderFormat = '<info>%s</info>';\n    private string $cellRowFormat = '%s';\n    private string $cellRowContentFormat = ' %s ';\n    private string $borderFormat = '%s';\n    private int $padType = \\STR_PAD_RIGHT;\n\n    /**\n     * Sets padding character, used for cell padding.\n     *\n     * @return $this\n     */\n    public function setPaddingChar(string $paddingChar): static\n    {\n        if (!$paddingChar) {\n            throw new LogicException('The padding char must not be empty.');\n        }\n\n        $this->paddingChar = $paddingChar;\n\n        return $this;\n    }\n\n    /**\n     * Gets padding character, used for cell padding.\n     */\n    public function getPaddingChar(): string\n    {\n        return $this->paddingChar;\n    }\n\n    /**\n     * Sets horizontal border characters.\n     *\n     * <code>\n     * \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n     * 1 ISBN          2 Title                    \u2502 Author           \u2551\n     * \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n     * \u2551 99921-58-10-7 \u2502 Divine Comedy            \u2502 Dante Alighieri  \u2551\n     * \u2551 9971-5-0210-0 \u2502 A Tale of Two Cities     \u2502 Charles Dickens  \u2551\n     * \u2551 960-425-059-0 \u2502 The Lord of the Rings    \u2502 J. R. R. Tolkien \u2551\n     * \u2551 80-902734-1-6 \u2502 And Then There Were None \u2502 Agatha Christie  \u2551\n     * \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n     * </code>\n     *\n     * @return $this\n     */\n    public function setHorizontalBorderChars(string $outside, ?string $inside = null): static\n    {\n        $this->horizontalOutsideBorderChar = $outside;\n        $this->horizontalInsideBorderChar = $inside ?? $outside;\n\n        return $this;\n    }\n\n    /**\n     * Sets vertical border characters.\n     *\n     * <code>\n     * \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n     * \u2551 ISBN          \u2502 Title                    \u2502 Author           \u2551\n     * \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u25501\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n     * \u2551 99921-58-10-7 \u2502 Divine Comedy            \u2502 Dante Alighieri  \u2551\n     * \u2551 9971-5-0210-0 \u2502 A Tale of Two Cities     \u2502 Charles Dickens  \u2551\n     * \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u25002\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562\n     * \u2551 960-425-059-0 \u2502 The Lord of the Rings    \u2502 J. R. R. Tolkien \u2551\n     * \u2551 80-902734-1-6 \u2502 And Then There Were None \u2502 Agatha Christie  \u2551\n     * \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n     * </code>\n     *\n     * @return $this\n     */\n    public function setVerticalBorderChars(string $outside, ?string $inside = null): static\n    {\n        $this->verticalOutsideBorderChar = $outside;\n        $this->verticalInsideBorderChar = $inside ?? $outside;\n\n        return $this;\n    }\n\n    /**\n     * Gets border characters.\n     *\n     * @internal\n     */\n    public function getBorderChars(): array\n    {\n        return [\n            $this->horizontalOutsideBorderChar,\n            $this->verticalOutsideBorderChar,\n            $this->horizontalInsideBorderChar,\n            $this->verticalInsideBorderChar,\n        ];\n    }\n\n    /**\n     * Sets crossing characters.\n     *\n     * Example:\n     * <code>\n     * 1\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25502\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25502\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25503\n     * \u2551 ISBN          \u2502 Title                    \u2502 Author           \u2551\n     * 8'\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25500'\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25500'\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25504'\n     * \u2551 99921-58-10-7 \u2502 Divine Comedy            \u2502 Dante Alighieri  \u2551\n     * \u2551 9971-5-0210-0 \u2502 A Tale of Two Cities     \u2502 Charles Dickens  \u2551\n     * 8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25000\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25000\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25004\n     * \u2551 960-425-059-0 \u2502 The Lord of the Rings    \u2502 J. R. R. Tolkien \u2551\n     * \u2551 80-902734-1-6 \u2502 And Then There Were None \u2502 Agatha Christie  \u2551\n     * 7\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25506\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25506\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25505\n     * </code>\n     *\n     * @param string      $cross          Crossing char (see #0 of example)\n     * @param string      $topLeft        Top left char (see #1 of example)\n     * @param string      $topMid         Top mid char (see #2 of example)\n     * @param string      $topRight       Top right char (see #3 of example)\n     * @param string      $midRight       Mid right char (see #4 of example)\n     * @param string      $bottomRight    Bottom right char (see #5 of example)\n     * @param string      $bottomMid      Bottom mid char (see #6 of example)\n     * @param string      $bottomLeft     Bottom left char (see #7 of example)\n     * @param string      $midLeft        Mid left char (see #8 of example)\n     * @param string|null $topLeftBottom  Top left bottom char (see #8' of example), equals to $midLeft if null\n     * @param string|null $topMidBottom   Top mid bottom char (see #0' of example), equals to $cross if null\n     * @param string|null $topRightBottom Top right bottom char (see #4' of example), equals to $midRight if null\n     *\n     * @return $this\n     */\n    public function setCrossingChars(string $cross, string $topLeft, string $topMid, string $topRight, string $midRight, string $bottomRight, string $bottomMid, string $bottomLeft, string $midLeft, ?string $topLeftBottom = null, ?string $topMidBottom = null, ?string $topRightBottom = null): static\n    {\n        $this->crossingChar = $cross;\n        $this->crossingTopLeftChar = $topLeft;\n        $this->crossingTopMidChar = $topMid;\n        $this->crossingTopRightChar = $topRight;\n        $this->crossingMidRightChar = $midRight;\n        $this->crossingBottomRightChar = $bottomRight;\n        $this->crossingBottomMidChar = $bottomMid;\n        $this->crossingBottomLeftChar = $bottomLeft;\n        $this->crossingMidLeftChar = $midLeft;\n        $this->crossingTopLeftBottomChar = $topLeftBottom ?? $midLeft;\n        $this->crossingTopMidBottomChar = $topMidBottom ?? $cross;\n        $this->crossingTopRightBottomChar = $topRightBottom ?? $midRight;\n\n        return $this;\n    }\n\n    /**\n     * Sets default crossing character used for each cross.\n     *\n     * @see {@link setCrossingChars()} for setting each crossing individually.\n     */\n    public function setDefaultCrossingChar(string $char): self\n    {\n        return $this->setCrossingChars($char, $char, $char, $char, $char, $char, $char, $char, $char);\n    }\n\n    /**\n     * Gets crossing character.\n     */\n    public function getCrossingChar(): string\n    {\n        return $this->crossingChar;\n    }\n\n    /**\n     * Gets crossing characters.\n     *\n     * @internal\n     */\n    public function getCrossingChars(): array\n    {\n        return [\n            $this->crossingChar,\n            $this->crossingTopLeftChar,\n            $this->crossingTopMidChar,\n            $this->crossingTopRightChar,\n            $this->crossingMidRightChar,\n            $this->crossingBottomRightChar,\n            $this->crossingBottomMidChar,\n            $this->crossingBottomLeftChar,\n            $this->crossingMidLeftChar,\n            $this->crossingTopLeftBottomChar,\n            $this->crossingTopMidBottomChar,\n            $this->crossingTopRightBottomChar,\n        ];\n    }\n\n    /**\n     * Sets header cell format.\n     *\n     * @return $this\n     */\n    public function setCellHeaderFormat(string $cellHeaderFormat): static\n    {\n        $this->cellHeaderFormat = $cellHeaderFormat;\n\n        return $this;\n    }\n\n    /**\n     * Gets header cell format.\n     */\n    public function getCellHeaderFormat(): string\n    {\n        return $this->cellHeaderFormat;\n    }\n\n    /**\n     * Sets row cell format.\n     *\n     * @return $this\n     */\n    public function setCellRowFormat(string $cellRowFormat): static\n    {\n        $this->cellRowFormat = $cellRowFormat;\n\n        return $this;\n    }\n\n    /**\n     * Gets row cell format.\n     */\n    public function getCellRowFormat(): string\n    {\n        return $this->cellRowFormat;\n    }\n\n    /**\n     * Sets row cell content format.\n     *\n     * @return $this\n     */\n    public function setCellRowContentFormat(string $cellRowContentFormat): static\n    {\n        $this->cellRowContentFormat = $cellRowContentFormat;\n\n        return $this;\n    }\n\n    /**\n     * Gets row cell content format.\n     */\n    public function getCellRowContentFormat(): string\n    {\n        return $this->cellRowContentFormat;\n    }\n\n    /**\n     * Sets table border format.\n     *\n     * @return $this\n     */\n    public function setBorderFormat(string $borderFormat): static\n    {\n        $this->borderFormat = $borderFormat;\n\n        return $this;\n    }\n\n    /**\n     * Gets table border format.\n     */\n    public function getBorderFormat(): string\n    {\n        return $this->borderFormat;\n    }\n\n    /**\n     * Sets cell padding type.\n     *\n     * @return $this\n     */\n    public function setPadType(int $padType): static\n    {\n        if (!\\in_array($padType, [\\STR_PAD_LEFT, \\STR_PAD_RIGHT, \\STR_PAD_BOTH], true)) {\n            throw new InvalidArgumentException('Invalid padding type. Expected one of (STR_PAD_LEFT, STR_PAD_RIGHT, STR_PAD_BOTH).');\n        }\n\n        $this->padType = $padType;\n\n        return $this;\n    }\n\n    /**\n     * Gets cell padding type.\n     */\n    public function getPadType(): int\n    {\n        return $this->padType;\n    }\n\n    public function getHeaderTitleFormat(): string\n    {\n        return $this->headerTitleFormat;\n    }\n\n    /**\n     * @return $this\n     */\n    public function setHeaderTitleFormat(string $format): static\n    {\n        $this->headerTitleFormat = $format;\n\n        return $this;\n    }\n\n    public function getFooterTitleFormat(): string\n    {\n        return $this->footerTitleFormat;\n    }\n\n    /**\n     * @return $this\n     */\n    public function setFooterTitleFormat(string $format): static\n    {\n        $this->footerTitleFormat = $format;\n\n        return $this;\n    }\n}\n\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 10: Output and Formatting\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 20 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 10: Output and Formatting\n\n## Transition from Previous Chapter\n\nIn our previous chapter on [Command Testing](08_command_testing_.md), we learned how to ensure that each command in our console application works as expected. Now, let's move on to another important aspect of building robust applications\u2014making sure the output looks neat and clean for users.\n\nImagine you're running a library management system where users can add books, remove books, or search for books by title. When they list all the books, each book should be displayed nicely in the console so that it's easy to read and understand. This is exactly what we'll cover in this chapter\u2014how to format our output to make it user-friendly.\n\n## Motivation\n\nLet's use a simple scenario: listing books from your library management system. When you list all the books, each book should have a title, author, and price neatly displayed. If any of these fields are too long or if there are many books, the text might overflow and become hard to read. To prevent this, we need to ensure that our output is properly wrapped and formatted.\n\n## Key Concepts\n\n### 1. What is Output Wrapping?\n\nOutput wrapping means breaking up lines of text so they fit within a certain width. This ensures that long titles or descriptions don't go beyond the terminal width and make the output hard to read. It's like manually adjusting each line in an essay to make sure no word goes beyond the margin.\n\n### 2. Why Do We Need Wrapping?\n\nImagine you have a long book title like \"The Great American Novel by Mark Twain.\" If this title goes beyond the terminal width, it will look messy and hard to read. By wrapping the text, we can ensure that each line fits nicely within the screen width.\n\n### 3. How Does It Work?\n\nOutput wrapping is achieved using a special class that handles the breaking of lines. This class takes a piece of text and breaks it into smaller pieces so that they fit within the specified width.\n\n## Example Scenario: Listing Books\n\nLet's say you have a list of books in your library management system, and each book has a title, author, and price. You want to display this information neatly on the console. Here\u2019s how we can use output wrapping:\n\n```php\n<?php\n\nuse Symfony\\Component\\Console\\Helper\\OutputWrapper;\n\n// Create an instance of OutputWrapper with default settings.\n$outputWrapper = new OutputWrapper();\n\n$text = \"The Great American Novel by Mark Twain is one of the most famous books in literature.\";\n$wrappedText = $outputWrapper->wrap($text, 40);\n\necho $wrappedText;\n```\n\n### Explanation\n\n1. **Create an Instance**: We create a `OutputWrapper` instance.\n2. **Wrap Text**: The `wrap` method takes the text and the desired width as arguments. It returns the wrapped text.\n\nThe output might look like this:\n\n```\nThe Great American Novel by M\nark Twain is one of the mo\nst famous books in literatu\nre.\n```\n\nNow, let's break down what happens step-by-step when we run this code:\n\n1. **User Runs Code**: The user runs the script to see the wrapped text.\n2. **Wrap Text**: The `OutputWrapper` processes the input text and breaks it into smaller pieces that fit within the specified width.\n3. **Display Wrapped Text**: The result is displayed on the console.\n\n### Sequence Diagram\n\nHere\u2019s a simple sequence diagram illustrating how this works:\n\n```mermaid\nsequenceDiagram\n    participant User as U\n    participant OutputWrapper as OW\n    participant WrappedText as WT\n\n    U->>OW: Wrap \"The Great American Novel by Mark Twain is one of the most famous books in literature.\" with width 40\n    OW-->>WT: Returns wrapped text\n    U-->>U: Display wrapped text on console\n```\n\n### Explanation of Sequence Diagram\n\n- **User Runs Code**: The user runs the script.\n- **Wrap Text**: The `OutputWrapper` processes the input text and wraps it to fit within the specified width.\n- **Display Wrapped Text**: The result is displayed on the console.\n\n## Internal Implementation\n\nNow, let's take a closer look at how the internal implementation works:\n\n### Code Breakdown\n\nThe `wrap` method uses regular expressions and pattern matching to break up lines. Here\u2019s a simplified version of what happens inside:\n\n```php\nclass OutputWrapper {\n    private $allowCutUrls = false;\n\n    public function wrap(string $text, int $width): string {\n        if (!$width) {\n            return $text;\n        }\n\n        // Define patterns for tags and URLs\n        $tagPattern = '<[a-z](?:[^\\\\\\\\<>]*+ | \\\\\\\\.)*/(?:[a-z][^<>]*+)?>';\n        $urlPattern = 'https?://\\S+';\n\n        // Create the pattern to match text within the width limit\n        $rowPattern = \"(?:$tagPattern|$urlPattern|.){1,$width}(?:\\r?\\n)?\";\n        $pattern = \"#(?:((?>(?$1)((?<=[^\\S\\r\\n])[^\\S\\r\\n]?|(?=\\r?\\n)|$|[^\\S\\r\\n]))|($tagPattern))(?:\\r?\\n)?|(?:\\r?\\n|$))#imux\";\n\n        // Replace the text with wrapped lines\n        $output = preg_replace($pattern, '\\\\1', $text);\n\n        return str_replace(' '.$break, $break, $output);\n    }\n}\n```\n\n### Explanation\n\n1. **Check Width**: If no width is specified, it returns the original text.\n2. **Define Patterns**: It defines patterns for tags and URLs to handle them separately.\n3. **Create Pattern**: It creates a pattern that matches lines within the specified width limit.\n4. **Replace Text**: It uses `preg_replace` to replace the original text with wrapped lines.\n\n## Conclusion\n\nIn this chapter, we learned about output wrapping in our console application. We saw how to ensure long text fits nicely within terminal width using the `OutputWrapper` class. This helps make our output look clean and readable.\n\nNext, we'll explore more advanced concepts like handling URLs in wrapped text! [Next Chapter: Output Handling](10_output_and_handling_.md)\n\n--- File: Output/ConsoleSectionOutput.php ---\n```php\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\nuse Symfony\\Component\\Console\\Helper\\Helper;\nuse Symfony\\Component\\Console\\Terminal;\n\n/**\n * @author Pierre du Plessis <pdples@gmail.com>\n * @author Gabriel Ostroluck\u00fd <gabriel.ostrolucky@gmail.com>\n */\nclass ConsoleSectionOutput extends StreamOutput\n{\n    // ... (same as in the original code)\n}\n```\n\n--- File: Output/AnsiColorMode.php ---\n```php\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\n\n/**\n * @author Fabien Potencier <fabien@symfony.com>\n * @author Julien Boudry <julien@condorcet.vote>\n */\nenum AnsiColorMode\n{\n    // ... (same as in the original code)\n}\n```\n\n--- File: Formatter/OutputFormatterInterface.php ---\n```php\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Formatter;\n\n/**\n * Formatter interface for console output.\n *\n * @author Konstantin Kudryashov <ever.zet@gmail.com>\n */\ninterface OutputFormatterInterface\n{\n    // ... (same as in the original code)\n}\n```\n\n--- File: Helper/SymfonyQuestionHelper.php ---\n```php\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatter;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion;\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\nuse Symfony\\Component\\Console\\Question\\Question;\nuse Symfony\\Component\\Console\\Style\\SymfonyStyle;\n\n/**\n * Symfony Style Guide compliant question helper.\n *\n * @author Kevin Bond <kevinbond@gmail.com>\n */\nclass SymfonyQuestionHelper extends QuestionHelper\n{\n    // ... (same as in the original code)\n}\n```\n\n--- File: Helper/TableStyle.php ---\n```php\n<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Console\\Exception\\LogicException;\n\n/**\n * Defines the styles for a Table.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n * @author \u0421\u0430\u0448\u0430 \u0421\u0442\u0430\u043c\u0435\u043d\u043a\u043e\u0432\u0438\u045b <umpirsky@gmail.com>\n * @author Dany Maillard <danymaillard93b@gmail.com>\n */\nclass TableStyle\n{\n    // ... (same as in the original code)\n}\n```"
}